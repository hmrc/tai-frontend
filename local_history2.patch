Index: it/controllers/ContentsCheckSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/it/controllers/ContentsCheckSpec.scala b/it/controllers/ContentsCheckSpec.scala
new file mode 100644
--- /dev/null	(date 1696950747639)
+++ b/it/controllers/ContentsCheckSpec.scala	(date 1696950747639)
@@ -0,0 +1,995 @@
+/*
+ * Copyright 2023 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package controllers
+
+import com.github.tomakehurst.wiremock.client.WireMock
+import com.github.tomakehurst.wiremock.client.WireMock.{delete, get, matching, ok, post, put, urlEqualTo, urlMatching}
+import org.jsoup.Jsoup
+import org.mockito.scalatest.MockitoSugar
+import org.scalatest.matchers.must.Matchers
+import play.api.Application
+import play.api.http.ContentTypes
+import play.api.http.Status.{LOCKED, OK}
+import play.api.inject.bind
+import play.api.inject.guice.GuiceApplicationBuilder
+import play.api.libs.json.{JsArray, JsValue, Json}
+import play.api.mvc.{AnyContentAsEmpty, Result}
+import play.api.test.FakeRequest
+import play.api.test.Helpers.{CONTENT_TYPE, GET, contentAsString, defaultAwaitTimeout, route, status, writeableOf_AnyContentAsEmpty}
+import uk.gov.hmrc.http.SessionKeys
+import uk.gov.hmrc.mongoFeatureToggles.model.FeatureFlag
+import uk.gov.hmrc.mongoFeatureToggles.services.FeatureFlagService
+import uk.gov.hmrc.sca.models.{MenuItemConfig, PtaMinMenuConfig, WrapperDataResponse}
+import uk.gov.hmrc.tai.model.{CalculatedPay, Employers, JrsClaims, TaxYear, YearAndMonth}
+import uk.gov.hmrc.tai.model.admin.{CyPlusOneToggle, IncomeTaxHistoryToggle, SCAWrapperToggle}
+import uk.gov.hmrc.tai.model.domain.income.Week1Month1BasisOfOperation
+import uk.gov.hmrc.tai.model.domain.tax.{IncomeCategory, NonSavingsIncomeCategory, TaxBand, TotalTax}
+import uk.gov.hmrc.tai.model.domain.{Address, CarBenefit, Person, TaxAccountSummary, TaxCodeChange, TaxCodeRecord, TaxComponentType}
+import uk.gov.hmrc.tai.util.constants.EditIncomeIrregularPayConstants
+import utils.IntegrationSpec
+import utils.JsonGenerator.{taxCodeChangeJson, taxCodeIncomesJson}
+
+import java.time.LocalDate
+import java.util.UUID
+import scala.concurrent.Future
+import scala.jdk.CollectionConverters.CollectionHasAsScala
+import scala.util.Random
+
+class ContentsCheckSpec extends IntegrationSpec with MockitoSugar with Matchers {
+
+  val mockFeatureFlagService = mock[FeatureFlagService]
+
+  case class ExpectedData(
+    title: String,
+    navBarExpected: Boolean,
+    httpStatus: Int = OK,
+    headerTitle: String = "Check your Income Tax"
+  )
+
+  def getExpectedData(key: String): ExpectedData =
+    key match {
+      case "what-to-do" =>
+        ExpectedData(
+          "PAYE Income Tax overview - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "jrs-claims" =>
+        ExpectedData(
+          "Coronavirus Job Retention Scheme - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "no-info" =>
+        ExpectedData(
+          "Your PAYE Income Tax - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "historic-paye-year" =>
+        ExpectedData("Your taxable income for 6 April 2022 to 5 April 2023 - Check your Income Tax - GOV.UK", true)
+      case "income-tax-history" =>
+        ExpectedData("Income tax history - Check your Income Tax - GOV.UK", true)
+      case "timeout" => ExpectedData("Log In - Check your Income Tax - GOV.UK", false)
+      case "tax-estimate-unavailable" =>
+        ExpectedData("We cannot access your details - Check your Income Tax - GOV.UK", false, LOCKED)
+      case "deceased" =>
+        ExpectedData("The information you want is not available to view - Check your Income Tax - GOV.UK", true)
+      case "session-expired" =>
+        ExpectedData("For your security, we signed you out - Check your Income Tax - GOV.UK", false)
+      case "add-employment-name" =>
+        ExpectedData("What is the name of the employer you want to add? - Check your Income Tax - GOV.UK", true)
+      case "add-employment-start-date" =>
+        ExpectedData("When did you start working for this employer? - Check your Income Tax - GOV.UK", true)
+      case "add-employment-first-pay" =>
+        ExpectedData(
+          "Have you received your first pay from H M Revenue and Customs? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "add-employment-six-weeks" =>
+        ExpectedData(
+          "We cannot add this employer yet - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "add-employment-payroll-number" =>
+        ExpectedData(
+          "Do you know your payroll number for this employer? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "add-employment-telephone-number" | "add-pension-telephone-number" | "end-employment-telephone-number" |
+          "update-employment-telephone-number" | "update-income-details-number" | "remove-telephone-number" |
+          "incorrect-pension-telephone-number" =>
+        ExpectedData("Can we call you if we need more information? - Check your Income Tax - GOV.UK", true)
+      case "add-employment-cya" | "add-pension-cya" | "end-employment-cya" | "update-employment-cya" |
+          "update-income-cya" | "update-income-details-cya" | "remove-cya" | "incorrect-pension-cya" =>
+        ExpectedData("Check your answers - Check your Income Tax - GOV.UK", true)
+      case "add-employment-success" =>
+        ExpectedData("Your update about an employment has been received - Check your Income Tax - GOV.UK", true)
+      case "add-pension-name" =>
+        ExpectedData(
+          "What is the name of the pension provider you want to add? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "add-pension-first-payment" =>
+        ExpectedData(
+          "Have you received your first pension payment from this employer? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "add-pension-number" =>
+        ExpectedData(
+          "Do you know your pension number from your this employer? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "add-pension-success" =>
+        ExpectedData("Your update about a pension has been received - Check your Income Tax - GOV.UK", true)
+      case "remove-employment-warning" =>
+        ExpectedData("You have already sent an update about this employment - Check your Income Tax - GOV.UK", true)
+      case "end-employment-decision" =>
+        ExpectedData("Do you currently work for H M Revenue and Customs? - Check your Income Tax - GOV.UK", true)
+      case "end-employment-six-weeks" =>
+        ExpectedData("We cannot update your details yet - Check your Income Tax - GOV.UK", true)
+      case "end-employment-irregular-payment" =>
+        ExpectedData("End employment - Check your Income Tax - GOV.UK", true)
+      case "end-employment-date" =>
+        ExpectedData("When did you finish working for this employer? - Check your Income Tax - GOV.UK", true)
+      case "update-employment-tell-us" =>
+        ExpectedData("What do you want to tell us about this employer? - Check your Income Tax - GOV.UK", true)
+      case "update-employment-success" =>
+        ExpectedData("Your update about an employment has been received - Check your Income Tax - GOV.UK", true)
+      case "previous-underpayment" =>
+        ExpectedData("What is a previous year underpayment? - Check your Income Tax - GOV.UK", true)
+      case "underpayment-estimate" =>
+        ExpectedData("Estimated tax you owe - Check your Income Tax - GOV.UK", true)
+      case "tax-free-allowance" =>
+        ExpectedData("Your tax-free amount for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
+      case "tax-code" =>
+        ExpectedData("Your tax code for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
+      case "year-tax-codes" =>
+        ExpectedData("Your last tax code for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
+      case "paye-income-tax-estimate" =>
+        ExpectedData(
+          "Your PAYE Income Tax estimate - Check your Income Tax - GOV.UK",
+          true,
+          headerTitle = "Your PAYE Income Tax estimate"
+        )
+      case "detailed-income-tax-estimate" =>
+        ExpectedData("Your detailed PAYE Income Tax estimate - Check your Income Tax - GOV.UK", true)
+      case "income-tax-comparison" =>
+        ExpectedData("Income Tax comparison: current tax year and next tax year - Check your Income Tax - GOV.UK", true)
+      case "your-income-calculation-details" =>
+        ExpectedData("Taxable income from company name - Check your Income Tax - GOV.UK", true)
+      case "update-income-warning" =>
+        ExpectedData("You have already sent a new estimated income - Check your Income Tax - GOV.UK", true)
+      case "update-income-start" =>
+        ExpectedData("Update your estimated income - Check your Income Tax - GOV.UK", true)
+      case "update-income-estimated-pay" =>
+        ExpectedData("There is an error with your calculation - Check your Income Tax - GOV.UK", true)
+      case "how-to-update-income" =>
+        ExpectedData("How do you want to update your estimated income - Check your Income Tax - GOV.UK", true)
+      case "update-income-working-hours" =>
+        ExpectedData("What are your working hours through the year? - Check your Income Tax - GOV.UK", true)
+      case "edit-income-irregular-hours" =>
+        ExpectedData(
+          "We cannot calculate your annual income as you have irregular working hours - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "edit-income-irregular-hours-confirm" | "update-income-check-save" =>
+        ExpectedData(
+          "Confirm your estimated income for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "edit-income-irregular-hours-submit" =>
+        ExpectedData(
+          "Your taxable income has been updated - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-income-pay-period" =>
+        ExpectedData(
+          "How often do you get paid? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-income-payslip-amount" =>
+        ExpectedData("Enter your gross pay for the month - Check your Income Tax - GOV.UK", true)
+      case "update-income-payslip-deductions" =>
+        ExpectedData(
+          "Does your payslip show deductions before tax and National Insurance? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-income-taxable-payslip-amount" =>
+        ExpectedData("Enter your taxable pay for the month - Check your Income Tax - GOV.UK", true)
+      case "update-income-bonus-payments" =>
+        ExpectedData(
+          "Will you get any bonus, commission or overtime between 6 April 2023 and 5 April 2024? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-income-bonus-overtime-amount" =>
+        ExpectedData(
+          "How much do you think you will get in bonus, commission or overtime between 6 April 2023 and 5 April 2024? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-income-edit-taxable-pay" | "update-income-edit-pension" =>
+        ExpectedData(
+          "Update your estimated income for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-income-same-estimated-pay" =>
+        ExpectedData("Your estimated income for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
+      case "update-income-success-page" =>
+        ExpectedData("Your taxable income has been updated - Check your Income Tax - GOV.UK", true)
+      case "get-help" =>
+        ExpectedData("Cannot pay the tax you owe this year - Check your Income Tax - GOV.UK", true)
+      case "update-income-details-decision" =>
+        ExpectedData("Update income details for 6 April 2022 to 5 April 2023 - Check your Income Tax - GOV.UK", true)
+      case "update-income-what-to-tell" =>
+        ExpectedData("What do you want to tell us about your income details? - Check your Income Tax - GOV.UK", true)
+      case "update-income-details-success" =>
+        ExpectedData("Your update has been received - Check your Income Tax - GOV.UK", true)
+      case "income" =>
+        ExpectedData("Your tax-free amount for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
+      case "income-tax-refresh" =>
+        ExpectedData(
+          "Your PAYE Income Tax summary for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "remove-stop-date" =>
+        ExpectedData(
+          "When did you stop getting benefitName benefit from employmentName? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "remove-total-value-of-benefit" =>
+        ExpectedData(
+          "What was the total value of your benefitName benefit from employmentName? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "remove-success" =>
+        ExpectedData(
+          "Your update has been received - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "company-benefit-decision" =>
+        ExpectedData(
+          "Do you currently get Telephone benefit from company name? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "incorrect-pension-decision" =>
+        ExpectedData(
+          "Confirm your pension provider - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "incorrect-pension-what-to-tell" =>
+        ExpectedData(
+          "What do you want to tell us about your pension provider? - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "incorrect-pension-success" =>
+        ExpectedData(
+          "Your update about a pension has been received - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "incorrect-pension-warning" =>
+        ExpectedData(
+          "You have already sent an update about this pension - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "tax-code-comparison" =>
+        ExpectedData(
+          "Your tax code change - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "your-tax-free-amount" =>
+        ExpectedData(
+          "How we worked out your tax code - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "what-happens-next" =>
+        ExpectedData(
+          "What happens next - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "unauthorised" =>
+        ExpectedData(
+          "You have been signed out for your security - Check your Income Tax - GOV.UK",
+          false
+        )
+      case "update-next-income-warning" =>
+        ExpectedData(
+          "You have already sent a new estimated income - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-next-income-start" =>
+        ExpectedData(
+          "Update your estimated income from <span class=\"carry-over\">company name</span> for next tax year - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-next-income-edit" =>
+        ExpectedData(
+          "Update your estimated income for 6 April 2024 to 5 April 2025 - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-next-income-no-change" =>
+        ExpectedData("Your estimated income for 6 April 2024 to 5 April 2025 - Check your Income Tax - GOV.UK", true)
+      case "update-next-income-confirm" =>
+        ExpectedData(
+          "Confirm your estimated income for 6 April 2024 to 5 April 2025 - Check your Income Tax - GOV.UK",
+          true
+        )
+      case "update-next-income-success" =>
+        ExpectedData(
+          "Your updated estimated income for 6 April 2024 to 5 April 2025 - Check your Income Tax - GOV.UK",
+          true
+        )
+    }
+
+  val urls = Map(
+    "/check-income-tax/what-do-you-want-to-do"                        -> getExpectedData("what-to-do"),
+    "/check-income-tax/jrs-claims"                                    -> getExpectedData("jrs-claims"),
+    "/check-income-tax/income-tax/no-info"                            -> getExpectedData("no-info"),
+    s"/check-income-tax/historic-paye/${LocalDate.now().getYear - 1}" -> getExpectedData("historic-paye-year"),
+    "/check-income-tax/income-tax-history"                            -> getExpectedData("income-tax-history"),
+    "/check-income-tax/timeout"                                       -> getExpectedData("timeout"),
+    "/check-income-tax/tax-estimate-unavailable"                      -> getExpectedData("tax-estimate-unavailable"),
+    "/check-income-tax/deceased"                                      -> getExpectedData("deceased"),
+    "/check-income-tax/session-expired"                               -> getExpectedData("session-expired"),
+    "/check-income-tax/add-employment/employment-name"                -> getExpectedData("add-employment-name"),
+    "/check-income-tax/add-employment/employment-start-date"          -> getExpectedData("add-employment-start-date"),
+    "/check-income-tax/add-employment/employment-first-pay"           -> getExpectedData("add-employment-first-pay"),
+    "/check-income-tax/add-employment/six-weeks"                      -> getExpectedData("add-employment-six-weeks"),
+    "/check-income-tax/add-employment/employment-payroll-number" -> getExpectedData("add-employment-payroll-number"),
+    "/check-income-tax/add-employment/telephone-number"          -> getExpectedData("add-employment-telephone-number"),
+    "/check-income-tax/add-employment/check-your-answers"        -> getExpectedData("add-employment-cya"),
+    "/check-income-tax/add-employment/employment-success"        -> getExpectedData("add-employment-success"),
+    "/check-income-tax/add-pension-provider/name"                -> getExpectedData("add-pension-name"),
+    "/check-income-tax/add-pension-provider/received-first-payment" -> getExpectedData("add-pension-first-payment"),
+    "/check-income-tax/add-pension-provider/pension-number"         -> getExpectedData("add-pension-number"),
+    "/check-income-tax/add-pension-provider/telephone-number"       -> getExpectedData("add-pension-telephone-number"),
+    "/check-income-tax/add-pension-provider/check-your-answers"     -> getExpectedData("add-pension-cya"),
+    "/check-income-tax/add-pension-provider/success"                -> getExpectedData("add-pension-success"),
+    "/check-income-tax/update-remove-employment/warning"            -> getExpectedData("remove-employment-warning"),
+    "/check-income-tax/update-remove-employment/decision-page"      -> getExpectedData("end-employment-decision"),
+    "/check-income-tax/end-employment/six-weeks"                    -> getExpectedData("end-employment-six-weeks"),
+    "/check-income-tax/end-employment/irregular-payment"  -> getExpectedData("end-employment-irregular-payment"),
+    "/check-income-tax/end-employment/telephone-number"   -> getExpectedData("end-employment-telephone-number"),
+    "/check-income-tax/end-employment/date"               -> getExpectedData("end-employment-date"),
+    "/check-income-tax/end-employment/check-your-answers" -> getExpectedData("end-employment-cya"),
+    "/check-income-tax/update-employment/what-do-you-want-to-tell-us/1" -> getExpectedData("update-employment-tell-us"),
+    "/check-income-tax/update-employment/telephone-number"    -> getExpectedData("update-employment-telephone-number"),
+    "/check-income-tax/update-employment/check-your-answers"  -> getExpectedData("update-employment-cya"),
+    "/check-income-tax/update-employment/success"             -> getExpectedData("update-employment-success"),
+    "/check-income-tax/previous-underpayment"                 -> getExpectedData("previous-underpayment"),
+    "/check-income-tax/underpayment-estimate"                 -> getExpectedData("underpayment-estimate"),
+    "/check-income-tax/tax-free-allowance"                    -> getExpectedData("tax-free-allowance"),
+    "/check-income-tax/tax-code/1"                            -> getExpectedData("tax-code"),
+    s"/check-income-tax/tax-codes/${LocalDate.now().getYear}" -> getExpectedData("year-tax-codes"),
+    "/check-income-tax/paye-income-tax-estimate"              -> getExpectedData("paye-income-tax-estimate"),
+    "/check-income-tax/detailed-income-tax-estimate"          -> getExpectedData("detailed-income-tax-estimate"),
+    "/check-income-tax/income-tax-comparison"                 -> getExpectedData("income-tax-comparison"),
+    "/check-income-tax/your-income-calculation-details/1"     -> getExpectedData("your-income-calculation-details"),
+    "/check-income-tax/update-income/warning/1"               -> getExpectedData("update-income-warning"),
+    "/check-income-tax/update-income/check-your-answers/1"    -> getExpectedData("update-income-cya"),
+    "/check-income-tax/update-income/start/1"                 -> getExpectedData("update-income-start"),
+    "/check-income-tax/update-income/estimated-pay/1"         -> getExpectedData("update-income-estimated-pay"),
+    "/check-income-tax/update-income/how-to-update-income/1"  -> getExpectedData("how-to-update-income"),
+    "/check-income-tax/update-income/working-hours"           -> getExpectedData("update-income-working-hours"),
+    "/check-income-tax/update-income/edit-income-irregular-hours/1" -> getExpectedData("edit-income-irregular-hours"),
+    "/check-income-tax/update-income/edit-income-irregular-hours/1/confirm" -> getExpectedData(
+      "edit-income-irregular-hours-confirm"
+    ),
+    "/check-income-tax/update-income/edit-income-irregular-hours/1/submit" -> getExpectedData(
+      "edit-income-irregular-hours-submit"
+    ),
+    "/check-income-tax/update-income/pay-period"             -> getExpectedData("update-income-pay-period"),
+    "/check-income-tax/update-income/payslip-amount"         -> getExpectedData("update-income-payslip-amount"),
+    "/check-income-tax/update-income/payslip-deductions"     -> getExpectedData("update-income-payslip-deductions"),
+    "/check-income-tax/update-income/taxable-payslip-amount" -> getExpectedData("update-income-taxable-payslip-amount"),
+    "/check-income-tax/update-income/bonus-payments"         -> getExpectedData("update-income-bonus-payments"),
+    "/check-income-tax/update-income/bonus-overtime-amount"  -> getExpectedData("update-income-bonus-overtime-amount"),
+    "/check-income-tax/update-income/edit-taxable-pay/1"     -> getExpectedData("update-income-edit-taxable-pay"),
+    "/check-income-tax/update-income/edit-pension/1"         -> getExpectedData("update-income-edit-pension"),
+    "/check-income-tax/update-income/income/1/check-save"    -> getExpectedData("update-income-check-save"),
+    "/check-income-tax/update-income/income/same-estimated-pay/1" -> getExpectedData(
+      "update-income-same-estimated-pay"
+    ),
+    "/check-income-tax/update-income/success-page/1" -> getExpectedData("update-income-success-page"),
+    "/check-income-tax/get-help"                     -> getExpectedData("get-help"),
+    s"/check-income-tax/update-income-details/decision/${TaxYear().prev.year}" -> getExpectedData(
+      "update-income-details-decision"
+    ),
+    "/check-income-tax/update-income-details/what-do-you-want-to-tell-us" -> getExpectedData(
+      "update-income-what-to-tell"
+    ),
+    "/check-income-tax/update-income-details/telephone-number" -> getExpectedData(
+      "update-income-details-number"
+    ),
+    "/check-income-tax/update-income-details/success" -> getExpectedData(
+      "update-income-details-success"
+    ),
+    "/check-income-tax/income"                           -> getExpectedData("income"),
+    "/check-income-tax/income-tax-refresh"               -> getExpectedData("income-tax-refresh"),
+    "/check-income-tax/remove-company-benefit/stop-date" -> getExpectedData("remove-stop-date"),
+    "/check-income-tax/remove-company-benefit/total-value-of-benefit" -> getExpectedData(
+      "remove-total-value-of-benefit"
+    ),
+    "/check-income-tax/remove-company-benefit/telephone-number"   -> getExpectedData("remove-telephone-number"),
+    "/check-income-tax/remove-company-benefit/check-your-answers" -> getExpectedData("remove-cya"),
+    "/check-income-tax/remove-company-benefit/success"            -> getExpectedData("remove-success"),
+    "/check-income-tax/company-benefit/decision"                  -> getExpectedData("company-benefit-decision"),
+    "/check-income-tax/incorrect-pension/decision"                -> getExpectedData("incorrect-pension-decision"),
+    "/check-income-tax/incorrect-pension/what-do-you-want-to-tell-us" -> getExpectedData(
+      "incorrect-pension-what-to-tell"
+    ),
+    "/check-income-tax/incorrect-pension/telephone-number"   -> getExpectedData("incorrect-pension-telephone-number"),
+    "/check-income-tax/incorrect-pension/check-your-answers" -> getExpectedData("incorrect-pension-cya"),
+    "/check-income-tax/incorrect-pension/success"            -> getExpectedData("incorrect-pension-success"),
+    "/check-income-tax/incorrect-pension/warning"            -> getExpectedData("incorrect-pension-warning"),
+    "/check-income-tax/tax-code-change/tax-code-comparison"  -> getExpectedData("tax-code-comparison"),
+    "/check-income-tax/tax-code-change/your-tax-free-amount" -> getExpectedData("your-tax-free-amount"),
+    "/check-income-tax/tax-code-change/what-happens-next"    -> getExpectedData("what-happens-next"),
+    "/check-income-tax/unauthorised"                         -> getExpectedData("unauthorised"),
+    "/check-income-tax/update-income/next-year/income/1/warning"   -> getExpectedData("update-next-income-warning"),
+    "/check-income-tax/update-income/next-year/income/1/start"     -> getExpectedData("update-next-income-start"),
+    "/check-income-tax/update-income/next-year/income/1/edit"      -> getExpectedData("update-next-income-edit"),
+    "/check-income-tax/update-income/next-year/income/1/no-change" -> getExpectedData("update-next-income-no-change"),
+    "/check-income-tax/update-income/next-year/income/1/confirm"   -> getExpectedData("update-next-income-confirm"),
+    "/check-income-tax/update-income/next-year/income/1/success"   -> getExpectedData("update-next-income-success")
+  )
+
+  override lazy val app: Application = new GuiceApplicationBuilder()
+    .overrides(
+      bind[FeatureFlagService].toInstance(mockFeatureFlagService)
+    )
+    .configure(
+      "microservice.services.auth.port"                                -> server.port(),
+      "microservice.services.cachable.session-cache.port"              -> server.port(),
+      "sca-wrapper.services.single-customer-account-wrapper-data.url"  -> s"http://localhost:${server.port()}",
+      "microservice.services.tai.port"                                 -> server.port(),
+      "microservice.services.coronavirus-jrs-published-employees.port" -> server.port()
+    )
+    .build()
+
+  val uuid = UUID.randomUUID().toString
+
+  def request(url: String): FakeRequest[AnyContentAsEmpty.type] =
+    FakeRequest(GET, url)
+      .withSession(SessionKeys.sessionId -> uuid, SessionKeys.authToken -> "Bearer 1")
+      .withHeaders("Referer" -> "")
+
+  val wrapperDataResponse = Json
+    .toJson(
+      WrapperDataResponse(
+        Seq(
+          MenuItemConfig("id", "NewLayout Item", "link", false, 0, None, None),
+          MenuItemConfig("signout", "Sign out", "link", false, 0, None, None)
+        ),
+        PtaMinMenuConfig("MenuName", "BackName")
+      )
+    )
+    .toString
+
+  val person = Person(
+    generatedNino,
+    "Firstname",
+    "Surname",
+    isDeceased = false,
+    manualCorrespondenceInd = false,
+    Address("", "", "", "", "")
+  )
+  val employments = Json.obj("data" -> Json.obj("employments" -> Seq.empty[JsValue]))
+  val taxAccountSummary = Json.obj("data" -> Json.toJson(TaxAccountSummary(0, 0, 0, 0, 0)))
+  val employer1 = Employers("Employer", "reference", List(YearAndMonth("2020-01"), YearAndMonth("2021-01")))
+  val jrsClaim = JrsClaims(List(employer1))
+
+  val taxBand = TaxBand("B", "BR", 16500, 1000, Some(0), Some(16500), 20)
+  val incomeCatergories = IncomeCategory(NonSavingsIncomeCategory, 1000, 5000, 16500, Seq(taxBand))
+  val totalTax: TotalTax = TotalTax(1000, Seq(incomeCatergories), None, None, None)
+
+  val taxCodeRecordJson =
+    """[{"taxCodeId":2,"taxCode":"1100L","basisOfOperation":"Week 1 Month 1","startDate":"2023-09-14","endDate":"2024-04-05","employerName":"Asda","payrollNumber":"NPSQAR-62","pensionIndicator":false,"primary":true}]"""
+
+  val incomeJson: JsValue = Json.obj(
+    "data" -> Json.obj(
+      "taxCodeIncomes" -> JsArray(),
+      "nonTaxCodeIncomes" -> Json.obj(
+        "otherNonTaxCodeIncomes" -> Json.arr(
+          Json.obj(
+            "incomeComponentType" -> "Profit",
+            "amount"              -> 100,
+            "description"         -> "Profit"
+          )
+        )
+      )
+    ),
+    "links" -> Json.arr()
+  )
+
+  private val oneEmployment =
+    """{
+          "data" : {
+            "name": "company name",
+            "employmentStatus" : "Live",
+            "payrollNumber": "123",
+            "startDate": "2016-05-26",
+            "endDate": "2016-05-26",
+            "annualAccounts": [],
+            "taxDistrictNumber": "123",
+            "payeNumber": "321",
+            "sequenceNumber": 2,
+            "isPrimary": true,
+            "hasPayrolledBenefit" : false,
+            "receivingOccupationalPension": false
+          }
+        }"""
+
+  val startYear = 2023
+  val numberOfYears = Random.between(2, 10)
+
+  def taxCodeRecord(year: Int) = TaxCodeRecord(
+    s"${year}X",
+    TaxYear.apply(year).start,
+    TaxYear.apply(year).end,
+    Week1Month1BasisOfOperation,
+    s"employer$year",
+    pensionIndicator = false,
+    None,
+    primary = true
+  )
+
+  lazy val taxCodeChange: TaxCodeChange = {
+    val previousYears = (startYear - numberOfYears until startYear).map(taxCodeRecord).toList
+    val currentYears = (startYear - numberOfYears to startYear).map(taxCodeRecord).toList
+    TaxCodeChange(previousYears, currentYears)
+  }
+
+  val taxCodeComparisonJson = Json.obj(
+    "data" -> Json.obj(
+      "previous" -> Json.arr(
+        Json.obj(
+          "componentType" -> Json.toJson[TaxComponentType](CarBenefit),
+          "employmentId"  -> 1,
+          "amount"        -> 1,
+          "description"   -> "Car Benefit",
+          "iabdCategory"  -> "Benefit",
+          "inputAmount"   -> 1
+        )
+      ),
+      "current" -> Json.arr(
+        Json.obj(
+          "componentType" -> Json.toJson[TaxComponentType](CarBenefit),
+          "employmentId"  -> 1,
+          "amount"        -> 1,
+          "description"   -> "Car Benefit",
+          "iabdCategory"  -> "Benefit",
+          "inputAmount"   -> 1
+        )
+      )
+    )
+  )
+
+  override def beforeEach() = {
+    super.beforeEach()
+
+    when(mockFeatureFlagService.get(CyPlusOneToggle)).thenReturn(Future.successful(FeatureFlag(CyPlusOneToggle, true)))
+    when(mockFeatureFlagService.get(IncomeTaxHistoryToggle))
+      .thenReturn(Future.successful(FeatureFlag(IncomeTaxHistoryToggle, true)))
+    when(mockFeatureFlagService.get(SCAWrapperToggle))
+      .thenReturn(Future.successful(FeatureFlag(SCAWrapperToggle, true)))
+    server.stubFor(
+      get(urlEqualTo(s"/tai/$generatedNino/person"))
+        .willReturn(ok(Json.obj("data" -> Json.toJson(person)).toString))
+    )
+
+    server.stubFor(
+      get(urlEqualTo(s"/tai/$generatedNino/tax-account/${LocalDate.now().getYear + 1}/summary"))
+        .willReturn(ok(Json.toJson(taxAccountSummary).toString))
+    )
+
+    server.stubFor(
+      get(urlEqualTo(s"/tai/$generatedNino/tax-account/tax-code-change/exists"))
+        .willReturn(ok("false"))
+    )
+
+    for (year <- LocalDate.now().getYear - 5 to LocalDate.now().getYear + 1) {
+      server.stubFor(
+        get(urlEqualTo(s"/tai/$generatedNino/employments/years/$year"))
+          .willReturn(ok(Json.toJson(employments).toString))
+      )
+      server.stubFor(
+        get(urlEqualTo(s"/tai/$generatedNino/tax-account/$year/summary"))
+          .willReturn(ok(Json.toJson(taxAccountSummary).toString))
+      )
+      server.stubFor(
+        get(urlEqualTo(s"/tai/$generatedNino/tax-account/$year/income/tax-code-incomes"))
+          .willReturn(
+            ok(taxCodeIncomesJson)
+          )
+      )
+      server.stubFor(
+        get(urlEqualTo(s"/tai/$generatedNino/tax-account/$year/total-tax"))
+          .willReturn(ok(s"""{"data": ${Json.toJson(totalTax).toString()}}"""))
+      )
+
+    }
+
+    server.stubFor(
+      get(urlEqualTo(s"/tai/$generatedNino/employments/1"))
+        .willReturn(ok(oneEmployment))
+    )
+    server.stubFor(
+      get(urlEqualTo(s"/coronavirus-jrs-published-employees/employee/$generatedNino"))
+        .willReturn(ok(Json.toJson(jrsClaim).toString()))
+    )
+
+    case class stubValuesData(journeyName: String, keyName: String, valueReturned: String)
+
+    val nameValueUrls = List(
+      stubValuesData("add-employment", "employmentName", "H M Revenue and Customs"),
+      stubValuesData("add-pension-provider", "pensionProviderName", "H M Revenue and Customs"),
+      stubValuesData("end-employment", "employmentId", "1"),
+      stubValuesData("update-employment", "employmentId", "1"),
+      stubValuesData("update-employment", "employmentDetails", "Details"),
+      stubValuesData("update-income", "updateIncomeHowToUpdate", "1"),
+      stubValuesData("update-income", "updateIncomeWorkingHours", EditIncomeIrregularPayConstants.RegularHours),
+      stubValuesData("update-income", "updateIncomePayslipDeductionsKey", "1"),
+      stubValuesData("update-income", "updateIncomeBonusPaymentsKey", "4000"),
+      stubValuesData("update-income", "updateIncomeTaxablePayKey", "4000"),
+      stubValuesData("update-income", "updateIncomeBonusOvertimeAmountKey", "4000"),
+      stubValuesData("update-income", "updateIncomeEmploymentIdKey", "1"),
+      stubValuesData("update-income", "updateIncomeConfirmedAmountKey-1", "1000"),
+      stubValuesData("update-income", "updateIncomeNewAmountKey", "1000"),
+      stubValuesData("update-previous-years-income", "incomeDetails", "Details"),
+      stubValuesData("update-previous-years-income", "updateIncomeTelephoneContactAllowed", "No"),
+      stubValuesData("update-previous-years-income", "updateIncomeTelephoneNumber", ""),
+      stubValuesData("end-company-benefit", "benefitType", "Telephone"),
+      stubValuesData("end-company-benefit", "Telephone%20decisionChoice", "No"),
+      stubValuesData("update-pension-provider", "pensionProviderId", "1"),
+      stubValuesData("update-next-years-income", "update-next-years-new-amount-1", "1")
+    )
+    nameValueUrls.foreach { stubData =>
+      server.stubFor(
+        get(urlEqualTo(s"/tai/journey-cache/${stubData.journeyName}/values/${stubData.keyName}"))
+          .willReturn(
+            ok(Json.toJson(stubData.valueReturned).toString())
+          )
+      )
+    }
+    server.stubFor(
+      post(s"/tai/journey-cache/update-employment")
+        .willReturn(ok("""{
+                         |"employmentName":"H M Revenue and Customs",
+                         |"employmentDetails":"",
+                         |"employmentId":"1",
+                         |"employmentTelephoneContactAllowed":"No",
+                         |"employmentTelephoneNumber":""}""".stripMargin))
+    )
+    server.stubFor(
+      post(s"/tai/journey-cache/update-previous-years-income")
+        .willReturn(ok(s"""{
+                          |"taxYear":"${TaxYear().prev.year}",
+                          |"employmentDetails":"",
+                          |"employmentId":"1",
+                          |"employmentTelephoneContactAllowed":"No",
+                          |"employmentTelephoneNumber":""}""".stripMargin))
+    )
+
+    server.stubFor(
+      get(s"/tai/journey-cache/update-income")
+        .willReturn(ok(s"""{
+                          |"updateIncomeEmploymentName":"H M Revenue and Customs",
+                          |"updateIncomeEmploymentIdKey":"1",
+                          |"updateIncomeConfirmedAmountKey":"1000",
+                          |"updateIncomeIncomeTypeKey":"0",
+                          |"updateIncomeConfirmedAmountKey-1":"100",
+                          |"updateIncomePayPeriodKey":"monthly",
+                          |"updateIncomeTotalSalaryKey":"1000",
+                          |"updateIncomePayslipDeductionsKey":"key",
+                          |"updateIncomeBonusPaymentsKey":"200",
+                          |"updateIncomeIrregularAnnualPayKey":"50000",
+                          |"updateIncomePayToDateKey":"60000",
+                          |"updateIncomeNewAmountKey":"5000"}""".stripMargin))
+    )
+
+    server.stubFor(
+      post(s"/tai/journey-cache/update-income")
+        .willReturn(ok(s"""{
+                          |"updateIncomeEmploymentName":"H M Revenue and Customs",
+                          |"updateIncomeEmploymentIdKey":"1",
+                          |"updateIncomeConfirmedAmountKey":"1000",
+                          |"updateIncomeIncomeTypeKey":"0",
+                          |"updateIncomeConfirmedAmountKey-1":"100",
+                          |"updateIncomePayPeriodKey":"monthly",
+                          |"updateIncomeTotalSalaryKey":"1000",
+                          |"updateIncomePayslipDeductionsKey":"key",
+                          |"updateIncomeBonusPaymentsKey":"200",
+                          |"updateIncomeIrregularAnnualPayKey":"50000",
+                          |"updateIncomePayToDateKey":"60000"}""".stripMargin))
+    )
+
+    server.stubFor(
+      get(s"/tai/journey-cache/update-pension-provider")
+        .willReturn(ok(s"""{
+                          |"pensionProviderName":"pensionProviderName",
+                          |"pensionProviderId":"1",
+                          |"receivePension":"Yes",
+                          |"telephoneContactAllowed":"No",
+                          |"telephoneNumber":"",
+                          |"pensionDetails":"pensionDetails"}""".stripMargin))
+    )
+
+    server.stubFor(
+      delete(s"/tai/journey-cache/update-income")
+        .willReturn(ok)
+    )
+
+    server.stubFor(
+      get(urlEqualTo("/tai/journey-cache/add-employment")).willReturn(
+        ok(
+          """{
+            |"employmentName":"H M Revenue and Customs",
+            |"employmentStartDate":"2022-07-10",
+            |"employmentStartDateWithinSixWeeks":"No",
+            |"employmentFirstPayReceived":"2022-08-10",
+            |"employmentPayrollNumberKnown":"No",
+            |"employmentPayrollNumber":"I do not know",
+            |"employmentTelephoneContactAllowed":"No",
+            |"employmentTelephoneNumber":""}""".stripMargin
+        )
+      )
+    )
+
+    server.stubFor(
+      get(urlEqualTo("/tai/journey-cache/add-pension-provider")).willReturn(
+        ok(
+          """{
+            |"pensionProviderName":"H M Revenue and Customs",
+            |"pensionProviderStartDate":"2022-07-10",
+            |"pensionProviderStartDateWithinSixWeeks":"No",
+            |"pensionFirstPayment":"2022-08-10",
+            |"pensionProviderPayrollChoice":"No",
+            |"pensionProviderPayrollNumber":"I do not know",
+            |"pensionProviderTelephoneContactAllowed":"No",
+            |"pensionProviderTelephoneNumber":""}""".stripMargin
+        )
+      )
+    )
+
+    server.stubFor(
+      get(urlEqualTo("/tai/journey-cache/end-employment")).willReturn(
+        ok(
+          """{
+            |"employmentName":"H M Revenue and Customs",
+            |"employmentEndDate":"2022-07-10",
+            |"employmentLatestPaymentDate":"2022-08-10",
+            |"employmentTelephoneQuestion":"No",
+            |"employmentTelephoneNumber":"",
+            |"employmentId":"1",
+            |"employmentDecision":"No"}""".stripMargin
+        )
+      )
+    )
+
+    server.stubFor(
+      get(urlEqualTo("/tai/journey-cache/add-employment")).willReturn(
+        ok(
+          """{
+            |"employmentName":"H M Revenue and Customs",
+            |"employmentStartDate":"2022-07-10",
+            |"employmentStartDateWithinSixWeeks":"No",
+            |"employmentFirstPayReceived":"2022-08-10",
+            |"employmentPayrollNumberKnown":"No",
+            |"employmentPayrollNumber":"I do not know",
+            |"employmentTelephoneContactAllowed":"No",
+            |"employmentTelephoneNumber":""}""".stripMargin
+        )
+      )
+    )
+
+    server.stubFor(
+      get(urlEqualTo("/tai/journey-cache/update-employment")).willReturn(
+        ok(
+          """{
+            |"employmentId":"1",
+            |"employmentName":"H M Revenue and Customs",
+            |"employmentDetails":"Details",
+            |"employmentTelephoneContactAllowed":"No",
+            |"employmentTelephoneNumber":""}""".stripMargin
+        )
+      )
+    )
+
+    server.stubFor(
+      get(urlEqualTo("/tai/journey-cache/successful-journey")).willReturn(
+        ok(
+          """{
+            |"update-next-years-successful":"Yes",
+            |"employmentStartDate":"2022-07-10",
+            |"employmentStartDateWithinSixWeeks":"No",
+            |"employmentFirstPayReceived":"2022-08-10",
+            |"employmentPayrollNumberKnown":"No",
+            |"employmentPayrollNumber":"I do not know",
+            |"employmentTelephoneContactAllowed":"No",
+            |"employmentTelephoneNumber":""}""".stripMargin
+        )
+      )
+    )
+
+    server.stubFor(
+      get(s"/tai/journey-cache/update-previous-years-income")
+        .willReturn(ok(s"""{
+                          |"taxYear":"${LocalDate.now().getYear}",
+                          |"incomeDetails":"details",
+                          |"updateIncomeTelephoneContactAllowed":"No",
+                          |"updateIncomeTelephoneNumber":""}""".stripMargin))
+    )
+
+    server.stubFor(
+      get(s"/tai/journey-cache/end-company-benefit")
+        .willReturn(ok(s"""{
+                          |"employmentId":"1",
+                          |"employmentName":"employmentName",
+                          |"benefitType":"Telephone",
+                          |"stopDate":"${LocalDate.now()}",
+                          |"benefitValue":"1000",
+                          |"telephoneContactAllowed":"No",
+                          |"telephoneNumber":"",
+                          |"benefitName":"benefitName",
+                          |"referer":"referer"}""".stripMargin))
+    )
+
+    server.stubFor(
+      post(s"/tai/journey-cache/end-company-benefit")
+        .willReturn(ok(s"""{
+                          |"employmentId":"1",
+                          |"employmentName":"employmentName",
+                          |"benefitType":"Telephone",
+                          |"stopDate":"${LocalDate.now()}",
+                          |"benefitValue":"1000",
+                          |"telephoneContactAllowed":"No",
+                          |"telephoneNumber":"",
+                          |"benefitName":"benefitName",
+                          |"referer":"referer"}""".stripMargin))
+    )
+
+    server.stubFor(
+      get(s"/tai/journey-cache/update-next-years-income")
+        .willReturn(ok(s"""{
+                          |"update-next-years-employment-id":"1",
+                          |"update-next-years-employment-name":"employmentName",
+                          |"update-next-years-pension-indicator":"No",
+                          |"update-next-years-current-amount":"1000",
+                          |"update-next-years-new-amount":"1000",
+                          |"update-next-years-successful":"Yes"}""".stripMargin))
+    )
+
+    server.stubFor(
+      get(urlEqualTo(s"/tai/$generatedNino/tax-account/${LocalDate.now().getYear}/tax-code/latest"))
+        .willReturn(ok(s"""{"data":$taxCodeRecordJson}"""))
+    )
+
+    server.stubFor(
+      get(urlEqualTo(s"/tai/$generatedNino/tax-account/${LocalDate.now().getYear}/income"))
+        .willReturn(ok(incomeJson.toString))
+    )
+
+    server.stubFor(
+      post(urlEqualTo("/tai/calculator/calculate-estimated-pay"))
+        .willReturn(ok(Json.toJson(CalculatedPay(None, None)).toString()))
+    )
+
+    server.stubFor(
+      put(
+        s"/tai/$generatedNino/tax-account/snapshots/${LocalDate.now().getYear}/incomes/tax-code-incomes/1/estimated-pay"
+      )
+        .withHeader(CONTENT_TYPE, matching(ContentTypes.JSON))
+        .willReturn(
+          ok
+        )
+    )
+
+    server.stubFor(
+      get(s"/tai/$generatedNino/employments/year/${LocalDate.now().getYear}/status/ceased")
+        .willReturn(ok("""{"data": []}"""))
+    )
+    server.stubFor(
+      get(s"/tai/$generatedNino/tax-account/year/${LocalDate.now().getYear}/income/EmploymentIncome/status/Live")
+        .willReturn(ok("""{"data": []}"""))
+    )
+    server.stubFor(
+      get(s"/tai/$generatedNino/tax-account/year/${LocalDate.now().getYear}/income/EmploymentIncome/status/NotLive")
+        .willReturn(ok("""{"data": []}"""))
+    )
+    server.stubFor(
+      get(s"/tai/$generatedNino/tax-account/year/${LocalDate.now().getYear}/income/PensionIncome/status/Live")
+        .willReturn(ok("""{"data": []}"""))
+    )
+    server.stubFor(
+      get(s"/tai/$generatedNino/tax-account/tax-code-change")
+        .willReturn(ok(taxCodeChangeJson(taxCodeChange)))
+    )
+    server.stubFor(
+      get(s"/tai/$generatedNino/tax-account/tax-free-amount-comparison")
+        .willReturn(ok(taxCodeComparisonJson.toString()))
+    )
+  }
+
+  "/check-income-tax/" must {
+    urls.foreach { case (url, expectedData: ExpectedData) =>
+      s"pass content checks at url $url" in {
+
+        server.stubFor(
+          WireMock
+            .get(urlMatching("/single-customer-account-wrapper-data/message-data.*"))
+            .willReturn(ok(s"""{"count": 0}"""))
+        )
+
+        server.stubFor(
+          WireMock
+            .get(urlMatching("/single-customer-account-wrapper-data/wrapper-data.*"))
+            .willReturn(ok(wrapperDataResponse))
+        )
+
+        val result: Future[Result] = route(app, request(url)).get
+        val content = Jsoup.parse(contentAsString(result))
+
+        status(result) mustBe expectedData.httpStatus
+
+        content.title() mustBe expectedData.title
+
+        val govUkBanner = content.getElementsByClass("govuk-phase-banner")
+        govUkBanner.size() mustBe 1
+        govUkBanner.get(0).getElementsByClass("govuk-link").get(0).attr("href") must include(
+          "http://localhost:9250/contact/beta-feedback?service=TES"
+        )
+
+        val accessibilityStatement = content
+          .getElementsByClass("govuk-footer__link")
+          .asScala
+          .toList
+          .map(_.attr("href"))
+          .filter(_.contains("accessibility-statement"))
+          .head
+        accessibilityStatement must include(
+          "http://localhost:12346/accessibility-statement/check-income-tax?referrerUrl=http%3A%2F%2Flocalhost%3A12346%2Fcheck-income-tax"
+        )
+
+        if (expectedData.navBarExpected) {
+          val signoutLink = content
+            .getElementsByClass("hmrc-account-menu__link")
+            .asScala
+            .toList
+            .find(_.html().contains("Sign out"))
+            .get
+            .attr("href")
+          signoutLink mustBe "/check-income-tax/signout"
+        } else {
+          content
+            .getElementsByClass("hmrc-account-menu__link")
+            .asScala
+            .toList
+            .find(_.html().contains("Sign out")) mustBe None
+        }
+
+        val languageToggle = content.getElementsByClass("hmrc-language-select__list")
+        languageToggle.text() must include("English")
+        languageToggle.text() must include("Cymraeg")
+
+        val reportIssueText = content.getElementsByClass("hmrc-report-technical-issue").get(0).text()
+        val reportIssueLink = content.getElementsByClass("hmrc-report-technical-issue").get(0).attr("href")
+        reportIssueText must include("Is this page not working properly? (opens in new tab)")
+        reportIssueLink must include("/contact/report-technical-problem")
+
+        val serviceName = content.getElementsByClass("hmrc-header__service-name").get(0).text()
+        serviceName mustBe expectedData.headerTitle
+      }
+    }
+  }
+}
Index: app/uk/gov/hmrc/tai/config/Filters.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/uk/gov/hmrc/tai/config/Filters.scala b/app/uk/gov/hmrc/tai/config/Filters.scala
new file mode 100644
--- /dev/null	(date 1696950747570)
+++ b/app/uk/gov/hmrc/tai/config/Filters.scala	(date 1696950747570)
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2023 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package uk.gov.hmrc.tai.config
+
+import akka.stream.Materializer
+import play.api.http.{EnabledFilters, HttpFilters}
+import play.api.mvc.{EssentialFilter, RequestHeader, Result}
+import uk.gov.hmrc.mongoFeatureToggles.services.FeatureFlagService
+import uk.gov.hmrc.sca.connectors.ScaWrapperDataConnector
+import uk.gov.hmrc.sca.filters.WrapperDataFilter
+import uk.gov.hmrc.tai.model.admin.SCAWrapperToggle
+
+import javax.inject.{Inject, Singleton}
+import scala.concurrent.{ExecutionContext, Future}
+
+class SCAWrapperDataFilter @Inject() (
+  scaWrapperDataConnector: ScaWrapperDataConnector,
+  featureFlagService: FeatureFlagService
+)(implicit val ec: ExecutionContext, override val mat: Materializer)
+    extends WrapperDataFilter(scaWrapperDataConnector)(ec, mat) {
+
+  override def apply(f: RequestHeader => Future[Result])(rh: RequestHeader): Future[Result] =
+    featureFlagService.get(SCAWrapperToggle).flatMap { toggle =>
+      if (toggle.isEnabled) {
+        super.apply(f)(rh)
+      } else {
+        f(rh)
+      }
+    }
+}
+
+@Singleton
+class Filters @Inject() (
+  defaultFilters: EnabledFilters,
+  wrapperDataFilter: SCAWrapperDataFilter
+) extends HttpFilters {
+
+  override val filters: Seq[EssentialFilter] =
+    defaultFilters.filters ++ Some(wrapperDataFilter)
+}
Index: app/uk/gov/hmrc/tai/connectors/HttpHandler.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala b/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala
--- a/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala	
+++ b/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala	(date 1696951125122)
@@ -21,7 +21,7 @@
 import play.api.http.Status._
 import play.api.libs.json.JsValue
 import play.api.libs.ws.BodyWritable
-import uk.gov.hmrc.http._
+import uk.gov.hmrc.http.{BadRequestException, _}
 import uk.gov.hmrc.http.client.HttpClientV2
 
 import javax.inject.Inject
@@ -61,7 +61,14 @@
           case UNAUTHORIZED => response
           case _ =>
             handleResponseEither(http, url)(response).fold(
-              errorResponse => throw errorResponse,
+              error =>
+                if (error.statusCode == BAD_REQUEST) {
+                  throw new BadRequestException("bad request")
+                } else if (error.statusCode == NOT_FOUND) {
+                  throw new NotFoundException("not found")
+                } else {
+                  throw error
+                },
               httpResponse => httpResponse
             )
         }
Index: app/views/includes/HeadBlock.scala.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/views/includes/HeadBlock.scala.html b/app/views/includes/HeadBlock.scala.html
new file mode 100644
--- /dev/null	(date 1696950747593)
+++ b/app/views/includes/HeadBlock.scala.html	(date 1696950747593)
@@ -0,0 +1,23 @@
+@*
+ * Copyright 2023 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *@
+
+@import views.html.helper.CSPNonce
+
+@this()
+@()(implicit request: Request[_])
+
+    <meta name="format-detection" content="telephone=no"/>
+    <link @CSPNonce.attr rel="stylesheet" href='@controllers.routes.AssetsController.versioned("stylesheets/tai.css")'/>
Index: app/views/includes/AdditionalJavascript.scala.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/views/includes/AdditionalJavascript.scala.html b/app/views/includes/AdditionalJavascript.scala.html
new file mode 100644
--- /dev/null	(date 1696950747593)
+++ b/app/views/includes/AdditionalJavascript.scala.html	(date 1696950747593)
@@ -0,0 +1,40 @@
+@*
+ * Copyright 2023 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *@
+
+@import views.html.helper.CSPNonce
+@import uk.gov.hmrc.webchat.client.WebChatClient
+@import uk.gov.hmrc.tai.config.ApplicationConfig
+
+@this(appConfig: ApplicationConfig,
+webChatClient: WebChatClient)
+@()(implicit request: Request[_])
+
+    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned(file = "javascripts/newcard.js")'></script>
+    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned(file = "javascripts/backlink.js")'></script>
+    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned("javascripts/print.js")'></script>
+    <script @CSPNonce.attr type="text/javascript">
+                window.onload = function() {
+                    var htmlElem = document.querySelector('html')
+                    var techIssueLink =  document.querySelector('a.hmrc-report-technical-issue');
+                    var lang = techIssueLink.getAttribute('lang')
+                    htmlElem.setAttribute("lang", lang);
+                }
+        </script>
+    @if(appConfig.webChatIsEnabled) {
+        @{webChatClient.loadRequiredElements()}
+        @{webChatClient.loadWebChatContainer("HMRC_Anchored_1")}
+    }
+
Index: app/views/MainTemplate.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/views/MainTemplate.scala b/app/views/MainTemplate.scala
new file mode 100644
--- /dev/null	(date 1696950747575)
+++ b/app/views/MainTemplate.scala	(date 1696950747575)
@@ -0,0 +1,125 @@
+/*
+ * Copyright 2023 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package views.html
+
+import com.google.inject.{ImplementedBy, Inject}
+import uk.gov.hmrc.tai.config.ApplicationConfig
+import play.api.Logging
+import play.api.data.Form
+import play.api.i18n.Messages
+import play.api.mvc.Request
+import play.twirl.api.{Html, HtmlFormat}
+import uk.gov.hmrc.mongoFeatureToggles.services.FeatureFlagService
+import uk.gov.hmrc.play.http.HeaderCarrierConverter
+import uk.gov.hmrc.sca.models.BannerConfig
+import uk.gov.hmrc.sca.services.WrapperService
+import uk.gov.hmrc.tai.model.admin.SCAWrapperToggle
+
+import scala.concurrent.Await
+import scala.concurrent.duration.{Duration, SECONDS}
+import views.html.oldMainTemplate
+import views.html.includes.{AdditionalJavascript, HeadBlock}
+
+@ImplementedBy(classOf[MainTemplateImpl])
+trait MainTemplate {
+  def apply(
+    title: String,
+    authedUser: Option[controllers.auth.AuthedUser] = None,
+    pageTitle: Option[String] = None,
+    backLinkUrl: Option[String] = Some("#"),
+    backLinkContent: Option[String],
+    backLinkId: String = "back-link",
+    disableSessionExpired: Boolean = false,
+    pagePrintable: Boolean = false,
+    pagePrintName: Option[String] = None,
+    showPtaAccountNav: Boolean = true,
+    formForErrorSummary: Option[Form[_]] = None
+  )(content: Html)(implicit request: Request[_], messages: Messages): HtmlFormat.Appendable
+}
+
+class MainTemplateImpl @Inject() (
+  appConfig: ApplicationConfig,
+  featureFlagService: FeatureFlagService,
+  wrapperService: WrapperService,
+  oldLayout: oldMainTemplate,
+  scripts: AdditionalJavascript,
+  headBlock: HeadBlock
+) extends MainTemplate with Logging {
+  override def apply(
+    title: String,
+    authedUser: Option[controllers.auth.AuthedUser] = None,
+    pageTitle: Option[String] = None,
+    backLinkUrl: Option[String] = Some("#"),
+    backLinkContent: Option[String],
+    backLinkId: String = "back-link",
+    disableSessionExpired: Boolean = false,
+    pagePrintable: Boolean = false,
+    pagePrintName: Option[String] = None,
+    showPtaAccountNav: Boolean = true,
+    formForErrorSummary: Option[Form[_]] = None
+  )(content: Html)(implicit request: Request[_], messages: Messages): HtmlFormat.Appendable = {
+    val scaWrapperToggle =
+      Await.result(featureFlagService.get(SCAWrapperToggle), Duration(appConfig.SCAWrapperFutureTimeout, SECONDS))
+
+    val prefix =
+      if (formForErrorSummary.exists(_.errors.nonEmpty)) {
+        s"${Messages("tai.page.title.error")} "
+      } else {
+        ""
+      }
+    val fullPageTitle = s"$prefix$title - ${Messages("tai.currentYearSummary.heading")} - GOV.UK"
+
+    if (scaWrapperToggle.isEnabled) {
+      logger.debug(s"SCA Wrapper layout used for request `${request.uri}``")
+      wrapperService.layout(
+        content = content,
+        pageTitle = Some(fullPageTitle),
+        serviceNameKey = Some(messages(pageTitle.getOrElse("tai.service.navTitle"))),
+        serviceNameUrl = Some(appConfig.taiHomePageUrl),
+//      sidebarContent: Option[Html] = None,
+        signoutUrl = controllers.routes.ServiceController.serviceSignout().url,
+        timeOutUrl = Some(controllers.routes.ServiceController.sessionExpiredPage().url),
+        keepAliveUrl = controllers.routes.ServiceController.keepAlive().url,
+        showBackLinkJS = backLinkContent.isDefined && backLinkUrl.contains("#"),
+        backLinkUrl = if (backLinkContent.isDefined) backLinkUrl else None,
+        // showSignOutInHeader: Boolean = false,
+        styleSheets = Seq(headBlock()),
+        scripts = Seq(scripts()),
+        bannerConfig = BannerConfig(false, true, false),
+        optTrustedHelper = authedUser.flatMap(_.trustedHelper),
+        fullWidth = true,
+        hideMenuBar = !showPtaAccountNav,
+        disableSessionExpired = disableSessionExpired
+      )(messages, HeaderCarrierConverter.fromRequest(request), request)
+    } else {
+      logger.debug(s"Old layout used for request `${request.uri}``")
+      oldLayout(
+        title,
+        authedUser,
+        pageTitle,
+        backLinkUrl,
+        backLinkContent,
+        backLinkId,
+        disableSessionExpired,
+        pagePrintable,
+        pagePrintName,
+        showPtaAccountNav,
+        formForErrorSummary
+      )(content)(request, messages)
+    }
+  }
+}
Index: app/views/oldMainTemplate.scala.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/views/oldMainTemplate.scala.html b/app/views/oldMainTemplate.scala.html
new file mode 100644
--- /dev/null	(date 1696950747621)
+++ b/app/views/oldMainTemplate.scala.html	(date 1696950747621)
@@ -0,0 +1,294 @@
+@*
+ * Copyright 2023 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *@
+
+@import help.Link
+@import uk.gov.hmrc.govukfrontend.views.html.components.{FixedWidthPageLayout, GovukBackLink, GovukLayout, TwoThirdsMainContent, TwoThirdsOneThirdMainContent, _}
+@import uk.gov.hmrc.govukfrontend.views.viewmodels.backlink.BackLink
+@import uk.gov.hmrc.govukfrontend.views.viewmodels.content.Text
+@import uk.gov.hmrc.govukfrontend.views.viewmodels.phasebanner.PhaseBanner
+@import uk.gov.hmrc.hmrcfrontend.config.AccountMenuConfig
+@import uk.gov.hmrc.hmrcfrontend.controllers.routes.LanguageController.switchToLanguage
+@import uk.gov.hmrc.hmrcfrontend.views.Aliases.Header
+@import uk.gov.hmrc.hmrcfrontend.views.html.components.implicits.RichAccountMenu
+@import uk.gov.hmrc.hmrcfrontend.views.html.helpers._
+@import uk.gov.hmrc.hmrcfrontend.views.viewmodels.accountmenu.BusinessTaxAccount
+@import uk.gov.hmrc.tai.config.ApplicationConfig
+@import uk.gov.hmrc.tai.util.constants.TaiConstants
+@import uk.gov.hmrc.webchat.client.WebChatClient
+@import views.html.helper.CSPNonce
+@import views.html.includes.attorneyBanner
+@import uk.gov.hmrc.ptafrontend.views.html._
+
+@this(
+        govukTemplate: GovukTemplate,
+        govukLayout: GovukLayout,
+        govukFooter: GovukFooter,
+        hmrcAccountMenu: HmrcAccountMenu,
+        hmrcHeader: HmrcHeader,
+        hmrcStandardHeader: HmrcStandardHeader,
+        hmrcStandardFooter: HmrcStandardFooter,
+        hmrcHead: HmrcHead,
+        hmrcLanguageSelectHelper: HmrcLanguageSelectHelper,
+        hmrcScripts: HmrcScripts,
+        govukBackLink: GovukBackLink,
+        defaultMainContent: TwoThirdsMainContent,
+        fixedWidthPageLayout: FixedWidthPageLayout,
+        twoThirdsMainContent: TwoThirdsMainContent,
+        twoThirdsOneThirdMainContent: TwoThirdsOneThirdMainContent,
+        hmrcTimeoutDialogHelper: HmrcTimeoutDialogHelper,
+        govukPhaseBanner: GovukPhaseBanner,
+        link: Link,
+        appConfig: ApplicationConfig,
+        hmrcReportTechnicalIssueHelper: HmrcReportTechnicalIssueHelper,
+        hmrcReportTechnicalIssue: HmrcReportTechnicalIssue,
+        banner: attorneyBanner,
+        webChatClient: WebChatClient,
+        ptaHead: PtaHead,
+        ptaScripts: PtaScripts
+)(implicit accountMenuConfig: AccountMenuConfig)
+
+
+@(
+        title: String,
+        authedUser: Option[controllers.auth.AuthedUser] = None,
+        pageTitle: Option[String] = None,
+        backLinkUrl: Option[String] = Some("#"),
+        backLinkContent: Option[String],
+        backLinkId: String = "back-link",
+        disableSessionExpired: Boolean = false,
+        pagePrintable: Boolean = false,
+        pagePrintName: Option[String] = None,
+        showPtaAccountNav: Boolean = true,
+        formForErrorSummary: Option[Form[_]] = None
+)(content: Html)(implicit request: Request[_],
+        messages: Messages)
+
+
+@isUserResearchBannerHidden = @{request.cookies.exists((x: Cookie) => x.name == "mdtpurr")}
+
+@isGG = @{
+    authedUser.fold(false) {
+        _.providerType.contains(TaiConstants.AuthProviderGG)
+    }
+}
+
+@isSa = @{
+    authedUser.fold(false) {
+        _.utr.isDefined
+    }
+}
+
+@attorneyBanner = @{
+    for {
+        auth <- authedUser
+        helper <- auth.trustedHelper
+    } yield banner(helper)
+}
+
+@unreadMessageCount = @{
+    authedUser match {
+        case Some(x) => x.messageCount
+        case None => None
+    }
+}
+
+
+@additionalHeadBlock = {
+    <meta name="format-detection" content="telephone=no"/>
+    <link rel="stylesheet" href='@controllers.routes.Assets.versioned("stylesheets/tai.css")'/>
+    @ptaHead()
+    @if(!disableSessionExpired) {
+        @hmrcTimeoutDialogHelper(
+            signOutUrl = routes.ServiceController.sessionExpiredPage().url,
+            keepAliveUrl = Some("/keep-alive")
+        )
+    }
+    <link @CSPNonce.attr rel="stylesheet" href='@controllers.routes.Assets.versioned("stylesheets/tai.css")'/>
+@if(!disableSessionExpired) {
+    @hmrcTimeoutDialogHelper(
+        signOutUrl = routes.ServiceController.sessionExpiredPage().url,
+        keepAliveUrl = Some("/keep-alive")
+    )
+}
+}
+
+@urBanner = {
+    <div class="hmrc-user-research-banner" data-module="hmrc-user-research-banner">
+        <div class="hmrc-user-research-banner__container govuk-width-container">
+            <div class="hmrc-user-research-banner__text">
+                <div class="hmrc-user-research-banner__title govuk-!-font-weight-bold">
+                    @{Messages("tai.urbanner.title")}
+                </div>
+                    <a class="govuk-link hmrc-user-research-banner__link" rel="noopener noreferrer" href="@appConfig.urBannerLink" target="_blank">
+                            @{Messages("tai.urbanner.text")}
+                    </a>
+            </div>
+            <button class="govuk-link hmrc-user-research-banner__close">
+            @messages("tai.urbanner.reject")
+            </button>
+        </div>
+    </div>
+}
+
+@headerBlock = {
+    @hmrcHeader(Header(
+        homepageUrl = "http://www.gov.uk",
+        serviceName = pageTitle,
+        serviceUrl = "",
+        language = En,
+        assetsPath = uk.gov.hmrc.hmrcfrontend.controllers.routes.Assets.at("govuk/images").url,
+        displayHmrcBanner = false,
+        inputLanguageToggle = Some(LanguageToggle((En, switchToLanguage(En.code).url), (Cy, switchToLanguage(Cy.code).url)))
+    ))
+
+    @if(!isUserResearchBannerHidden && appConfig.urBannerEnabled) {
+        @urBanner
+    }
+}
+
+
+@beforeContent = {
+    @authedUser.map { auth =>
+        @if(showPtaAccountNav) {
+            @if(isGG && isSa && !auth.trustedHelper.isDefined) {
+                @hmrcAccountMenu(AccountMenu(
+                    businessTaxAccount = Some(BusinessTaxAccount()),
+                    language = if(messages.lang.code == "cy") Cy else En,
+                    signOut = SignOut(href = routes.ServiceController.serviceSignout().url),
+                    messages = AccountMessages(messageCount = unreadMessageCount)
+                ).withUrlsFromConfig())
+            } else {
+                @hmrcAccountMenu(AccountMenu(
+                    language = if(messages.lang.code == "cy") Cy else En,
+                    signOut = SignOut(href = routes.ServiceController.serviceSignout().url),
+                    messages = AccountMessages(messageCount = unreadMessageCount)
+                ).withUrlsFromConfig())
+            }
+        }
+
+    }
+
+    @attorneyBanner
+
+@if(backLinkContent){
+    @backLinkUrl.map(url =>
+        govukBackLink(
+            BackLink(classes = "js-visible-back",
+            attributes = Map("id" -> backLinkId),
+            href = url,
+            content = Text(backLinkContent.get)))
+        )
+    }
+}
+
+
+
+@contentBlock = {
+    @content
+    <div class="govuk-grid-row govuk-!-margin-top-9">
+        <div class="govuk-grid-column-one-half govuk-!-margin-bottom-5">
+        @hmrcReportTechnicalIssueHelper()
+        </div>
+    </div>
+
+
+    @govukPhaseBanner(PhaseBanner(
+        tag = Some(Tag(
+            content = Text("beta")
+        )),
+        content = HtmlContent(messages("betaBanner.message",
+            link(link = appConfig.betaFeedbackUnauthenticatedUrl,
+                messageKey = "betaBanner.linkText",
+                inParagraph = true)))
+    ))
+}
+
+
+@fullPageTitle = @{
+    val prefix =
+        if(formForErrorSummary.exists(_.errors.nonEmpty)) {
+            s"${Messages("tai.page.title.error")} "
+        } else {
+            ""
+        }
+    s"$prefix$title - ${Messages("tai.currentYearSummary.heading")} - GOV.UK"
+}
+
+
+@accessibilityStatementUrl = @{
+    (appConfig.accessibilityStatementUrl(request.uri))
+}
+
+
+@mainContentDefault = {
+    <div class="govuk-grid-row">
+        <div class="govuk-grid-column-full-width govuk-!-margin-left-3 govuk-!-margin-right-3">
+        @contentBlock
+        </div>
+    </div>
+}
+
+
+@footerBlock = @{
+    Some(hmrcStandardFooter(accessibilityStatementUrl = Some(accessibilityStatementUrl.toString())))
+}
+
+@footerDefault = {
+@footerBlock.getOrElse("")
+}
+
+
+@addPrintableClass = @{
+    if(pagePrintable) {
+        "printable-page " + pagePrintName.getOrElse("")
+    } else ""
+}
+
+@additionalScriptsBlock = {
+    @ptaScripts()
+    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned("javascripts/newcard.js")'></script>
+    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned("javascripts/backlink.js")'></script>
+    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned("javascripts/print.js")'></script>
+
+
+    <script @CSPNonce.attr type="text/javascript">
+            window.onload = function() {
+                var htmlElem = document.querySelector('html')
+                var techIssueLink =  document.querySelector('a.hmrc-report-technical-issue');
+                var lang = techIssueLink.getAttribute('lang')
+                htmlElem.setAttribute("lang", lang);
+            }
+    </script>
+    @if(appConfig.webChatIsEnabled) {
+      @{webChatClient.loadRequiredElements()}
+      @{webChatClient.loadWebChatContainer("HMRC_Anchored_1")}
+    }
+}
+
+
+@govukTemplate(
+    htmlLang = Some("en"),
+    pageTitle = Some(fullPageTitle),
+    headBlock = Some(hmrcHead(headBlock = Some(additionalHeadBlock))),
+    headerBlock = headerBlock,
+    beforeContentBlock = Some(beforeContent),
+    mainClasses = Some("govuk-main-wrapper--auto-spacing"),
+    bodyClasses = Some(addPrintableClass),
+    bodyEndBlock = Some(hmrcScripts(scriptsBlock = Some(additionalScriptsBlock))),
+    footerBlock = footerDefault
+)(mainContentDefault)
+
+
Index: app/assets/javascripts/print.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/assets/javascripts/print.js b/app/assets/javascripts/print.js
new file mode 100644
--- /dev/null	(date 1696950747565)
+++ b/app/assets/javascripts/print.js	(date 1696950747565)
@@ -0,0 +1,10 @@
+const printlink = document.getElementById('printLink');
+
+if(printlink != null && printlink != 'undefined' ) {
+
+    printlink.addEventListener("click", function (e) {
+        e.preventDefault();
+        window.print();
+    });
+};
+
Index: app/assets/javascripts/tai-backlink.js
===================================================================
diff --git a/app/assets/javascripts/tai-backlink.js b/app/assets/javascripts/tai-backlink.js
deleted file mode 100644
--- a/app/assets/javascripts/tai-backlink.js	
+++ /dev/null	
@@ -1,14 +0,0 @@
-/* Back link configuration */
-// store referrer value to cater for IE - https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10474810/  */
-var docReferrer = document.referrer
-if (window.history && window.history.replaceState && typeof window.history.replaceState === 'function') {
-    window.history.replaceState(null, null, window.location.href);
-}
-var backLinkElem = document.getElementById("backLink");
-if (backLinkElem !=  null){
-    if (window.history && window.history.back && typeof window.history.back === 'function') {
-        var backScript = (docReferrer === "" || docReferrer.indexOf(window.location.host) !== -1) ? "javascript:window.history.back(); return false;" : "javascript:void(0);"
-        backLinkElem.setAttribute("onclick",backScript);
-        backLinkElem.setAttribute("href","javascript:void(0);");
-    }
-}
\ No newline at end of file
Index: app/assets/stylesheets/modules/_printSCA.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/assets/stylesheets/modules/_printSCA.scss b/app/assets/stylesheets/modules/_printSCA.scss
new file mode 100644
--- /dev/null	(date 1696950747566)
+++ b/app/assets/stylesheets/modules/_printSCA.scss	(date 1696950747566)
@@ -0,0 +1,235 @@
+.print-table__header--highlight {
+    border-bottom: 2px solid #005EA5;
+}
+.print-table__header--secondary {
+    color: #6f777b;
+}
+
+.print-table__link{
+    padding: 5px 0px 5px 0px;
+    font-size: 16px;
+}
+
+.print-table {
+    text-align: left;
+}
+
+.print-table th {
+    width: 30%;
+    padding-bottom: 6px;
+}
+
+#print-date-column th{
+    width: 20%;
+    padding-bottom: 6px;
+}
+
+.print-table {
+  border-collapse: collapse;
+}
+
+tr.print-pension-contributions-data td {
+  border-bottom-style: solid;
+  border-bottom-width: 1px;
+  border-bottom-color: #bfc1c3;
+  padding-top: 5px;
+  padding-bottom: 5px;
+}
+
+.print-table__row--bold td, th{
+  font-weight: bold;
+  border-bottom-style: solid;
+  border-bottom-width: 1px;
+  border-bottom-color: #bfc1c3;
+  padding-top: 5px;
+  padding-bottom: 5px;
+}
+
+#print-date-column {
+  width: 18%;
+}
+
+#print-taxable-income-column {
+  width: 23%;
+}
+
+#print-income-tax-paid-column {
+  width: 22%;
+}
+
+.print-text--right {
+  text-align: right;
+}
+
+@-ms-viewport {
+  width: device-width;
+}
+@-o-viewport {
+  width: device-width;
+}
+@-ms-viewport {
+  width: device-width;
+}
+@-o-viewport {
+  width: device-width;
+}
+@-ms-viewport {
+  width: device-width;
+}
+@-o-viewport {
+  width: device-width;
+}
+.print-grid-row:after {
+  content: "";
+  display: block;
+  clear: both;
+}
+.print-grid-row {
+  margin: 0 -15px;
+}
+
+#print-icon-important-multi {
+    float: left;
+    padding-bottom: 12%;
+    padding-right: 2%;
+}
+
+@media print {
+  @page {
+    size: portrait;
+    margin: 0mm;
+    padding: 1cm .5cm;
+  }
+  html {
+    margin: 0px;
+  }
+  main.govuk-main-wrapper div.grid.grid-1-3 .inner-block , .hide-for-print{
+    display: none;
+    visibility: hidden;
+  }
+
+  main.govuk-main-wrapper .print-banner {
+    display: block;
+    visibility: visible;
+    border-bottom: 3px solid #b1b4b6;
+    margin-bottom: 30px;
+    padding-bottom: 10px;
+   }
+
+  main.govuk-main-wrapper .print-banner .title {
+    float: right;
+    text-align: right;
+  }
+
+  main.govuk-main-wrapper .print-banner img {
+    width: 180px;
+    aspect-ratio: auto 180 / 48;
+    height: 48px;
+  }
+
+  main.govuk-main-wrapper .print-banner .hmrc-logo {
+    float:left;
+    margin-top:10px;
+  }
+
+  main.govuk-main-wrapper .print-banner .name{
+    text-align: right;
+    padding-top: 18px;
+  }
+
+
+  main.govuk-main-wrapper h1.heading-xlarge {
+    font-size: 2em;
+  }
+
+  main.govuk-main-wrapper h3.heading-large {
+    font-size: 1.5em;
+  }
+
+  main.govuk-main-wrapper .hmrc-user-research-banner,
+  main.govuk-main-wrapper .cbanner-govuk-cookie-banner,
+  main.govuk-main-wrapper a[href],
+  main.govuk-main-wrapper .hide-for-print,
+  main.govuk-main-wrapper .beta-banner,
+  main.govuk-main-wrapper header[role=banner],
+  main.govuk-main-wrapper .report-error,
+  main.govuk-main-wrapper.historic-pay-as-you-earn .govuk-phase-banner,
+  main.govuk-main-wrapper.historic-pay-as-you-earn .govuk-footer,
+  main.govuk-main-wrapper .govuk-phase-banner,
+  main.govuk-main-wrapper .govuk-footer,
+  main.govuk-main-wrapper .service-info,
+  main.govuk-main-wrapper .govuk-back-link {
+    display: none;
+    visibility: hidden;
+  }
+  header, nav, .govuk-back-link, footer, #attorneyBanner {
+        display: none;
+        visibility: hidden;
+   }
+
+  div.govuk-main-wrapper .display-tax-code-for-print {
+      display: inline!important;
+      visibility: visible!important;
+      text-decoration: none;
+      color: black;
+  }
+
+  main.govuk-main-wrapper a[href]:after {
+    content: none!important;
+  }
+
+  main.govuk-main-wrapper  div.govuk-grid-column-two-thirds {
+    width: 95%!important;
+    margin: 30px!important;
+  }
+
+
+  main.govuk-main-wrapper.future-pay-as-you-earn-summary .table__row--top-border,
+  main.govuk-main-wrapper.future-pay-as-you-earn-summary .table__footer--highlight,
+  main.govuk-main-wrapper.future-pay-as-you-earn-summary .highlight {
+  background-color:#fff
+  }
+ main.govuk-main-wrapper .only-visible-on-print {
+    display: inline-block;
+    visibility: visible;
+ }
+
+
+   main.govuk-main-wrapper div.card-body  {
+     background-color:#fff!important;
+   }
+
+   main.govuk-main-wrapper h3.card-heading a {
+     display: block!important;
+     visibility: visible!important;
+   }
+
+   main.govuk-main-wrapper #taxCodesLink {
+   display:inline!important;
+   visibility:visible!important;
+   color:black;
+   text-decoration:none;
+   }
+
+  main.govuk-main-wrapper #taxOnEmploymentIncomeDesc > #taxFreeAmountLink {
+  display:inline!important;
+  visibility:visible!important;
+  color:black;
+  text-decoration:none;
+  }
+
+  main.govuk-main-wrapper #estimatedIncomeLowDesc > #taxFreeAmountLink {
+  display:inline!important;
+  visibility:visible!important;
+  color:black;
+  text-decoration:none;
+  }
+
+  main.govuk-main-wrapper thead {display: table-row-group;}
+
+  main.govuk-main-wrapper details.govuk-details.only-visible-on-print > summary {
+    color: #000;
+  }
+
+
+}
\ No newline at end of file
Index: test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala b/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala
--- a/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala	
+++ b/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala	(date 1696951125169)
@@ -78,7 +78,7 @@
       )
 
       val responseFuture = httpHandler.getFromApiV2(testUrl).failed.futureValue
-      responseFuture mustBe a[UpstreamErrorResponse]
+      responseFuture mustBe a[NotFoundException]
 
     }
 
@@ -101,7 +101,7 @@
       )
 
       val responseFuture = httpHandler.getFromApiV2(testUrl).failed.futureValue
-      responseFuture mustBe a[UpstreamErrorResponse]
+      responseFuture mustBe a[BadRequestException]
 
     }
 
Index: test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala
--- a/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala	
+++ b/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala	(date 1696950747658)
@@ -18,19 +18,18 @@
 
 import org.mockito.ArgumentMatchers.{any, eq => meq}
 import org.mockito.Mockito
-import org.scalatest.BeforeAndAfterEach
 import uk.gov.hmrc.http.HttpResponse
 import utils.BaseSpec
 
 import scala.concurrent.duration._
 import scala.concurrent.{Await, Future}
 
-class SessionConnectorSpec extends BaseSpec with BeforeAndAfterEach {
+class SessionConnectorSpec extends BaseSpec {
 
-  val httpHandler: HttpHandler = mock[HttpHandler]
-
-  override def beforeEach(): Unit =
+  override def beforeEach(): Unit = {
+    super.beforeEach()
     Mockito.reset(httpHandler)
+  }
 
   "Session Connector" must {
     "return Http response" when {
@@ -43,14 +42,16 @@
 
     "call the proper url to invalidate the cache" in {
       Await.result(sut.invalidateCache(), 5.seconds)
-      verify(httpHandler, times(1)).deleteFromApi(meq("localhost/tai/session-cache"), any())(any(), any())
+      verify(httpHandler, times(1)).deleteFromApi(meq("localhost/tai/session-cache"))(any(), any(), any())
     }
   }
+
+  val httpHandler: HttpHandler = mock[HttpHandler]
 
   def sut: SessionConnector = new SessionConnector(httpHandler, servicesConfig) {
     override val serviceUrl: String = "localhost"
 
-    when(httpHandler.deleteFromApi(any(), any())(any(), any()))
+    when(httpHandler.deleteFromApi(any())(any(), any(), any()))
       .thenReturn(Future.successful(HttpResponse.apply(200, "")))
 
   }
Index: test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala
--- a/test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala	
+++ b/test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala	(date 1696950747432)
@@ -30,7 +30,50 @@
 
 class BenefitsConnectorSpec extends BaseSpec {
 
-  val companyCars: Seq[CompanyCar] = List(
+  "getCompanyCarBenefits" must {
+    "fetch the company car details" when {
+      "provided with valid nino" in {
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(benefitsJson))
+
+        val result = sut.benefits(nino, 2018)
+        Await.result(result, 5 seconds) mustBe benefits
+      }
+    }
+
+    "thrown exception" when {
+      "benefit type is invalid" in {
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(invalidBenefitsJson))
+
+        val ex = the[RuntimeException] thrownBy Await.result(sut.benefits(nino, 2018), 5 seconds)
+        ex.getMessage must include(s"Couldn't retrieve benefits for nino: $nino")
+      }
+    }
+  }
+
+  "removeCompanyBenefit" must {
+
+    "return an envelope id on a successful invocation" in {
+      val employmentId = 1
+      val endedCompanyBenefit =
+        EndedCompanyBenefit("Accommodation", "Before 6th April", Some("1000000"), "Yes", Some("0123456789"))
+      val json = Json.obj("data" -> JsString("123-456-789"))
+      when(
+        httpHandler.postToApi(
+          meq(
+            s"${sut.serviceUrl}/tai/$nino/tax-account/tax-component/employments/$employmentId/benefits/ended-benefit"
+          ),
+          meq(endedCompanyBenefit)
+        )(any(), any(), any())
+      ).thenReturn(Future.successful(HttpResponse.apply(200, json.toString())))
+
+      val result = Await.result(sut.endedCompanyBenefit(nino, employmentId, endedCompanyBenefit), 5.seconds)
+
+      result mustBe Some("123-456-789")
+    }
+
+  }
+
+  val companyCars = List(
     CompanyCar(
       100,
       "Make Model",
@@ -41,9 +84,9 @@
     )
   )
 
-  val companyCarBenefit: CompanyCarBenefit = CompanyCarBenefit(10, 1000, companyCars, Some(1))
-  val genericBenefit: GenericBenefit = GenericBenefit(MedicalInsurance, Some(10), 1000)
-  val benefits: Benefits = Benefits(Seq(companyCarBenefit), Seq(genericBenefit))
+  val companyCarBenefit = CompanyCarBenefit(10, 1000, companyCars, Some(1))
+  val genericBenefit = GenericBenefit(MedicalInsurance, Some(10), 1000)
+  val benefits = Benefits(Seq(companyCarBenefit), Seq(genericBenefit))
 
   val companyCarsJson: JsObject =
     Json.obj(
@@ -89,53 +132,10 @@
       "links" -> Json.arr()
     )
 
-  val httpHandler: HttpHandler = mock[HttpHandler]
+  val httpHandler = mock[HttpHandler]
 
   def sut: BenefitsConnector = new BenefitsConnector(httpHandler, servicesConfig) {
     override val serviceUrl: String = "mockUrl"
   }
 
-  "getCompanyCarBenefits" must {
-    "fetch the company car details" when {
-      "provided with valid nino" in {
-        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(benefitsJson))
-
-        val result = sut.benefits(nino, 2018)
-        Await.result(result, 5 seconds) mustBe benefits
-      }
-    }
-
-    "thrown exception" when {
-      "benefit type is invalid" in {
-        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(invalidBenefitsJson))
-
-        val ex = the[RuntimeException] thrownBy Await.result(sut.benefits(nino, 2018), 5 seconds)
-        ex.getMessage must include(s"Couldn't retrieve benefits for nino: $nino")
-      }
-    }
-  }
-
-  "removeCompanyBenefit" must {
-
-    "return an envelope id on a successful invocation" in {
-      val employmentId = 1
-      val endedCompanyBenefit =
-        EndedCompanyBenefit("Accommodation", "Before 6th April", Some("1000000"), "Yes", Some("0123456789"))
-      val json = Json.obj("data" -> JsString("123-456-789"))
-      when(
-        httpHandler.postToApi(
-          meq(
-            s"${sut.serviceUrl}/tai/$nino/tax-account/tax-component/employments/$employmentId/benefits/ended-benefit"
-          ),
-          meq(endedCompanyBenefit),
-          any()
-        )(any(), any(), any(), any())
-      ).thenReturn(Future.successful(HttpResponse.apply(200, json.toString())))
-
-      val result = Await.result(sut.endedCompanyBenefit(nino, employmentId, endedCompanyBenefit), 5.seconds)
-
-      result mustBe Some("123-456-789")
-    }
-
-  }
 }
Index: test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala
--- a/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala	
+++ b/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala	(date 1696950747659)
@@ -16,10 +16,8 @@
 
 package uk.gov.hmrc.tai.connectors
 
+import akka.actor.ActorSystem
 import org.mockito.ArgumentMatchers.any
-import org.mockito.Mockito
-import org.scalatest.BeforeAndAfterEach
-import org.scalatest.concurrent.ScalaFutures
 import play.api.libs.json.Json
 import uk.gov.hmrc.http.LockedException
 import uk.gov.hmrc.tai.model.domain.tracking.{TrackedForm, TrackedFormAcquired, TrackedFormReceived}
@@ -27,7 +25,49 @@
 
 import scala.concurrent.Future
 
-class TrackingConnectorSpec extends BaseSpec with BeforeAndAfterEach with ScalaFutures {
+class TrackingConnectorSpec extends BaseSpec {
+
+  override def beforeEach(): Unit = {
+    super.beforeEach()
+    reset(httpHandler)
+  }
+
+  "Tracking Url" should {
+    "fetch the correct service url" when {
+      "given an id and idType" in {
+        sut.trackingUrl(nino.nino) mustBe s"mockUrl/tracking-data/user/nino/${nino.nino}"
+      }
+    }
+  }
+
+  "getUserTracking" should {
+    "fetch the user tracking details" when {
+      "provided with id and idType" in {
+        when(httpHandler.getFromApiV2(any())(any(), any()))
+          .thenReturn(Future.successful(Json.parse(trackedFormSeqJson)))
+
+        val result = sut.getUserTracking(nino.nino)
+        result.futureValue mustBe trackedFormSeq
+      }
+    }
+
+    "return an empty response" when {
+      "json is not valid" in {
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse("""{}""")))
+
+        val result = sut.getUserTracking(nino.nino)
+        result.futureValue mustBe Seq.empty[TrackedForm]
+      }
+
+      "getFromApiV2 throws" in {
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.failed(new LockedException("locked")))
+
+        val result = sut.getUserTracking(nino.nino)
+        result.futureValue mustBe Seq.empty[TrackedForm]
+      }
+    }
+
+  }
 
   val trackedFormSeqJson =
     """{"submissions":[{"formId":"R39_EN","formName":"TES1","dfsSubmissionReference":"123-ABCD-456","businessArea":"PSA",
@@ -47,52 +87,12 @@
                            {"milestone": "Done","status": "incomplete"}
                          ]}]}"""
 
-  val trackedFormSeq: Seq[TrackedForm] =
+  val trackedFormSeq =
     Seq(TrackedForm("R39_EN", "TES1", TrackedFormReceived), TrackedForm("R38_EN", "TES2", TrackedFormAcquired))
 
   val httpHandler: HttpHandler = mock[HttpHandler]
 
-  def sut: TrackingConnector = new TrackingConnector(httpHandler, servicesConfig, appConfig) {
+  def sut: TrackingConnector = new TrackingConnector(httpHandler, servicesConfig, appConfig, inject[ActorSystem]) {
     override lazy val serviceUrl: String = "mockUrl"
-  }
-  override def beforeEach(): Unit =
-    Mockito.reset(httpHandler)
-
-  "Tracking Url" should {
-    "fetch the correct service url" when {
-      "given an id and idType" in {
-        sut.trackingUrl(nino.nino) mustBe s"mockUrl/tracking-data/user/nino/${nino.nino}"
-      }
-    }
-  }
-
-  "getUserTracking" should {
-    "fetch the user tracking details" when {
-      "provided with id and idType" in {
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(trackedFormSeqJson)))
-
-        val result = sut.getUserTracking(nino.nino)
-        result.futureValue mustBe trackedFormSeq
-      }
-    }
-
-    "return an empty response" when {
-      "json is not valid" in {
-        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(Json.parse("""{}""")))
-
-        val result = sut.getUserTracking(nino.nino)
-        result.futureValue mustBe Seq.empty[TrackedForm]
-      }
-
-      "getFromApiV2 throws" in {
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.failed(new LockedException("locked")))
-
-        val result = sut.getUserTracking(nino.nino)
-        result.futureValue mustBe Seq.empty[TrackedForm]
-      }
-    }
-
   }
 }
Index: test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala
--- a/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala	
+++ b/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala	(date 1696950747658)
@@ -17,8 +17,6 @@
 package uk.gov.hmrc.tai.connectors
 
 import org.mockito.ArgumentMatchers.{any, eq => meq}
-import org.mockito.Mockito
-import org.scalatest.BeforeAndAfterEach
 import play.api.libs.json.{JsString, Json}
 import uk.gov.hmrc.http.HttpResponse
 import uk.gov.hmrc.tai.model.TaxYear
@@ -31,9 +29,279 @@
 import scala.concurrent.{Await, Future}
 import scala.language.postfixOps
 
-class EmploymentsConnectorSpec extends BaseSpec with BeforeAndAfterEach {
+class EmploymentsConnectorSpec extends BaseSpec {
+
+  override def beforeEach(): Unit = {
+    super.beforeEach()
+    reset(httpHandler)
+  }
+
+  "EmploymentsConnector employments" must {
+    "return a blank the service url" when {
+      "no service url is provided" in {
+        sut().serviceUrl mustBe ""
+      }
+    }
+
+    "return a valid service url" when {
+      "a service url is provided" in {
+        val url = "test/serviceurl/"
+        sut(url).serviceUrl mustBe url
+      }
+    }
+
+    "return the URL of the employments API" when {
+      "a nino is provided" in {
+        sut("test/service")
+          .employmentServiceUrl(nino, year) mustBe s"test/service/tai/$nino/employments/years/${year.year}"
+      }
+    }
+
+    "return the URL of the employments API without service URL" when {
+      "no serviceUrl is given" in {
+        sut().employmentServiceUrl(nino, year) mustBe s"/tai/$nino/employments/years/${year.year}"
+      }
+    }
+
+    "call the employments API with a URL containing a service URL" when {
+      "the service URL is supplied" in {
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
+
+        val responseFuture = sut("test/service").employments(nino, year)
+
+        Await.result(responseFuture, 5 seconds)
+        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
+      }
+    }
+
+    "call the employments API with a URL containing a service URL" when {
+
+      "the service URL is not supplied" in {
+
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
+
+        val responseFuture = sut().employments(nino, year)
+
+        Await.result(responseFuture, 5 seconds)
+
+        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"))(any(), any())
+      }
+    }
+
+    "return employments from the employments API" when {
+
+      "api provides one employments" in {
+
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
+
+        val responseFuture = sut().employments(nino, year)
+
+        val result = Await.result(responseFuture, 5 seconds)
+
+        result mustBe oneEmploymentDetails
+
+        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"))(any(), any())
+      }
+
+      "api provides multiple employments" in {
+
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(twoEmployments)))
+
+        val responseFuture = sut("test/service").employments(nino, year)
+
+        val result = Await.result(responseFuture, 5 seconds)
+
+        result mustBe twoEmploymentsDetails
+
+        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
+      }
+    }
+
+    "return nil when api returns zero employments" in {
+
+      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(zeroEmployments)))
+
+      val responseFuture = sut("test/service").employments(nino, year)
+
+      val result = Await.result(responseFuture, 5 seconds)
+
+      result mustBe Nil
+
+      verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
+    }
+
+    "throw an exception" when {
+      "invalid json has returned by api" in {
+
+        when(httpHandler.getFromApiV2(any())(any(), any()))
+          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
+
+        val ex = the[RuntimeException] thrownBy Await.result(sut("test/service").employments(nino, year), 5 seconds)
+        ex.getMessage mustBe "Invalid employment json"
+      }
+    }
+
+  }
+
+  "EmploymentsConnector ceasedEmployments" must {
+
+    "return employments from the employments API" when {
+
+      "api provides one employments" in {
+
+        when(httpHandler.getFromApiV2(any())(any(), any()))
+          .thenReturn(Future.successful(Json.parse(oneCeasedEmployment)))
+
+        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+
+        val result = Await.result(responseFuture, 5 seconds)
+
+        result mustBe oneCeasedEmploymentDetails
+
+        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(
+          any(),
+          any()
+        )
+      }
+
+      "api provides multiple employments" in {
+
+        when(httpHandler.getFromApiV2(any())(any(), any()))
+          .thenReturn(Future.successful(Json.parse(twoCeasedEmployments)))
+
+        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+
+        val result = Await.result(responseFuture, 5 seconds)
+
+        result mustBe twoCeasedEmploymentsDetails
+
+        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(
+          any(),
+          any()
+        )
+      }
+    }
+
+    "return nil when api returns zero employments" in {
+
+      when(httpHandler.getFromApiV2(any())(any(), any()))
+        .thenReturn(Future.successful(Json.parse(zeroCeasedEmployments)))
+
+      val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+
+      val result = Await.result(responseFuture, 5 seconds)
+
+      result mustBe Nil
+
+      verify(httpHandler)
+        .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(any(), any())
+    }
+
+    "throw an exception" when {
+      "invalid json has returned by api" in {
+
+        when(httpHandler.getFromApiV2(any())(any(), any()))
+          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
+
+        val ex = the[RuntimeException] thrownBy Await
+          .result(sut("test/service").ceasedEmployments(nino, year), 5 seconds)
+        ex.getMessage mustBe "Invalid employment json"
+      }
+    }
+  }
+
+  "EmploymentsConnector employment" must {
+
+    "return service url" in {
+      sut("test").employmentUrl(nino, "123") mustBe s"test/tai/$nino/employments/123"
+    }
+
+    "return an employment from current year" when {
+      "valid id has been passed" in {
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(anEmployment)))
+
+        val result = Await.result(sut().employment(nino, "123"), 5.seconds)
+
+        result mustBe Some(anEmploymentObject)
+        verify(httpHandler, times(1)).getFromApiV2(any())(any(), any())
+      }
+    }
+
+    "return none" when {
+      "invalid json returned by an api" in {
+        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(zeroEmployments)))
+
+        Await.result(sut().employment(nino, "123"), 5.seconds) mustBe None
+      }
+    }
+  }
+
+  "EmploymentsConnector endEmployment" must {
+    "return an envelope" when {
+      "we send a PUT request to backend" in {
+        val json = Json.obj("data" -> JsString("123-456-789"))
+        when(httpHandler.putToApi(any(), any())(any(), any(), any()))
+          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+
+        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
+
+        val result = Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
+
+        result mustBe "123-456-789"
+      }
+    }
+
+    "return an exception" when {
+      "json is invalid" in {
+        val json = Json.obj("test" -> JsString("123-456-789"))
+        when(httpHandler.putToApi(any(), any())(any(), any(), any()))
+          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
+
+        val ex = the[RuntimeException] thrownBy Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
+
+        ex.getMessage mustBe "Invalid json"
+      }
+    }
+  }
+
+  "EmploymentsConnector addEmployment" must {
+    "return an envelope id on a successful invocation" in {
+      val addEmployment = AddEmployment(
+        employerName = "testEmployment",
+        payrollNumber = "12345",
+        startDate = LocalDate.of(2017, 6, 6),
+        telephoneContactAllowed = "Yes",
+        telephoneNumber = Some("123456789")
+      )
+      val json = Json.obj("data" -> JsString("123-456-789"))
+      when(
+        httpHandler
+          .postToApi(meq(sut().addEmploymentServiceUrl(nino)), meq(addEmployment))(any(), any(), any())
+      )
+        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+
+      val result = Await.result(sut().addEmployment(nino, addEmployment), 5.seconds)
 
-  val anEmploymentObject: Employment = Employment(
+      result mustBe Some("123-456-789")
+    }
+  }
+
+  "EmploymentsConnector incorrectEmployment" must {
+    "return an envelope id on a successful invocation" in {
+      val model =
+        IncorrectIncome(whatYouToldUs = "TEST", telephoneContactAllowed = "Yes", telephoneNumber = Some("123456789"))
+      val json = Json.obj("data" -> JsString("123-456-789"))
+      when(httpHandler.postToApi(meq(s"/tai/$nino/employments/1/reason"), meq(model))(any(), any(), any()))
+        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+
+      val result = Await.result(sut().incorrectEmployment(nino, 1, model), 5.seconds)
+
+      result mustBe Some("123-456-789")
+    }
+  }
+
+  val anEmploymentObject = Employment(
     "company name",
     Live,
     Some("123"),
@@ -44,19 +312,12 @@
     "321",
     2,
     None,
-    hasPayrolledBenefit = false,
-    receivingOccupationalPension = false
+    false,
+    false
   )
 
   private val oneEmploymentDetails = List(anEmploymentObject)
 
-  private val twoEmploymentsDetails = oneEmploymentDetails.head :: oneEmploymentDetails.head.copy(
-    taxDistrictNumber = "1234",
-    payeNumber = "4321",
-    sequenceNumber = 3,
-    receivingOccupationalPension = true
-  ) :: Nil
-
   private val oneCeasedEmploymentDetails = List(
     Employment(
       "company name",
@@ -69,10 +330,17 @@
       "321",
       2,
       None,
-      hasPayrolledBenefit = false,
-      receivingOccupationalPension = false
+      false,
+      false
     )
   )
+
+  private val twoEmploymentsDetails = oneEmploymentDetails.head :: oneEmploymentDetails.head.copy(
+    taxDistrictNumber = "1234",
+    payeNumber = "4321",
+    sequenceNumber = 3,
+    receivingOccupationalPension = true
+  ) :: Nil
 
   private val twoCeasedEmploymentsDetails = oneCeasedEmploymentDetails.head :: oneCeasedEmploymentDetails.head.copy(
     taxDistrictNumber = "1234",
@@ -224,290 +492,8 @@
 
   val httpHandler: HttpHandler = mock[HttpHandler]
 
-  def sut(servUrl: String = ""): EmploymentsConnector = new EmploymentsConnector(httpHandler, servicesConfig) {
+  def sut(servUrl: String = "") = new EmploymentsConnector(httpHandler, servicesConfig) {
     override val serviceUrl: String = servUrl
   }
 
-  override def beforeEach(): Unit =
-    Mockito.reset(httpHandler)
-
-  "EmploymentsConnector employments" must {
-    "return a blank the service url" when {
-      "no service url is provided" in {
-        sut().serviceUrl mustBe ""
-      }
-    }
-
-    "return a valid service url" when {
-      "a service url is provided" in {
-        val url = "test/serviceurl/"
-        sut(url).serviceUrl mustBe url
-      }
-    }
-
-    "return the URL of the employments API" when {
-      "a nino is provided" in {
-        sut("test/service")
-          .employmentServiceUrl(nino, year) mustBe s"test/service/tai/$nino/employments/years/${year.year}"
-      }
-    }
-
-    "return the URL of the employments API without service URL" when {
-      "no serviceUrl is given" in {
-        sut().employmentServiceUrl(nino, year) mustBe s"/tai/$nino/employments/years/${year.year}"
-      }
-    }
-
-    "call the employments API with a URL containing a service URL" when {
-      "the service URL is supplied" in {
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(oneEmployment)))
-
-        val responseFuture = sut("test/service").employments(nino, year)
-
-        Await.result(responseFuture, 5 seconds)
-        verify(httpHandler)
-          .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
-      }
-    }
-
-    "call the employments API with a URL containing a service URL" when {
-
-      "the service URL is not supplied" in {
-
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(oneEmployment)))
-
-        val responseFuture = sut().employments(nino, year)
-
-        Await.result(responseFuture, 5 seconds)
-
-        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"), any())(any(), any())
-      }
-    }
-
-    "return employments from the employments API" when {
-
-      "api provides one employments" in {
-
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(oneEmployment)))
-
-        val responseFuture = sut().employments(nino, year)
-
-        val result = Await.result(responseFuture, 5 seconds)
-
-        result mustBe oneEmploymentDetails
-
-        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"), any())(any(), any())
-      }
-
-      "api provides multiple employments" in {
-
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(twoEmployments)))
-
-        val responseFuture = sut("test/service").employments(nino, year)
-
-        val result = Await.result(responseFuture, 5 seconds)
-
-        result mustBe twoEmploymentsDetails
-
-        verify(httpHandler)
-          .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
-      }
-    }
-
-    "return nil when api returns zero employments" in {
-
-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-        .thenReturn(Future.successful(Json.parse(zeroEmployments)))
-
-      val responseFuture = sut("test/service").employments(nino, year)
-
-      val result = Await.result(responseFuture, 5 seconds)
-
-      result mustBe Nil
-
-      verify(httpHandler)
-        .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
-    }
-
-    "throw an exception" when {
-      "invalid json has returned by api" in {
-
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
-
-        val ex = the[RuntimeException] thrownBy Await.result(sut("test/service").employments(nino, year), 5 seconds)
-        ex.getMessage mustBe "Invalid employment json"
-      }
-    }
-
-  }
-
-  "EmploymentsConnector ceasedEmployments" must {
-
-    "return employments from the employments API" when {
-
-      "api provides one employments" in {
-
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(oneCeasedEmployment)))
-
-        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
-
-        val result = Await.result(responseFuture, 5 seconds)
-
-        result mustBe oneCeasedEmploymentDetails
-
-        verify(httpHandler)
-          .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(
-            any(),
-            any()
-          )
-      }
-
-      "api provides multiple employments" in {
-
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(twoCeasedEmployments)))
-
-        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
-
-        val result = Await.result(responseFuture, 5 seconds)
-
-        result mustBe twoCeasedEmploymentsDetails
-
-        verify(httpHandler)
-          .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(
-            any(),
-            any()
-          )
-      }
-    }
-
-    "return nil when api returns zero employments" in {
-
-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-        .thenReturn(Future.successful(Json.parse(zeroCeasedEmployments)))
-
-      val responseFuture = sut("test/service").ceasedEmployments(nino, year)
-
-      val result = Await.result(responseFuture, 5 seconds)
-
-      result mustBe Nil
-
-      verify(httpHandler)
-        .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(any(), any())
-    }
-
-    "throw an exception" when {
-      "invalid json has returned by api" in {
-
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
-
-        val ex = the[RuntimeException] thrownBy Await
-          .result(sut("test/service").ceasedEmployments(nino, year), 5 seconds)
-        ex.getMessage mustBe "Invalid employment json"
-      }
-    }
-  }
-
-  "EmploymentsConnector employment" must {
-
-    "return service url" in {
-      sut("test").employmentUrl(nino, "123") mustBe s"test/tai/$nino/employments/123"
-    }
-
-    "return an employment from current year" when {
-      "valid id has been passed" in {
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(anEmployment)))
-
-        val result = Await.result(sut().employment(nino, "123"), 5.seconds)
-
-        result mustBe Some(anEmploymentObject)
-        verify(httpHandler, times(1)).getFromApiV2(any(), any())(any(), any())
-      }
-    }
-
-    "return none" when {
-      "invalid json returned by an api" in {
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
-          .thenReturn(Future.successful(Json.parse(zeroEmployments)))
-
-        Await.result(sut().employment(nino, "123"), 5.seconds) mustBe None
-      }
-    }
-  }
-
-  "EmploymentsConnector endEmployment" must {
-    "return an envelope" when {
-      "we send a PUT request to backend" in {
-        val json = Json.obj("data" -> JsString("123-456-789"))
-        when(httpHandler.putToApi(any(), any(), any())(any(), any(), any(), any()))
-          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
-
-        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
-
-        val result = Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
-
-        result mustBe "123-456-789"
-      }
-    }
-
-    "return an exception" when {
-      "json is invalid" in {
-        val json = Json.obj("test" -> JsString("123-456-789"))
-        when(httpHandler.putToApi(any(), any(), any())(any(), any(), any(), any()))
-          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
-        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
-
-        val ex = the[RuntimeException] thrownBy Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
-
-        ex.getMessage mustBe "Invalid json"
-      }
-    }
-  }
-
-  "EmploymentsConnector addEmployment" must {
-    "return an envelope id on a successful invocation" in {
-      val addEmployment = AddEmployment(
-        employerName = "testEmployment",
-        payrollNumber = "12345",
-        startDate = LocalDate.of(2017, 6, 6),
-        telephoneContactAllowed = "Yes",
-        telephoneNumber = Some("123456789")
-      )
-      val json = Json.obj("data" -> JsString("123-456-789"))
-      when(
-        httpHandler
-          .postToApi(meq(sut().addEmploymentServiceUrl(nino)), meq(addEmployment), any())(any(), any(), any(), any())
-      )
-        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
-
-      val result = Await.result(sut().addEmployment(nino, addEmployment), 5.seconds)
-
-      result mustBe Some("123-456-789")
-    }
-  }
-
-  "EmploymentsConnector incorrectEmployment" must {
-    "return an envelope id on a successful invocation" in {
-      val model =
-        IncorrectIncome(whatYouToldUs = "TEST", telephoneContactAllowed = "Yes", telephoneNumber = Some("123456789"))
-      val json = Json.obj("data" -> JsString("123-456-789"))
-      when(
-        httpHandler.postToApi(meq(s"/tai/$nino/employments/1/reason"), meq(model), any())(any(), any(), any(), any())
-      )
-        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
-
-      val result = Await.result(sut().incorrectEmployment(nino, 1, model), 5.seconds)
-
-      result mustBe Some("123-456-789")
-    }
-  }
-
 }
Index: test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala
--- a/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala	
+++ b/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala	(date 1696950747437)
@@ -30,33 +30,25 @@
 
 class JourneyCacheConnectorSpec extends BaseSpec {
 
-  private val journeyName = "journey1"
-
-  val httpHandler: HttpHandler = mock[HttpHandler]
-
-  def sut: JourneyCacheConnector = new JourneyCacheConnector(httpHandler, servicesConfig) {
-    override val serviceUrl: String = "mockUrl"
-  }
-
   "currentCache" must {
 
     "return the map of current cached values [String, String], as returned from the api call" in {
       val cacheString = """{"key1":"value1","key2":"value2"}"""
-      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(Json.parse(cacheString)))
+      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(cacheString)))
 
       val expectedResult = Map("key1" -> "value1", "key2" -> "value2")
       val result = Await.result(sut.currentCache(journeyName), 5 seconds)
       result mustBe expectedResult
     }
     "trap a NO CONTENT exception (a valid business scenario), and return an empty map in its place" in {
-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+      when(httpHandler.getFromApiV2(any())(any(), any()))
         .thenReturn(Future.failed(new HttpException("no cache was found", NO_CONTENT)))
 
       val result = Await.result(sut.currentCache(journeyName), 5 seconds)
       result mustBe Map.empty[String, String]
     }
     "expose any exception that is not a NOT FOUND type" in {
-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+      when(httpHandler.getFromApiV2(any())(any(), any()))
         .thenReturn(Future.failed(new InternalServerException("something terminal")))
 
       val thrown = the[InternalServerException] thrownBy Await.result(sut.currentCache(journeyName), 5 seconds)
@@ -67,9 +59,9 @@
   "currentValueAs" must {
 
     "return the cached value transformed by the supplied function" in {
-      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("1")))
+      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("1")))
 
-      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("2017-03-04")))
+      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("2017-03-04")))
       Await.result(
         sut.currentValueAs[LocalDate](journeyName, "dateValKey", string => LocalDate.parse(string)),
         5 seconds
@@ -77,7 +69,7 @@
     }
 
     "trap a NO CONTENT exception (a valid business scenario), and return None in its place" in {
-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+      when(httpHandler.getFromApiV2(any())(any(), any()))
         .thenReturn(Future.failed(new HttpException("key wasn't found in cache", NO_CONTENT)))
 
       val result = Await.result(sut.currentValueAs[String](journeyName, "key1", string => string), 5 seconds)
@@ -85,7 +77,7 @@
     }
 
     "expose an exception that is not a NOT FOUND type" in {
-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+      when(httpHandler.getFromApiV2(any())(any(), any()))
         .thenReturn(Future.failed(new InternalServerException("something terminal")))
 
       val thrown = the[InternalServerException] thrownBy Await
@@ -97,7 +89,7 @@
   "mandatoryJourneyValueAs" must {
 
     "return the requested values where present" in {
-      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("true")))
+      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("true")))
       Await.result(
         sut.mandatoryJourneyValueAs[Boolean](journeyName, "booleanValKey", string => string.toBoolean),
         5 seconds
@@ -105,7 +97,7 @@
     }
 
     "return an error message when the requested value is not found" in {
-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+      when(httpHandler.getFromApiV2(any())(any(), any()))
         .thenReturn(Future.failed(new HttpException("key wasn't found in cache", NO_CONTENT)))
 
       val expectedMsg = "The mandatory value under key 'key1' was not found in the journey cache for 'journey1'"
@@ -122,7 +114,7 @@
       val newValuesToCache = Map("key1" -> "value1", "key2" -> "value2")
       val updatedCacheJson = """{"key1":"value1","key2":"value2","key7":"value7"}"""
       val updatedCacheMap = Map("key1" -> "value1", "key2" -> "value2", "key7" -> "value7")
-      when(httpHandler.postToApi(any(), any(), any())(any(), any(), any(), any()))
+      when(httpHandler.postToApi(any(), any())(any(), any(), any()))
         .thenReturn(Future.successful(HttpResponse(OK, updatedCacheJson)))
 
       val result = Await.result(sut.cache(journeyName, newValuesToCache), 5 seconds)
@@ -134,7 +126,7 @@
     "remove journey cache data for company car journey" in {
       val url = s"${sut.cacheUrl(journeyName)}"
 
-      when(httpHandler.deleteFromApi(meq(url), any())(any(), any()))
+      when(httpHandler.deleteFromApi(meq(url))(any(), any(), any()))
         .thenReturn(Future.successful(HttpResponse.apply(NO_CONTENT, "")))
 
       val result = Await.result(sut.flush(journeyName), 5 seconds)
@@ -146,7 +138,7 @@
     "remove journey cache data for company car journey" in {
       val url = s"${sut.cacheUrl(s"$journeyName/1")}"
 
-      when(httpHandler.deleteFromApi(meq(url), any())(any(), any()))
+      when(httpHandler.deleteFromApi(meq(url))(any(), any(), any()))
         .thenReturn(Future.successful(HttpResponse.apply(NO_CONTENT, "")))
 
       val result = Await.result(sut.flushWithEmpId(journeyName, 1), 5 seconds)
@@ -154,4 +146,12 @@
     }
   }
 
+  private val journeyName = "journey1"
+
+  val httpHandler: HttpHandler = mock[HttpHandler]
+
+  def sut: JourneyCacheConnector = new JourneyCacheConnector(httpHandler, servicesConfig) {
+    override val serviceUrl: String = "mockUrl"
+  }
+
 }
Index: test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala
--- a/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala	
+++ b/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala	(date 1696950747440)
@@ -27,8 +27,6 @@
 
 class PreviousYearsIncomeConnectorSpec extends BaseSpec {
 
-  val httpHandler: HttpHandler = mock[HttpHandler]
-
   "PreviousYearsIncomeConnector" must {
 
     "return an envelope id on a successful invocation" in {
@@ -37,7 +35,7 @@
       val json = Json.obj("data" -> JsString("123-456-789"))
       when(
         httpHandler
-          .postToApi(meq(s"/tai/$nino/employments/years/2016/update"), meq(model), any())(any(), any(), any(), any())
+          .postToApi(meq(s"/tai/$nino/employments/years/2016/update"), meq(model))(any(), any(), any())
       )
         .thenReturn(Future.successful(HttpResponse.apply(200, json.toString)))
 
@@ -48,6 +46,8 @@
 
   }
 
+  val httpHandler: HttpHandler = mock[HttpHandler]
+
   def sut(servUrl: String = ""): PreviousYearsIncomeConnector =
     new PreviousYearsIncomeConnector(httpHandler, servicesConfig) {
       override val serviceUrl: String = servUrl
Index: test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala
--- a/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala	
+++ b/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala	(date 1696950747442)
@@ -29,10 +29,6 @@
 
 class TaxFreeAmountComparisonConnectorSpec extends BaseSpec {
 
-  val httpHandler: HttpHandler = mock[HttpHandler]
-
-  def sut = new TaxFreeAmountComparisonConnector(httpHandler, servicesConfig)
-
   "tax free amount url" must {
     "fetch the url to connect to TAI to retrieve tax free amount comparison" in {
       sut.taxFreeAmountComparisonUrl(
@@ -71,7 +67,7 @@
 
         val taxFreeAmountUrl = s"${sut.serviceUrl}/tai/${nino.nino}/tax-account/tax-free-amount-comparison"
 
-        when(httpHandler.getFromApiV2(meq(taxFreeAmountUrl), any())(any(), any())).thenReturn(Future.successful(json))
+        when(httpHandler.getFromApiV2(meq(taxFreeAmountUrl))(any(), any())).thenReturn(Future.successful(json))
 
         val codingComponents = Seq(CodingComponent(CarBenefit, Some(1), 1, "Car Benefit", Some(1)))
 
@@ -86,7 +82,7 @@
     "return a BadRequestException" when {
       "the api responds with invalid json" in {
         val exceptionMessage = "exception message"
-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+        when(httpHandler.getFromApiV2(any())(any(), any()))
           .thenReturn(Future.failed(new BadRequestException(exceptionMessage)))
 
         val ex = the[BadRequestException] thrownBy Await.result(sut.taxFreeAmountComparison(nino), 5 seconds)
@@ -95,4 +91,9 @@
       }
     }
   }
+
+  val httpHandler: HttpHandler = mock[HttpHandler]
+
+  def sut = new TaxFreeAmountComparisonConnector(httpHandler, servicesConfig)
+
 }
Index: test/utils/BaseSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/utils/BaseSpec.scala b/test/utils/BaseSpec.scala
--- a/test/utils/BaseSpec.scala	
+++ b/test/utils/BaseSpec.scala	(date 1696950747667)
@@ -20,19 +20,25 @@
 import controllers.{FakeAuthAction, FakeTaiPlayApplication}
 import org.jsoup.nodes.Element
 import org.mockito.MockitoSugar
+import org.scalatest.BeforeAndAfterEach
+import org.scalatest.concurrent.ScalaFutures
 import org.scalatestplus.play.PlaySpec
 import play.api.i18n._
 import play.api.mvc.MessagesControllerComponents
 import uk.gov.hmrc.domain.Nino
 import uk.gov.hmrc.http.HeaderCarrier
+import uk.gov.hmrc.mongoFeatureToggles.model.FeatureFlag
 import uk.gov.hmrc.play.bootstrap.config.ServicesConfig
 import uk.gov.hmrc.play.language.LanguageUtils
 import uk.gov.hmrc.tai.config.ApplicationConfig
+import uk.gov.hmrc.tai.model.admin.SCAWrapperToggle
 
-import scala.concurrent.ExecutionContext
+import scala.concurrent.{ExecutionContext, Future}
 import scala.reflect.ClassTag
 
-trait BaseSpec extends PlaySpec with FakeTaiPlayApplication with MockitoSugar with I18nSupport {
+trait BaseSpec
+    extends PlaySpec with FakeTaiPlayApplication with MockitoSugar with I18nSupport with BeforeAndAfterEach
+    with ScalaFutures {
 
   def inject[T](implicit evidence: ClassTag[T]): T = app.injector.instanceOf[T]
 
@@ -61,4 +67,10 @@
     def replaceNbsp = str.replaceAll("&nbsp;", " ")
   }
 
+  override def beforeEach(): Unit = {
+    reset(mockFeatureFlagService)
+    when(mockFeatureFlagService.get(SCAWrapperToggle))
+      .thenReturn(Future.successful(FeatureFlag(SCAWrapperToggle, isEnabled = false)))
+  }
+
 }
Index: test/controllers/IncomeSourceSummaryControllerSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/controllers/IncomeSourceSummaryControllerSpec.scala b/test/controllers/IncomeSourceSummaryControllerSpec.scala
--- a/test/controllers/IncomeSourceSummaryControllerSpec.scala	
+++ b/test/controllers/IncomeSourceSummaryControllerSpec.scala	(date 1696950747642)
@@ -22,7 +22,6 @@
 import org.jsoup.Jsoup
 import org.mockito.ArgumentMatchers.{any, eq => meq}
 import org.mockito.Mockito
-import org.scalatest.BeforeAndAfterEach
 import play.api.i18n.Messages
 import play.api.test.Helpers._
 import uk.gov.hmrc.play.audit.http.connector.AuditConnector
@@ -41,10 +40,12 @@
 import java.time.LocalDate
 import scala.concurrent.Future
 
-class IncomeSourceSummaryControllerSpec extends BaseSpec with BeforeAndAfterEach {
+class IncomeSourceSummaryControllerSpec extends BaseSpec {
 
-  override def beforeEach(): Unit =
+  override def beforeEach(): Unit = {
+    super.beforeEach()
     Mockito.reset(journeyCacheService)
+  }
 
   val employmentId = 1
   val pensionId = 2
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1696950767451)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]/shelved.patch	(date 1696950767451)
@@ -0,0 +1,1662 @@
+Index: test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala	
+@@ -33,275 +33,7 @@
+ 
+ class EmploymentsConnectorSpec extends BaseSpec with BeforeAndAfterEach {
+ 
+-  override def beforeEach(): Unit =
+-    Mockito.reset(httpHandler)
+-
+-  "EmploymentsConnector employments" must {
+-    "return a blank the service url" when {
+-      "no service url is provided" in {
+-        sut().serviceUrl mustBe ""
+-      }
+-    }
+-
+-    "return a valid service url" when {
+-      "a service url is provided" in {
+-        val url = "test/serviceurl/"
+-        sut(url).serviceUrl mustBe url
+-      }
+-    }
+-
+-    "return the URL of the employments API" when {
+-      "a nino is provided" in {
+-        sut("test/service")
+-          .employmentServiceUrl(nino, year) mustBe s"test/service/tai/$nino/employments/years/${year.year}"
+-      }
+-    }
+-
+-    "return the URL of the employments API without service URL" when {
+-      "no serviceUrl is given" in {
+-        sut().employmentServiceUrl(nino, year) mustBe s"/tai/$nino/employments/years/${year.year}"
+-      }
+-    }
+-
+-    "call the employments API with a URL containing a service URL" when {
+-      "the service URL is supplied" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
+-
+-        val responseFuture = sut("test/service").employments(nino, year)
+-
+-        Await.result(responseFuture, 5 seconds)
+-        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
+-      }
+-    }
+-
+-    "call the employments API with a URL containing a service URL" when {
+-
+-      "the service URL is not supplied" in {
+-
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
+-
+-        val responseFuture = sut().employments(nino, year)
+-
+-        Await.result(responseFuture, 5 seconds)
+-
+-        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"))(any(), any())
+-      }
+-    }
+-
+-    "return employments from the employments API" when {
+-
+-      "api provides one employments" in {
+-
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
+-
+-        val responseFuture = sut().employments(nino, year)
+-
+-        val result = Await.result(responseFuture, 5 seconds)
+-
+-        result mustBe oneEmploymentDetails
+-
+-        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"))(any(), any())
+-      }
+-
+-      "api provides multiple employments" in {
+-
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(twoEmployments)))
+-
+-        val responseFuture = sut("test/service").employments(nino, year)
+-
+-        val result = Await.result(responseFuture, 5 seconds)
+-
+-        result mustBe twoEmploymentsDetails
+-
+-        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
+-      }
+-    }
+-
+-    "return nil when api returns zero employments" in {
+-
+-      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(zeroEmployments)))
+-
+-      val responseFuture = sut("test/service").employments(nino, year)
+-
+-      val result = Await.result(responseFuture, 5 seconds)
+-
+-      result mustBe Nil
+-
+-      verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
+-    }
+-
+-    "throw an exception" when {
+-      "invalid json has returned by api" in {
+-
+-        when(httpHandler.getFromApiV2(any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
+-
+-        val ex = the[RuntimeException] thrownBy Await.result(sut("test/service").employments(nino, year), 5 seconds)
+-        ex.getMessage mustBe "Invalid employment json"
+-      }
+-    }
+-
+-  }
+-
+-  "EmploymentsConnector ceasedEmployments" must {
+-
+-    "return employments from the employments API" when {
+-
+-      "api provides one employments" in {
+-
+-        when(httpHandler.getFromApiV2(any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(oneCeasedEmployment)))
+-
+-        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+-
+-        val result = Await.result(responseFuture, 5 seconds)
+-
+-        result mustBe oneCeasedEmploymentDetails
+-
+-        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(
+-          any(),
+-          any()
+-        )
+-      }
+-
+-      "api provides multiple employments" in {
+-
+-        when(httpHandler.getFromApiV2(any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(twoCeasedEmployments)))
+-
+-        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+-
+-        val result = Await.result(responseFuture, 5 seconds)
+-
+-        result mustBe twoCeasedEmploymentsDetails
+-
+-        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(
+-          any(),
+-          any()
+-        )
+-      }
+-    }
+-
+-    "return nil when api returns zero employments" in {
+-
+-      when(httpHandler.getFromApiV2(any())(any(), any()))
+-        .thenReturn(Future.successful(Json.parse(zeroCeasedEmployments)))
+-
+-      val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+-
+-      val result = Await.result(responseFuture, 5 seconds)
+-
+-      result mustBe Nil
+-
+-      verify(httpHandler)
+-        .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(any(), any())
+-    }
+-
+-    "throw an exception" when {
+-      "invalid json has returned by api" in {
+-
+-        when(httpHandler.getFromApiV2(any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
+-
+-        val ex = the[RuntimeException] thrownBy Await
+-          .result(sut("test/service").ceasedEmployments(nino, year), 5 seconds)
+-        ex.getMessage mustBe "Invalid employment json"
+-      }
+-    }
+-  }
+-
+-  "EmploymentsConnector employment" must {
+-
+-    "return service url" in {
+-      sut("test").employmentUrl(nino, "123") mustBe s"test/tai/$nino/employments/123"
+-    }
+-
+-    "return an employment from current year" when {
+-      "valid id has been passed" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(anEmployment)))
+-
+-        val result = Await.result(sut().employment(nino, "123"), 5.seconds)
+-
+-        result mustBe Some(anEmploymentObject)
+-        verify(httpHandler, times(1)).getFromApiV2(any())(any(), any())
+-      }
+-    }
+-
+-    "return none" when {
+-      "invalid json returned by an api" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(zeroEmployments)))
+-
+-        Await.result(sut().employment(nino, "123"), 5.seconds) mustBe None
+-      }
+-    }
+-  }
+-
+-  "EmploymentsConnector endEmployment" must {
+-    "return an envelope" when {
+-      "we send a PUT request to backend" in {
+-        val json = Json.obj("data" -> JsString("123-456-789"))
+-        when(httpHandler.putToApi(any(), any())(any(), any(), any()))
+-          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+-
+-        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
+-
+-        val result = Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
+-
+-        result mustBe "123-456-789"
+-      }
+-    }
+-
+-    "return an exception" when {
+-      "json is invalid" in {
+-        val json = Json.obj("test" -> JsString("123-456-789"))
+-        when(httpHandler.putToApi(any(), any())(any(), any(), any()))
+-          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+-        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
+-
+-        val ex = the[RuntimeException] thrownBy Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
+-
+-        ex.getMessage mustBe "Invalid json"
+-      }
+-    }
+-  }
+-
+-  "EmploymentsConnector addEmployment" must {
+-    "return an envelope id on a successful invocation" in {
+-      val addEmployment = AddEmployment(
+-        employerName = "testEmployment",
+-        payrollNumber = "12345",
+-        startDate = LocalDate.of(2017, 6, 6),
+-        telephoneContactAllowed = "Yes",
+-        telephoneNumber = Some("123456789")
+-      )
+-      val json = Json.obj("data" -> JsString("123-456-789"))
+-      when(
+-        httpHandler
+-          .postToApi(meq(sut().addEmploymentServiceUrl(nino)), meq(addEmployment))(any(), any(), any())
+-      )
+-        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+-
+-      val result = Await.result(sut().addEmployment(nino, addEmployment), 5.seconds)
+-
+-      result mustBe Some("123-456-789")
+-    }
+-  }
+-
+-  "EmploymentsConnector incorrectEmployment" must {
+-    "return an envelope id on a successful invocation" in {
+-      val model =
+-        IncorrectIncome(whatYouToldUs = "TEST", telephoneContactAllowed = "Yes", telephoneNumber = Some("123456789"))
+-      val json = Json.obj("data" -> JsString("123-456-789"))
+-      when(httpHandler.postToApi(meq(s"/tai/$nino/employments/1/reason"), meq(model))(any(), any(), any()))
+-        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+-
+-      val result = Await.result(sut().incorrectEmployment(nino, 1, model), 5.seconds)
+-
+-      result mustBe Some("123-456-789")
+-    }
+-  }
+-
+-  val anEmploymentObject = Employment(
++  val anEmploymentObject: Employment = Employment(
+     "company name",
+     Live,
+     Some("123"),
+@@ -312,12 +44,19 @@
+     "321",
+     2,
+     None,
+-    false,
+-    false
++    hasPayrolledBenefit = false,
++    receivingOccupationalPension = false
+   )
+ 
+   private val oneEmploymentDetails = List(anEmploymentObject)
+ 
++  private val twoEmploymentsDetails = oneEmploymentDetails.head :: oneEmploymentDetails.head.copy(
++    taxDistrictNumber = "1234",
++    payeNumber = "4321",
++    sequenceNumber = 3,
++    receivingOccupationalPension = true
++  ) :: Nil
++
+   private val oneCeasedEmploymentDetails = List(
+     Employment(
+       "company name",
+@@ -330,17 +69,10 @@
+       "321",
+       2,
+       None,
+-      false,
+-      false
++      hasPayrolledBenefit = false,
++      receivingOccupationalPension = false
+     )
+   )
+-
+-  private val twoEmploymentsDetails = oneEmploymentDetails.head :: oneEmploymentDetails.head.copy(
+-    taxDistrictNumber = "1234",
+-    payeNumber = "4321",
+-    sequenceNumber = 3,
+-    receivingOccupationalPension = true
+-  ) :: Nil
+ 
+   private val twoCeasedEmploymentsDetails = oneCeasedEmploymentDetails.head :: oneCeasedEmploymentDetails.head.copy(
+     taxDistrictNumber = "1234",
+@@ -492,8 +224,290 @@
+ 
+   val httpHandler: HttpHandler = mock[HttpHandler]
+ 
+-  def sut(servUrl: String = "") = new EmploymentsConnector(httpHandler, servicesConfig) {
++  def sut(servUrl: String = ""): EmploymentsConnector = new EmploymentsConnector(httpHandler, servicesConfig) {
+     override val serviceUrl: String = servUrl
+   }
+ 
++  override def beforeEach(): Unit =
++    Mockito.reset(httpHandler)
++
++  "EmploymentsConnector employments" must {
++    "return a blank the service url" when {
++      "no service url is provided" in {
++        sut().serviceUrl mustBe ""
++      }
++    }
++
++    "return a valid service url" when {
++      "a service url is provided" in {
++        val url = "test/serviceurl/"
++        sut(url).serviceUrl mustBe url
++      }
++    }
++
++    "return the URL of the employments API" when {
++      "a nino is provided" in {
++        sut("test/service")
++          .employmentServiceUrl(nino, year) mustBe s"test/service/tai/$nino/employments/years/${year.year}"
++      }
++    }
++
++    "return the URL of the employments API without service URL" when {
++      "no serviceUrl is given" in {
++        sut().employmentServiceUrl(nino, year) mustBe s"/tai/$nino/employments/years/${year.year}"
++      }
++    }
++
++    "call the employments API with a URL containing a service URL" when {
++      "the service URL is supplied" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(oneEmployment)))
++
++        val responseFuture = sut("test/service").employments(nino, year)
++
++        Await.result(responseFuture, 5 seconds)
++        verify(httpHandler)
++          .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
++      }
++    }
++
++    "call the employments API with a URL containing a service URL" when {
++
++      "the service URL is not supplied" in {
++
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(oneEmployment)))
++
++        val responseFuture = sut().employments(nino, year)
++
++        Await.result(responseFuture, 5 seconds)
++
++        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"), any())(any(), any())
++      }
++    }
++
++    "return employments from the employments API" when {
++
++      "api provides one employments" in {
++
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(oneEmployment)))
++
++        val responseFuture = sut().employments(nino, year)
++
++        val result = Await.result(responseFuture, 5 seconds)
++
++        result mustBe oneEmploymentDetails
++
++        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"), any())(any(), any())
++      }
++
++      "api provides multiple employments" in {
++
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(twoEmployments)))
++
++        val responseFuture = sut("test/service").employments(nino, year)
++
++        val result = Await.result(responseFuture, 5 seconds)
++
++        result mustBe twoEmploymentsDetails
++
++        verify(httpHandler)
++          .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
++      }
++    }
++
++    "return nil when api returns zero employments" in {
++
++      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++        .thenReturn(Future.successful(Json.parse(zeroEmployments)))
++
++      val responseFuture = sut("test/service").employments(nino, year)
++
++      val result = Await.result(responseFuture, 5 seconds)
++
++      result mustBe Nil
++
++      verify(httpHandler)
++        .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
++    }
++
++    "throw an exception" when {
++      "invalid json has returned by api" in {
++
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
++
++        val ex = the[RuntimeException] thrownBy Await.result(sut("test/service").employments(nino, year), 5 seconds)
++        ex.getMessage mustBe "Invalid employment json"
++      }
++    }
++
++  }
++
++  "EmploymentsConnector ceasedEmployments" must {
++
++    "return employments from the employments API" when {
++
++      "api provides one employments" in {
++
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(oneCeasedEmployment)))
++
++        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
++
++        val result = Await.result(responseFuture, 5 seconds)
++
++        result mustBe oneCeasedEmploymentDetails
++
++        verify(httpHandler)
++          .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(
++            any(),
++            any()
++          )
++      }
++
++      "api provides multiple employments" in {
++
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(twoCeasedEmployments)))
++
++        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
++
++        val result = Await.result(responseFuture, 5 seconds)
++
++        result mustBe twoCeasedEmploymentsDetails
++
++        verify(httpHandler)
++          .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(
++            any(),
++            any()
++          )
++      }
++    }
++
++    "return nil when api returns zero employments" in {
++
++      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++        .thenReturn(Future.successful(Json.parse(zeroCeasedEmployments)))
++
++      val responseFuture = sut("test/service").ceasedEmployments(nino, year)
++
++      val result = Await.result(responseFuture, 5 seconds)
++
++      result mustBe Nil
++
++      verify(httpHandler)
++        .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(any(), any())
++    }
++
++    "throw an exception" when {
++      "invalid json has returned by api" in {
++
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
++
++        val ex = the[RuntimeException] thrownBy Await
++          .result(sut("test/service").ceasedEmployments(nino, year), 5 seconds)
++        ex.getMessage mustBe "Invalid employment json"
++      }
++    }
++  }
++
++  "EmploymentsConnector employment" must {
++
++    "return service url" in {
++      sut("test").employmentUrl(nino, "123") mustBe s"test/tai/$nino/employments/123"
++    }
++
++    "return an employment from current year" when {
++      "valid id has been passed" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(anEmployment)))
++
++        val result = Await.result(sut().employment(nino, "123"), 5.seconds)
++
++        result mustBe Some(anEmploymentObject)
++        verify(httpHandler, times(1)).getFromApiV2(any(), any())(any(), any())
++      }
++    }
++
++    "return none" when {
++      "invalid json returned by an api" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(zeroEmployments)))
++
++        Await.result(sut().employment(nino, "123"), 5.seconds) mustBe None
++      }
++    }
++  }
++
++  "EmploymentsConnector endEmployment" must {
++    "return an envelope" when {
++      "we send a PUT request to backend" in {
++        val json = Json.obj("data" -> JsString("123-456-789"))
++        when(httpHandler.putToApi(any(), any(), any())(any(), any(), any(), any()))
++          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
++
++        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
++
++        val result = Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
++
++        result mustBe "123-456-789"
++      }
++    }
++
++    "return an exception" when {
++      "json is invalid" in {
++        val json = Json.obj("test" -> JsString("123-456-789"))
++        when(httpHandler.putToApi(any(), any(), any())(any(), any(), any(), any()))
++          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
++        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
++
++        val ex = the[RuntimeException] thrownBy Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
++
++        ex.getMessage mustBe "Invalid json"
++      }
++    }
++  }
++
++  "EmploymentsConnector addEmployment" must {
++    "return an envelope id on a successful invocation" in {
++      val addEmployment = AddEmployment(
++        employerName = "testEmployment",
++        payrollNumber = "12345",
++        startDate = LocalDate.of(2017, 6, 6),
++        telephoneContactAllowed = "Yes",
++        telephoneNumber = Some("123456789")
++      )
++      val json = Json.obj("data" -> JsString("123-456-789"))
++      when(
++        httpHandler
++          .postToApi(meq(sut().addEmploymentServiceUrl(nino)), meq(addEmployment), any())(any(), any(), any(), any())
++      )
++        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
++
++      val result = Await.result(sut().addEmployment(nino, addEmployment), 5.seconds)
++
++      result mustBe Some("123-456-789")
++    }
++  }
++
++  "EmploymentsConnector incorrectEmployment" must {
++    "return an envelope id on a successful invocation" in {
++      val model =
++        IncorrectIncome(whatYouToldUs = "TEST", telephoneContactAllowed = "Yes", telephoneNumber = Some("123456789"))
++      val json = Json.obj("data" -> JsString("123-456-789"))
++      when(
++        httpHandler.postToApi(meq(s"/tai/$nino/employments/1/reason"), meq(model), any())(any(), any(), any(), any())
++      )
++        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
++
++      val result = Await.result(sut().incorrectEmployment(nino, 1, model), 5.seconds)
++
++      result mustBe Some("123-456-789")
++    }
++  }
++
+ }
+Index: test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/BenefitsConnectorSpec.scala	
+@@ -30,50 +30,7 @@
+ 
+ class BenefitsConnectorSpec extends BaseSpec {
+ 
+-  "getCompanyCarBenefits" must {
+-    "fetch the company car details" when {
+-      "provided with valid nino" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(benefitsJson))
+-
+-        val result = sut.benefits(nino, 2018)
+-        Await.result(result, 5 seconds) mustBe benefits
+-      }
+-    }
+-
+-    "thrown exception" when {
+-      "benefit type is invalid" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(invalidBenefitsJson))
+-
+-        val ex = the[RuntimeException] thrownBy Await.result(sut.benefits(nino, 2018), 5 seconds)
+-        ex.getMessage must include(s"Couldn't retrieve benefits for nino: $nino")
+-      }
+-    }
+-  }
+-
+-  "removeCompanyBenefit" must {
+-
+-    "return an envelope id on a successful invocation" in {
+-      val employmentId = 1
+-      val endedCompanyBenefit =
+-        EndedCompanyBenefit("Accommodation", "Before 6th April", Some("1000000"), "Yes", Some("0123456789"))
+-      val json = Json.obj("data" -> JsString("123-456-789"))
+-      when(
+-        httpHandler.postToApi(
+-          meq(
+-            s"${sut.serviceUrl}/tai/$nino/tax-account/tax-component/employments/$employmentId/benefits/ended-benefit"
+-          ),
+-          meq(endedCompanyBenefit)
+-        )(any(), any(), any())
+-      ).thenReturn(Future.successful(HttpResponse.apply(200, json.toString())))
+-
+-      val result = Await.result(sut.endedCompanyBenefit(nino, employmentId, endedCompanyBenefit), 5.seconds)
+-
+-      result mustBe Some("123-456-789")
+-    }
+-
+-  }
+-
+-  val companyCars = List(
++  val companyCars: Seq[CompanyCar] = List(
+     CompanyCar(
+       100,
+       "Make Model",
+@@ -84,9 +41,9 @@
+     )
+   )
+ 
+-  val companyCarBenefit = CompanyCarBenefit(10, 1000, companyCars, Some(1))
+-  val genericBenefit = GenericBenefit(MedicalInsurance, Some(10), 1000)
+-  val benefits = Benefits(Seq(companyCarBenefit), Seq(genericBenefit))
++  val companyCarBenefit: CompanyCarBenefit = CompanyCarBenefit(10, 1000, companyCars, Some(1))
++  val genericBenefit: GenericBenefit = GenericBenefit(MedicalInsurance, Some(10), 1000)
++  val benefits: Benefits = Benefits(Seq(companyCarBenefit), Seq(genericBenefit))
+ 
+   val companyCarsJson: JsObject =
+     Json.obj(
+@@ -132,10 +89,53 @@
+       "links" -> Json.arr()
+     )
+ 
+-  val httpHandler = mock[HttpHandler]
++  val httpHandler: HttpHandler = mock[HttpHandler]
+ 
+   def sut: BenefitsConnector = new BenefitsConnector(httpHandler, servicesConfig) {
+     override val serviceUrl: String = "mockUrl"
+   }
+ 
++  "getCompanyCarBenefits" must {
++    "fetch the company car details" when {
++      "provided with valid nino" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(benefitsJson))
++
++        val result = sut.benefits(nino, 2018)
++        Await.result(result, 5 seconds) mustBe benefits
++      }
++    }
++
++    "thrown exception" when {
++      "benefit type is invalid" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(invalidBenefitsJson))
++
++        val ex = the[RuntimeException] thrownBy Await.result(sut.benefits(nino, 2018), 5 seconds)
++        ex.getMessage must include(s"Couldn't retrieve benefits for nino: $nino")
++      }
++    }
++  }
++
++  "removeCompanyBenefit" must {
++
++    "return an envelope id on a successful invocation" in {
++      val employmentId = 1
++      val endedCompanyBenefit =
++        EndedCompanyBenefit("Accommodation", "Before 6th April", Some("1000000"), "Yes", Some("0123456789"))
++      val json = Json.obj("data" -> JsString("123-456-789"))
++      when(
++        httpHandler.postToApi(
++          meq(
++            s"${sut.serviceUrl}/tai/$nino/tax-account/tax-component/employments/$employmentId/benefits/ended-benefit"
++          ),
++          meq(endedCompanyBenefit),
++          any()
++        )(any(), any(), any(), any())
++      ).thenReturn(Future.successful(HttpResponse.apply(200, json.toString())))
++
++      val result = Await.result(sut.endedCompanyBenefit(nino, employmentId, endedCompanyBenefit), 5.seconds)
++
++      result mustBe Some("123-456-789")
++    }
++
++  }
+ }
+Index: test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala	
+@@ -27,6 +27,8 @@
+ 
+ class SessionConnectorSpec extends BaseSpec with BeforeAndAfterEach {
+ 
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
+   override def beforeEach(): Unit =
+     Mockito.reset(httpHandler)
+ 
+@@ -41,16 +43,14 @@
+ 
+     "call the proper url to invalidate the cache" in {
+       Await.result(sut.invalidateCache(), 5.seconds)
+-      verify(httpHandler, times(1)).deleteFromApi(meq("localhost/tai/session-cache"))(any(), any(), any())
++      verify(httpHandler, times(1)).deleteFromApi(meq("localhost/tai/session-cache"), any())(any(), any())
+     }
+   }
+-
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+ 
+   def sut: SessionConnector = new SessionConnector(httpHandler, servicesConfig) {
+     override val serviceUrl: String = "localhost"
+ 
+-    when(httpHandler.deleteFromApi(any())(any(), any(), any()))
++    when(httpHandler.deleteFromApi(any(), any())(any(), any()))
+       .thenReturn(Future.successful(HttpResponse.apply(200, "")))
+ 
+   }
+Index: app/uk/gov/hmrc/tai/util/Timeout.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/util/Timeout.scala b/app/uk/gov/hmrc/tai/util/Timeout.scala
+deleted file mode 100644
+--- a/app/uk/gov/hmrc/tai/util/Timeout.scala	
++++ /dev/null	
+@@ -1,41 +0,0 @@
+-/*
+- * Copyright 2023 HM Revenue & Customs
+- *
+- * Licensed under the Apache License, Version 2.0 (the "License");
+- * you may not use this file except in compliance with the License.
+- * You may obtain a copy of the License at
+- *
+- *     http://www.apache.org/licenses/LICENSE-2.0
+- *
+- * Unless required by applicable law or agreed to in writing, software
+- * distributed under the License is distributed on an "AS IS" BASIS,
+- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+- * See the License for the specific language governing permissions and
+- * limitations under the License.
+- */
+-
+-package uk.gov.hmrc.tai.util
+-
+-import akka.actor.ActorSystem
+-import play.api.Logging
+-
+-import scala.concurrent._
+-import scala.concurrent.duration._
+-
+-case object FutureEarlyTimeout extends RuntimeException
+-
+-trait Timeout extends Logging {
+-  def system: ActorSystem
+-
+-  def withTimeout[A](timeoutDuration: FiniteDuration)(block: => Future[A])(implicit ec: ExecutionContext): Future[A] = {
+-    val delayedFuture =
+-      akka.pattern.after(timeoutDuration, system.scheduler) {
+-        val exception = new RuntimeException(s"Future took longer than ${timeoutDuration.toSeconds}s")
+-        logger.error(exception.getMessage + "\n" + exception.getStackTrace.mkString("\n"))
+-        Future.failed(FutureEarlyTimeout)
+-      }
+-
+-    Future.firstCompletedOf(Seq(block, delayedFuture))
+-  }
+-  Future.failed(FutureEarlyTimeout)
+-}
+Index: test/uk/gov/hmrc/tai/util/TimeoutSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala b/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala
+deleted file mode 100644
+--- a/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala	
++++ /dev/null	
+@@ -1,59 +0,0 @@
+-/*
+- * Copyright 2023 HM Revenue & Customs
+- *
+- * Licensed under the Apache License, Version 2.0 (the "License");
+- * you may not use this file except in compliance with the License.
+- * You may obtain a copy of the License at
+- *
+- *     http://www.apache.org/licenses/LICENSE-2.0
+- *
+- * Unless required by applicable law or agreed to in writing, software
+- * distributed under the License is distributed on an "AS IS" BASIS,
+- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+- * See the License for the specific language governing permissions and
+- * limitations under the License.
+- */
+-
+-package uk.gov.hmrc.tai.util
+-
+-import akka.actor.ActorSystem
+-import org.scalatest.concurrent.ScalaFutures
+-import utils.{BaseSpec, WireMockHelper}
+-
+-import scala.concurrent.Future
+-import scala.concurrent.duration._
+-
+-class TimeoutSpec extends BaseSpec with ScalaFutures with Timeout with WireMockHelper {
+-
+-  val system = inject[ActorSystem]
+-
+-  implicit val config: PatienceConfig = PatienceConfig(5.seconds)
+-
+-  "Timeout" must {
+-    "not time out within timeout window" in {
+-      val timeoutInSeconds = 2
+-
+-      val result = withTimeout(timeoutInSeconds.seconds) {
+-        akka.pattern.after((timeoutInSeconds - 1).seconds, system.scheduler) {
+-          Future.successful(true)
+-        }
+-      }
+-      result.futureValue mustBe true
+-    }
+-
+-    "time out the request after timeout window" in {
+-
+-      val timeoutInSeconds = 1
+-
+-      val result = withTimeout(timeoutInSeconds.seconds) {
+-        akka.pattern.after((timeoutInSeconds + 1).seconds, system.scheduler) {
+-          Future.successful(true)
+-        }
+-      }
+-
+-      whenReady(result.failed) { e =>
+-        e mustBe FutureEarlyTimeout
+-      }
+-    }
+-  }
+-}
+Index: app/uk/gov/hmrc/tai/model/domain/AddPensionProvider.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/model/domain/AddPensionProvider.scala b/app/uk/gov/hmrc/tai/model/domain/AddPensionProvider.scala
+--- a/app/uk/gov/hmrc/tai/model/domain/AddPensionProvider.scala	
++++ b/app/uk/gov/hmrc/tai/model/domain/AddPensionProvider.scala	
+@@ -16,7 +16,8 @@
+ 
+ package uk.gov.hmrc.tai.model.domain
+ 
+-import play.api.libs.json.{Format, Json}
++import play.api.libs.json.{Format, JsValue, Json, Writes}
++import play.api.libs.ws.BodyWritable
+ 
+ import java.time.LocalDate
+ 
+@@ -30,4 +31,10 @@
+ 
+ object AddPensionProvider {
+   implicit val addPensionProviderFormat: Format[AddPensionProvider] = Json.format[AddPensionProvider]
++  implicit val writes: Writes[AddPensionProvider] = Json.writes[AddPensionProvider]
++
++  implicit def jsonBodyWritable[T](implicit
++    writes: Writes[T],
++    jsValueBodyWritable: BodyWritable[JsValue]
++  ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
+ }
+Index: test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala	
+@@ -29,6 +29,10 @@
+ 
+ class TaxFreeAmountComparisonConnectorSpec extends BaseSpec {
+ 
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
++  def sut = new TaxFreeAmountComparisonConnector(httpHandler, servicesConfig)
++
+   "tax free amount url" must {
+     "fetch the url to connect to TAI to retrieve tax free amount comparison" in {
+       sut.taxFreeAmountComparisonUrl(
+@@ -67,7 +71,7 @@
+ 
+         val taxFreeAmountUrl = s"${sut.serviceUrl}/tai/${nino.nino}/tax-account/tax-free-amount-comparison"
+ 
+-        when(httpHandler.getFromApiV2(meq(taxFreeAmountUrl))(any(), any())).thenReturn(Future.successful(json))
++        when(httpHandler.getFromApiV2(meq(taxFreeAmountUrl), any())(any(), any())).thenReturn(Future.successful(json))
+ 
+         val codingComponents = Seq(CodingComponent(CarBenefit, Some(1), 1, "Car Benefit", Some(1)))
+ 
+@@ -82,7 +86,7 @@
+     "return a BadRequestException" when {
+       "the api responds with invalid json" in {
+         val exceptionMessage = "exception message"
+-        when(httpHandler.getFromApiV2(any())(any(), any()))
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+           .thenReturn(Future.failed(new BadRequestException(exceptionMessage)))
+ 
+         val ex = the[BadRequestException] thrownBy Await.result(sut.taxFreeAmountComparison(nino), 5 seconds)
+@@ -91,9 +95,4 @@
+       }
+     }
+   }
+-
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+-  def sut = new TaxFreeAmountComparisonConnector(httpHandler, servicesConfig)
+-
+ }
+Index: app/uk/gov/hmrc/tai/model/domain/IncorrectPensionProvider.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/model/domain/IncorrectPensionProvider.scala b/app/uk/gov/hmrc/tai/model/domain/IncorrectPensionProvider.scala
+--- a/app/uk/gov/hmrc/tai/model/domain/IncorrectPensionProvider.scala	
++++ b/app/uk/gov/hmrc/tai/model/domain/IncorrectPensionProvider.scala	
+@@ -16,7 +16,8 @@
+ 
+ package uk.gov.hmrc.tai.model.domain
+ 
+-import play.api.libs.json.{Format, Json}
++import play.api.libs.json.{Format, JsValue, Json, Writes}
++import play.api.libs.ws.BodyWritable
+ 
+ case class IncorrectPensionProvider(
+   whatYouToldUs: String,
+@@ -26,4 +27,10 @@
+ 
+ object IncorrectPensionProvider {
+   implicit val formats: Format[IncorrectPensionProvider] = Json.format[IncorrectPensionProvider]
++  implicit val writes: Writes[IncorrectPensionProvider] = Json.writes[IncorrectPensionProvider]
++
++  implicit def jsonBodyWritable[T](implicit
++    writes: Writes[T],
++    jsValueBodyWritable: BodyWritable[JsValue]
++  ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
+ }
+Index: app/uk/gov/hmrc/tai/model/domain/UpdateTaxCodeIncomeRequest.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/model/domain/UpdateTaxCodeIncomeRequest.scala b/app/uk/gov/hmrc/tai/model/domain/UpdateTaxCodeIncomeRequest.scala
+--- a/app/uk/gov/hmrc/tai/model/domain/UpdateTaxCodeIncomeRequest.scala	
++++ b/app/uk/gov/hmrc/tai/model/domain/UpdateTaxCodeIncomeRequest.scala	
+@@ -16,10 +16,17 @@
+ 
+ package uk.gov.hmrc.tai.model.domain
+ 
+-import play.api.libs.json.{Json, OFormat}
++import play.api.libs.json.{JsValue, Json, OFormat, Writes}
++import play.api.libs.ws.BodyWritable
+ 
+ case class UpdateTaxCodeIncomeRequest(amount: Int)
+ 
+ object UpdateTaxCodeIncomeRequest {
+   implicit val formats: OFormat[UpdateTaxCodeIncomeRequest] = Json.format[UpdateTaxCodeIncomeRequest]
++  implicit val writes: Writes[UpdateTaxCodeIncomeRequest] = Json.writes[UpdateTaxCodeIncomeRequest]
++
++  implicit def jsonBodyWritable[T](implicit
++    writes: Writes[T],
++    jsValueBodyWritable: BodyWritable[JsValue]
++  ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
+ }
+Index: test/uk/gov/hmrc/tai/connectors/TaxCodeChangeConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/TaxCodeChangeConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TaxCodeChangeConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/TaxCodeChangeConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/TaxCodeChangeConnectorSpec.scala	
+@@ -30,6 +30,10 @@
+ 
+ class TaxCodeChangeConnectorSpec extends BaseSpec {
+ 
++  private def sut = new TaxCodeChangeConnector(httpHandler, servicesConfig)
++
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
+   "tax code change url" must {
+     "fetch the url to connect to TAI to retrieve tax code change" in {
+       sut.taxCodeChangeUrl(nino.nino) mustBe s"${sut.serviceUrl}/tai/${nino.nino}/tax-account/tax-code-change"
+@@ -49,9 +53,9 @@
+           startDate.plusDays(1),
+           OtherBasisOfOperation,
+           "Employer 1",
+-          false,
++          pensionIndicator = false,
+           Some("1234"),
+-          true
++          primary = true
+         )
+         val taxCodeRecord2 = taxCodeRecord1.copy(startDate = startDate.plusDays(2), endDate = TaxYear().end)
+ 
+@@ -86,7 +90,7 @@
+         )
+ 
+         val expectedResult = TaxCodeChange(List(taxCodeRecord1), List(taxCodeRecord2))
+-        when(httpHandler.getFromApiV2(meq(taxCodeChangeUrl))(any(), any())).thenReturn(Future.successful(json))
++        when(httpHandler.getFromApiV2(meq(taxCodeChangeUrl), any())(any(), any())).thenReturn(Future.successful(json))
+ 
+         val result = Await.result(sut.taxCodeChange(nino), 5 seconds)
+         result mustEqual expectedResult
+@@ -100,7 +104,7 @@
+ 
+         val expectedMessage = s"GET of '$taxCodeChangeUrl' returned 500. Response body: ''"
+ 
+-        when(httpHandler.getFromApiV2(meq(taxCodeChangeUrl))(any(), any()))
++        when(httpHandler.getFromApiV2(meq(taxCodeChangeUrl), any())(any(), any()))
+           .thenReturn(Future.failed(new RuntimeException(expectedMessage)))
+ 
+         val ex = the[RuntimeException] thrownBy Await.result(sut.taxCodeChange(nino), 5 seconds)
+@@ -122,9 +126,9 @@
+         startDate.plusDays(1),
+         OtherBasisOfOperation,
+         "Employer 1",
+-        false,
++        pensionIndicator = false,
+         Some("1234"),
+-        true
++        primary = true
+       )
+       val taxCodeRecord2 = TaxCodeRecord(
+         "code2",
+@@ -132,9 +136,9 @@
+         startDate.plusDays(1),
+         OtherBasisOfOperation,
+         "Employer 2",
+-        false,
++        pensionIndicator = false,
+         Some("1239"),
+-        true
++        primary = true
+       )
+ 
+       val json = Json.obj(
+@@ -165,7 +169,8 @@
+ 
+       val expectedResult = List(taxCodeRecord, taxCodeRecord2)
+ 
+-      when(httpHandler.getFromApiV2(meq(latestTaxCodeRecordUrl))(any(), any())).thenReturn(Future.successful(json))
++      when(httpHandler.getFromApiV2(meq(latestTaxCodeRecordUrl), any())(any(), any()))
++        .thenReturn(Future.successful(json))
+ 
+       val result = Await.result(sut.lastTaxCodeRecords(nino, TaxYear().prev), 5 seconds)
+       result mustEqual expectedResult
+@@ -181,7 +186,8 @@
+         "links" -> JsArray(List())
+       )
+ 
+-      when(httpHandler.getFromApiV2(meq(latestTaxCodeRecordUrl))(any(), any())).thenReturn(Future.successful(json))
++      when(httpHandler.getFromApiV2(meq(latestTaxCodeRecordUrl), any())(any(), any()))
++        .thenReturn(Future.successful(json))
+ 
+       val result = Await.result(sut.lastTaxCodeRecords(nino, TaxYear().prev), 5 seconds)
+       result mustEqual List.empty
+@@ -192,7 +198,7 @@
+         val year = TaxYear().prev.year
+         val latestTaxCodeRecordUrl = s"${sut.serviceUrl}/tai/${nino.nino}/tax-account/$year/tax-code/latest"
+         val expectedMessage = s"Couldn't retrieve tax code records for $nino for year $year with exception: bad request"
+-        when(httpHandler.getFromApiV2(meq(latestTaxCodeRecordUrl))(any(), any()))
++        when(httpHandler.getFromApiV2(meq(latestTaxCodeRecordUrl), any())(any(), any()))
+           .thenReturn(Future.failed(new BadRequestException(expectedMessage)))
+ 
+         val expected = the[BadRequestException] thrownBy Await
+@@ -220,7 +226,7 @@
+ 
+         val json = Future.successful(Json.toJson(true))
+ 
+-        when(httpHandler.getFromApiV2(meq(hasTaxCodeChangedUrl))(any(), any())).thenReturn(json)
++        when(httpHandler.getFromApiV2(meq(hasTaxCodeChangedUrl), any())(any(), any())).thenReturn(json)
+ 
+         val result = Await.result(sut.hasTaxCodeChanged(nino), 5 seconds)
+         result mustEqual true
+@@ -238,8 +244,4 @@
+     }
+   }
+ 
+-  private def sut = new TaxCodeChangeConnector(httpHandler, servicesConfig)
+-
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+ }
+Index: app/uk/gov/hmrc/tai/model/domain/benefits/EndedCompanyBenefit.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/model/domain/benefits/EndedCompanyBenefit.scala b/app/uk/gov/hmrc/tai/model/domain/benefits/EndedCompanyBenefit.scala
+--- a/app/uk/gov/hmrc/tai/model/domain/benefits/EndedCompanyBenefit.scala	
++++ b/app/uk/gov/hmrc/tai/model/domain/benefits/EndedCompanyBenefit.scala	
+@@ -16,7 +16,8 @@
+ 
+ package uk.gov.hmrc.tai.model.domain.benefits
+ 
+-import play.api.libs.json.{Format, Json}
++import play.api.libs.json.{Format, JsValue, Json, Writes}
++import play.api.libs.ws.BodyWritable
+ 
+ case class EndedCompanyBenefit(
+   benefitType: String,
+@@ -28,4 +29,10 @@
+ 
+ object EndedCompanyBenefit {
+   implicit val formats: Format[EndedCompanyBenefit] = Json.format[EndedCompanyBenefit]
++  implicit val writes: Writes[EndedCompanyBenefit] = Json.writes[EndedCompanyBenefit]
++
++  implicit def jsonBodyWritable[T](implicit
++    writes: Writes[T],
++    jsValueBodyWritable: BodyWritable[JsValue]
++  ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
+ }
+Index: test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala	
+@@ -30,25 +30,33 @@
+ 
+ class JourneyCacheConnectorSpec extends BaseSpec {
+ 
++  private val journeyName = "journey1"
++
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
++  def sut: JourneyCacheConnector = new JourneyCacheConnector(httpHandler, servicesConfig) {
++    override val serviceUrl: String = "mockUrl"
++  }
++
+   "currentCache" must {
+ 
+     "return the map of current cached values [String, String], as returned from the api call" in {
+       val cacheString = """{"key1":"value1","key2":"value2"}"""
+-      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(cacheString)))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(Json.parse(cacheString)))
+ 
+       val expectedResult = Map("key1" -> "value1", "key2" -> "value2")
+       val result = Await.result(sut.currentCache(journeyName), 5 seconds)
+       result mustBe expectedResult
+     }
+     "trap a NO CONTENT exception (a valid business scenario), and return an empty map in its place" in {
+-      when(httpHandler.getFromApiV2(any())(any(), any()))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+         .thenReturn(Future.failed(new HttpException("no cache was found", NO_CONTENT)))
+ 
+       val result = Await.result(sut.currentCache(journeyName), 5 seconds)
+       result mustBe Map.empty[String, String]
+     }
+     "expose any exception that is not a NOT FOUND type" in {
+-      when(httpHandler.getFromApiV2(any())(any(), any()))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+         .thenReturn(Future.failed(new InternalServerException("something terminal")))
+ 
+       val thrown = the[InternalServerException] thrownBy Await.result(sut.currentCache(journeyName), 5 seconds)
+@@ -59,9 +67,9 @@
+   "currentValueAs" must {
+ 
+     "return the cached value transformed by the supplied function" in {
+-      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("1")))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("1")))
+ 
+-      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("2017-03-04")))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("2017-03-04")))
+       Await.result(
+         sut.currentValueAs[LocalDate](journeyName, "dateValKey", string => LocalDate.parse(string)),
+         5 seconds
+@@ -69,7 +77,7 @@
+     }
+ 
+     "trap a NO CONTENT exception (a valid business scenario), and return None in its place" in {
+-      when(httpHandler.getFromApiV2(any())(any(), any()))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+         .thenReturn(Future.failed(new HttpException("key wasn't found in cache", NO_CONTENT)))
+ 
+       val result = Await.result(sut.currentValueAs[String](journeyName, "key1", string => string), 5 seconds)
+@@ -77,7 +85,7 @@
+     }
+ 
+     "expose an exception that is not a NOT FOUND type" in {
+-      when(httpHandler.getFromApiV2(any())(any(), any()))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+         .thenReturn(Future.failed(new InternalServerException("something terminal")))
+ 
+       val thrown = the[InternalServerException] thrownBy Await
+@@ -89,7 +97,7 @@
+   "mandatoryJourneyValueAs" must {
+ 
+     "return the requested values where present" in {
+-      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("true")))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("true")))
+       Await.result(
+         sut.mandatoryJourneyValueAs[Boolean](journeyName, "booleanValKey", string => string.toBoolean),
+         5 seconds
+@@ -97,7 +105,7 @@
+     }
+ 
+     "return an error message when the requested value is not found" in {
+-      when(httpHandler.getFromApiV2(any())(any(), any()))
++      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+         .thenReturn(Future.failed(new HttpException("key wasn't found in cache", NO_CONTENT)))
+ 
+       val expectedMsg = "The mandatory value under key 'key1' was not found in the journey cache for 'journey1'"
+@@ -114,7 +122,7 @@
+       val newValuesToCache = Map("key1" -> "value1", "key2" -> "value2")
+       val updatedCacheJson = """{"key1":"value1","key2":"value2","key7":"value7"}"""
+       val updatedCacheMap = Map("key1" -> "value1", "key2" -> "value2", "key7" -> "value7")
+-      when(httpHandler.postToApi(any(), any())(any(), any(), any()))
++      when(httpHandler.postToApi(any(), any(), any())(any(), any(), any(), any()))
+         .thenReturn(Future.successful(HttpResponse(OK, updatedCacheJson)))
+ 
+       val result = Await.result(sut.cache(journeyName, newValuesToCache), 5 seconds)
+@@ -126,7 +134,7 @@
+     "remove journey cache data for company car journey" in {
+       val url = s"${sut.cacheUrl(journeyName)}"
+ 
+-      when(httpHandler.deleteFromApi(meq(url))(any(), any(), any()))
++      when(httpHandler.deleteFromApi(meq(url), any())(any(), any()))
+         .thenReturn(Future.successful(HttpResponse.apply(NO_CONTENT, "")))
+ 
+       val result = Await.result(sut.flush(journeyName), 5 seconds)
+@@ -138,7 +146,7 @@
+     "remove journey cache data for company car journey" in {
+       val url = s"${sut.cacheUrl(s"$journeyName/1")}"
+ 
+-      when(httpHandler.deleteFromApi(meq(url))(any(), any(), any()))
++      when(httpHandler.deleteFromApi(meq(url), any())(any(), any()))
+         .thenReturn(Future.successful(HttpResponse.apply(NO_CONTENT, "")))
+ 
+       val result = Await.result(sut.flushWithEmpId(journeyName, 1), 5 seconds)
+@@ -146,12 +154,4 @@
+     }
+   }
+ 
+-  private val journeyName = "journey1"
+-
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+-  def sut: JourneyCacheConnector = new JourneyCacheConnector(httpHandler, servicesConfig) {
+-    override val serviceUrl: String = "mockUrl"
+-  }
+-
+ }
+Index: app/uk/gov/hmrc/tai/connectors/TrackingConnector.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/connectors/TrackingConnector.scala b/app/uk/gov/hmrc/tai/connectors/TrackingConnector.scala
+--- a/app/uk/gov/hmrc/tai/connectors/TrackingConnector.scala	
++++ b/app/uk/gov/hmrc/tai/connectors/TrackingConnector.scala	
+@@ -16,27 +16,23 @@
+ 
+ package uk.gov.hmrc.tai.connectors
+ 
+-import akka.actor.ActorSystem
+ import play.api.Logging
+-import uk.gov.hmrc.http.HeaderCarrier
++import uk.gov.hmrc.http.{GatewayTimeoutException, HeaderCarrier}
+ import uk.gov.hmrc.play.bootstrap.config.ServicesConfig
+ import uk.gov.hmrc.tai.config.ApplicationConfig
+ import uk.gov.hmrc.tai.model.domain.tracking.TrackedForm
+ import uk.gov.hmrc.tai.model.domain.tracking.formatter.TrackedFormFormatters
+-import uk.gov.hmrc.tai.util.{FutureEarlyTimeout, Timeout}
+ 
+ import javax.inject.Inject
+-import scala.concurrent.duration._
+ import scala.concurrent.{ExecutionContext, Future}
+ import scala.util.control.NonFatal
+ 
+ class TrackingConnector @Inject() (
+   httpHandler: HttpHandler,
+   servicesConfig: ServicesConfig,
+-  applicationConfig: ApplicationConfig,
+-  override val system: ActorSystem
++  applicationConfig: ApplicationConfig
+ )(implicit ec: ExecutionContext)
+-    extends TrackedFormFormatters with Timeout with Logging {
++    extends TrackedFormFormatters with Logging {
+ 
+   lazy val serviceUrl: String = servicesConfig.baseUrl("tracking")
+ 
+@@ -46,16 +42,14 @@
+ 
+   def getUserTracking(nino: String)(implicit hc: HeaderCarrier): Future[Seq[TrackedForm]] =
+     if (applicationConfig.trackingEnabled) {
+-      withTimeout(5.seconds) {
+-        (httpHandler.getFromApiV2(trackingUrl(nino)) map (_.as[Seq[TrackedForm]](trackedFormSeqReads))).recover {
+-          case NonFatal(x) =>
+-            logger.warn(
+-              s"Tracking service returned error, therefore returning an empty response. Error: ${x.getMessage}"
+-            )
+-            Seq.empty[TrackedForm]
+-        }
+-      }.recover { case FutureEarlyTimeout =>
+-        Seq.empty[TrackedForm]
++      (httpHandler.getFromApiV2(trackingUrl(nino), Some(5)) map (_.as[Seq[TrackedForm]](trackedFormSeqReads))).recover {
++        case NonFatal(x) =>
++          logger.warn(
++            s"Tracking service returned error, therefore returning an empty response. Error: ${x.getMessage}"
++          )
++          Seq.empty[TrackedForm]
++        case _: GatewayTimeoutException =>
++          Seq.empty[TrackedForm]
+       }
+     } else {
+       Future.successful(Seq.empty[TrackedForm])
+Index: test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala	
+@@ -27,6 +27,8 @@
+ 
+ class PreviousYearsIncomeConnectorSpec extends BaseSpec {
+ 
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
+   "PreviousYearsIncomeConnector" must {
+ 
+     "return an envelope id on a successful invocation" in {
+@@ -35,7 +37,7 @@
+       val json = Json.obj("data" -> JsString("123-456-789"))
+       when(
+         httpHandler
+-          .postToApi(meq(s"/tai/$nino/employments/years/2016/update"), meq(model))(any(), any(), any())
++          .postToApi(meq(s"/tai/$nino/employments/years/2016/update"), meq(model), any())(any(), any(), any(), any())
+       )
+         .thenReturn(Future.successful(HttpResponse.apply(200, json.toString)))
+ 
+@@ -46,8 +48,6 @@
+ 
+   }
+ 
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+   def sut(servUrl: String = ""): PreviousYearsIncomeConnector =
+     new PreviousYearsIncomeConnector(httpHandler, servicesConfig) {
+       override val serviceUrl: String = servUrl
+Index: app/uk/gov/hmrc/tai/model/domain/Employment.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/model/domain/Employment.scala b/app/uk/gov/hmrc/tai/model/domain/Employment.scala
+--- a/app/uk/gov/hmrc/tai/model/domain/Employment.scala	
++++ b/app/uk/gov/hmrc/tai/model/domain/Employment.scala	
+@@ -16,7 +16,8 @@
+ 
+ package uk.gov.hmrc.tai.model.domain
+ 
+-import play.api.libs.json.{Format, Json}
++import play.api.libs.json.{Format, JsValue, Json, Writes}
++import play.api.libs.ws.BodyWritable
+ import uk.gov.hmrc.tai.model.domain.income.TaxCodeIncomeSourceStatus
+ 
+ import java.time.LocalDate
+@@ -54,6 +55,12 @@
+ object AddEmployment {
+ 
+   implicit val addEmploymentFormat: Format[AddEmployment] = Json.format[AddEmployment]
++  implicit val writes: Writes[AddEmployment] = Json.writes[AddEmployment]
++
++  implicit def jsonBodyWritable[T](implicit
++    writes: Writes[T],
++    jsValueBodyWritable: BodyWritable[JsValue]
++  ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
+ }
+ 
+ case class EndEmployment(endDate: LocalDate, telephoneContactAllowed: String, telephoneNumber: Option[String])
+@@ -61,10 +68,23 @@
+ object EndEmployment {
+ 
+   implicit val addEmploymentFormat: Format[EndEmployment] = Json.format[EndEmployment]
++  implicit val writes: Writes[EndEmployment] = Json.writes[EndEmployment]
++
++  implicit def jsonBodyWritable[T](implicit
++    writes: Writes[T],
++    jsValueBodyWritable: BodyWritable[JsValue]
++  ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
++
+ }
+ 
+ case class IncorrectIncome(whatYouToldUs: String, telephoneContactAllowed: String, telephoneNumber: Option[String])
+ 
+ object IncorrectIncome {
+   implicit val formats: Format[IncorrectIncome] = Json.format[IncorrectIncome]
++  implicit val writes: Writes[IncorrectIncome] = Json.writes[IncorrectIncome]
++
++  implicit def jsonBodyWritable[T](implicit
++    writes: Writes[T],
++    jsValueBodyWritable: BodyWritable[JsValue]
++  ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
+ }
+Index: test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala	
+@@ -16,7 +16,6 @@
+ 
+ package uk.gov.hmrc.tai.connectors
+ 
+-import akka.actor.ActorSystem
+ import org.mockito.ArgumentMatchers.any
+ import org.mockito.Mockito
+ import org.scalatest.BeforeAndAfterEach
+@@ -30,46 +29,6 @@
+ 
+ class TrackingConnectorSpec extends BaseSpec with BeforeAndAfterEach with ScalaFutures {
+ 
+-  override def beforeEach(): Unit =
+-    Mockito.reset(httpHandler)
+-
+-  "Tracking Url" should {
+-    "fetch the correct service url" when {
+-      "given an id and idType" in {
+-        sut.trackingUrl(nino.nino) mustBe s"mockUrl/tracking-data/user/nino/${nino.nino}"
+-      }
+-    }
+-  }
+-
+-  "getUserTracking" should {
+-    "fetch the user tracking details" when {
+-      "provided with id and idType" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(trackedFormSeqJson)))
+-
+-        val result = sut.getUserTracking(nino.nino)
+-        result.futureValue mustBe trackedFormSeq
+-      }
+-    }
+-
+-    "return an empty response" when {
+-      "json is not valid" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse("""{}""")))
+-
+-        val result = sut.getUserTracking(nino.nino)
+-        result.futureValue mustBe Seq.empty[TrackedForm]
+-      }
+-
+-      "getFromApiV2 throws" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.failed(new LockedException("locked")))
+-
+-        val result = sut.getUserTracking(nino.nino)
+-        result.futureValue mustBe Seq.empty[TrackedForm]
+-      }
+-    }
+-
+-  }
+-
+   val trackedFormSeqJson =
+     """{"submissions":[{"formId":"R39_EN","formName":"TES1","dfsSubmissionReference":"123-ABCD-456","businessArea":"PSA",
+                         "receivedDate":"01 Apr 2016","completionDate":"06 May 2016",
+@@ -88,12 +47,52 @@
+                            {"milestone": "Done","status": "incomplete"}
+                          ]}]}"""
+ 
+-  val trackedFormSeq =
++  val trackedFormSeq: Seq[TrackedForm] =
+     Seq(TrackedForm("R39_EN", "TES1", TrackedFormReceived), TrackedForm("R38_EN", "TES2", TrackedFormAcquired))
+ 
+   val httpHandler: HttpHandler = mock[HttpHandler]
+ 
+-  def sut: TrackingConnector = new TrackingConnector(httpHandler, servicesConfig, appConfig, inject[ActorSystem]) {
++  def sut: TrackingConnector = new TrackingConnector(httpHandler, servicesConfig, appConfig) {
+     override lazy val serviceUrl: String = "mockUrl"
++  }
++  override def beforeEach(): Unit =
++    Mockito.reset(httpHandler)
++
++  "Tracking Url" should {
++    "fetch the correct service url" when {
++      "given an id and idType" in {
++        sut.trackingUrl(nino.nino) mustBe s"mockUrl/tracking-data/user/nino/${nino.nino}"
++      }
++    }
++  }
++
++  "getUserTracking" should {
++    "fetch the user tracking details" when {
++      "provided with id and idType" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(trackedFormSeqJson)))
++
++        val result = sut.getUserTracking(nino.nino)
++        result.futureValue mustBe trackedFormSeq
++      }
++    }
++
++    "return an empty response" when {
++      "json is not valid" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(Json.parse("""{}""")))
++
++        val result = sut.getUserTracking(nino.nino)
++        result.futureValue mustBe Seq.empty[TrackedForm]
++      }
++
++      "getFromApiV2 throws" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.failed(new LockedException("locked")))
++
++        val result = sut.getUserTracking(nino.nino)
++        result.futureValue mustBe Seq.empty[TrackedForm]
++      }
++    }
++
+   }
+ }
+Index: test/uk/gov/hmrc/tai/connectors/PersonConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/PersonConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/PersonConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/PersonConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/PersonConnectorSpec.scala	
+@@ -17,7 +17,7 @@
+ package uk.gov.hmrc.tai.connectors
+ 
+ import org.mockito.ArgumentMatchers.{any, eq => meq}
+-import play.api.libs.json.{JsResultException, Json}
++import play.api.libs.json.{JsObject, JsResultException, Json}
+ import uk.gov.hmrc.http.NotFoundException
+ import uk.gov.hmrc.tai.model.domain.Person
+ import utils.BaseSpec
+@@ -26,12 +26,21 @@
+ import scala.concurrent.{Await, Future}
+ 
+ class PersonConnectorSpec extends BaseSpec {
++  def apiResponse(person: Person): JsObject = Json.obj("data" -> Json.toJson(person))
++
++  val person: Person = fakePerson(nino)
++
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
++  def sut: PersonConnector = new PersonConnector(httpHandler, servicesConfig) {
++    override val serviceUrl: String = "/fakeUrl"
++  }
+ 
+   "person method" must {
+ 
+     "return a Person model instance" when {
+       "the http call returns successfully" in {
+-        when(httpHandler.getFromApiV2(meq(s"/fakeUrl/tai/${nino.nino}/person"))(any(), any()))
++        when(httpHandler.getFromApiV2(meq(s"/fakeUrl/tai/${nino.nino}/person"), any())(any(), any()))
+           .thenReturn(Future.successful(apiResponse(person)))
+ 
+         val result = Await.result(sut.person(nino), 5.seconds)
+@@ -41,7 +50,7 @@
+ 
+     "return a Failed Future" when {
+       "the http call returns a not found exception" in {
+-        when(httpHandler.getFromApiV2(meq(s"/fakeUrl/tai/${nino.nino}/person"))(any(), any()))
++        when(httpHandler.getFromApiV2(meq(s"/fakeUrl/tai/${nino.nino}/person"), any())(any(), any()))
+           .thenReturn(Future.failed(new NotFoundException("downstream not found")))
+         assertThrows[NotFoundException] {
+           Await.result(sut.person(nino), 5.seconds)
+@@ -50,7 +59,7 @@
+ 
+       "the http call returns invalid json" in {
+         val invalidJson = Json.obj("data" -> Json.obj("notEven" -> "close"))
+-        when(httpHandler.getFromApiV2(meq(s"/fakeUrl/tai/${nino.nino}/person"))(any(), any()))
++        when(httpHandler.getFromApiV2(meq(s"/fakeUrl/tai/${nino.nino}/person"), any())(any(), any()))
+           .thenReturn(Future.successful(invalidJson))
+         assertThrows[JsResultException] {
+           Await.result(sut.person(nino), 5.seconds)
+@@ -59,14 +68,4 @@
+     }
+   }
+ 
+-  def apiResponse(person: Person) = Json.obj("data" -> Json.toJson(person))
+-
+-  val person = fakePerson(nino)
+-
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+-  def sut: PersonConnector = new PersonConnector(httpHandler, servicesConfig) {
+-    override val serviceUrl: String = "/fakeUrl"
+-  }
+-
+ }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]1/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]1/shelved.patch
new file mode 100644
--- /dev/null	(date 1696950767475)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]1/shelved.patch	(date 1696950767475)
@@ -0,0 +1,897 @@
+Index: app/uk/gov/hmrc/tai/connectors/HttpHandler.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala b/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala
+--- a/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala	
++++ b/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala	
+@@ -19,14 +19,17 @@
+ import cats.data.EitherT
+ import play.api.Logging
+ import play.api.http.Status._
+-import play.api.libs.json.{JsValue, Writes}
+-import uk.gov.hmrc.http._
+-import uk.gov.hmrc.play.bootstrap.http.DefaultHttpClient
++import play.api.libs.json.JsValue
++import play.api.libs.ws.BodyWritable
++import uk.gov.hmrc.http.{BadRequestException, _}
++import uk.gov.hmrc.http.client.HttpClientV2
+ 
+ import javax.inject.Inject
++import scala.concurrent.duration.DurationInt
+ import scala.concurrent.{ExecutionContext, Future}
++import scala.reflect.runtime.universe.TypeTag
+ 
+-class HttpHandler @Inject() (val http: DefaultHttpClient) extends HttpErrorFunctions with Logging {
++class HttpHandler @Inject() (val http: HttpClientV2) extends HttpErrorFunctions with Logging {
+ 
+   def read(
+     response: Future[Either[UpstreamErrorResponse, HttpResponse]]
+@@ -48,19 +51,38 @@
+       Left(UpstreamErrorResponse(exception.message, 502, 502))
+     })
+ 
+-  def getFromApiV2(url: String)(implicit hc: HeaderCarrier, ec: ExecutionContext): Future[JsValue] = {
+-    implicit val httpRds = new HttpReads[HttpResponse] {
++  def getFromApiV2(url: String, timeoutInSec: Option[Int] = None)(implicit
++    hc: HeaderCarrier,
++    ec: ExecutionContext
++  ): Future[JsValue] = {
++    implicit val httpRds: HttpReads[HttpResponse] = new HttpReads[HttpResponse] {
+       def customRead(http: String, url: String, response: HttpResponse): HttpResponse =
+         response.status match {
+           case UNAUTHORIZED => response
+-          case _            => handleResponse(http, url)(response)
++          case _ =>
++            handleResponseEither(http, url)(response).fold(
++              error =>
++                if (error.statusCode == BAD_REQUEST) {
++                  throw new BadRequestException("bad request")
++                } else if (error.statusCode == NOT_FOUND) {
++                  throw new NotFoundException("not found")
++                } else {
++                  throw error
++                },
++              httpResponse => httpResponse
++            )
+         }
+ 
+-      def read(http: String, url: String, res: HttpResponse) = customRead(http, url, res)
++      def read(http: String, url: String, res: HttpResponse): HttpResponse = customRead(http, url, res)
+     }
+ 
+-    val futureResponse = http.GET[HttpResponse](url)
++    val httpCall = if (timeoutInSec.isDefined) {
++      http.get(url"$url").transform(_.withRequestTimeout(timeoutInSec.get.seconds))
++    } else {
++      http.get(url"$url")
++    }
+ 
++    val futureResponse = httpCall.execute[HttpResponse]
+     futureResponse.flatMap { httpResponse =>
+       httpResponse.status match {
+ 
+@@ -94,68 +116,97 @@
+     }
+   }
+ 
+-  def putToApi[I](url: String, data: I)(implicit
++  def putToApi[I: TypeTag](url: String, data: I, timeoutInSec: Option[Int] = None)(implicit
+     hc: HeaderCarrier,
+-    writes: Writes[I],
+-    executionContext: ExecutionContext
+-  ): Future[HttpResponse] =
+-    http.PUT[I, HttpResponse](url, data).flatMap { httpResponse =>
+-      httpResponse.status match {
++    executionContext: ExecutionContext,
++    jsValueBodyWritable: BodyWritable[I]
++  ): Future[HttpResponse] = {
++
++    val httpCall = if (timeoutInSec.isDefined) {
++      http.put(url"$url")(hc).withBody(data).transform(_.withRequestTimeout(timeoutInSec.get.seconds))
++    } else {
++      http.put(url"$url")(hc).withBody(data)
++    }
++
++    httpCall
++      .execute[HttpResponse]
++      .flatMap { httpResponse =>
++        httpResponse.status match {
+ 
+-        case OK =>
+-          Future.successful(httpResponse)
++          case OK =>
++            Future.successful(httpResponse)
+ 
+-        case NOT_FOUND =>
+-          logger.warn(s"HttpHandler - No data can be found")
+-          Future.failed(new NotFoundException(httpResponse.body))
++          case NOT_FOUND =>
++            logger.warn(s"HttpHandler - No data can be found")
++            Future.failed(new NotFoundException(httpResponse.body))
+ 
+-        case INTERNAL_SERVER_ERROR =>
+-          logger.warn(s"HttpHandler - Internal Server Error received")
+-          Future.failed(new InternalServerException(httpResponse.body))
++          case INTERNAL_SERVER_ERROR =>
++            logger.warn(s"HttpHandler - Internal Server Error received")
++            Future.failed(new InternalServerException(httpResponse.body))
+ 
+-        case BAD_REQUEST =>
+-          logger.warn(s"HttpHandler - Bad Request received")
+-          Future.failed(new BadRequestException(httpResponse.body))
++          case BAD_REQUEST =>
++            logger.warn(s"HttpHandler - Bad Request received")
++            Future.failed(new BadRequestException(httpResponse.body))
+ 
+-        case _ =>
+-          logger.warn(s"HttpHandler - Server error received")
+-          Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++          case _ =>
++            logger.warn(s"HttpHandler - Server error received")
++            Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++        }
+       }
+-    }
++  }
+ 
+-  def postToApi[I](url: String, data: I)(implicit
++  def postToApi[I: TypeTag](url: String, data: I, timeoutInSec: Option[Int] = None)(implicit
+     hc: HeaderCarrier,
+-    writes: Writes[I],
+-    executionContext: ExecutionContext
+-  ): Future[HttpResponse] =
+-    http.POST[I, HttpResponse](url, data) flatMap { httpResponse =>
+-      httpResponse.status match {
+-        case OK | CREATED =>
+-          Future.successful(httpResponse)
++    executionContext: ExecutionContext,
++    jsValueBodyWritable: BodyWritable[I]
++  ): Future[HttpResponse] = {
++
++    val httpCall = if (timeoutInSec.isDefined) {
++      http.post(url"$url")(hc).withBody(data).transform(_.withRequestTimeout(timeoutInSec.get.seconds))
++    } else {
++      http.post(url"$url")(hc).withBody(data)
++    }
++
++    httpCall
++      .execute[HttpResponse]
++      .flatMap { httpResponse =>
++        httpResponse.status match {
++          case OK | CREATED =>
++            Future.successful(httpResponse)
+ 
+-        case _ =>
+-          logger.warn(
+-            s"HttpHandler - Error received with status: ${httpResponse.status} and body: ${httpResponse.body}"
+-          )
+-          Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++          case _ =>
++            logger.warn(
++              s"HttpHandler - Error received with status: ${httpResponse.status} and body: ${httpResponse.body}"
++            )
++            Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++        }
+       }
+-    }
++  }
+ 
+-  def deleteFromApi(url: String)(implicit
++  def deleteFromApi(url: String, timeoutInSec: Option[Int] = None)(implicit
+     hc: HeaderCarrier,
+-    rds: HttpReads[HttpResponse],
+     executionContext: ExecutionContext
+-  ): Future[HttpResponse] =
+-    http.DELETE[HttpResponse](url) flatMap { httpResponse =>
+-      httpResponse.status match {
+-        case OK | NO_CONTENT | ACCEPTED =>
+-          Future.successful(httpResponse)
+-        case _ =>
+-          logger.warn(
+-            s"HttpHandler - Error received with status: ${httpResponse.status} and body: ${httpResponse.body}"
+-          )
+-          Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++  ): Future[HttpResponse] = {
++
++    val httpCall = if (timeoutInSec.isDefined) {
++      http.delete(url"$url").transform(_.withRequestTimeout(timeoutInSec.get.seconds))
++    } else {
++      http.delete(url"$url")
++    }
++
++    httpCall
++      .execute[HttpResponse]
++      .flatMap { httpResponse =>
++        httpResponse.status match {
++          case OK | NO_CONTENT | ACCEPTED =>
++            Future.successful(httpResponse)
++          case _ =>
++            logger.warn(
++              s"HttpHandler - Error received with status: ${httpResponse.status} and body: ${httpResponse.body}"
++            )
++            Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++        }
+       }
+-    }
++  }
+ 
+ }
+Index: test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala	
+@@ -30,66 +30,6 @@
+ 
+ class CompanyCarConnectorSpec extends BaseSpec {
+ 
+-  "Company car url" should {
+-    "fetch the correct Url" in {
+-      sut
+-        .companyCarEmploymentUrl(
+-          nino,
+-          employmentId
+-        ) mustBe s"${sut.serviceUrl}/tai/$nino/tax-account/tax-components/employments/$employmentId/benefits/company-car"
+-    }
+-  }
+-
+-  "getCompanyCarBenefits" should {
+-    "fetch the company car details" when {
+-      "provided with valid nino" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(companyCarForEmploymentJson))
+-
+-        val result = sut.companyCarBenefitForEmployment(nino, employmentId)
+-        Await.result(result, 5 seconds) mustBe Some(companyCar)
+-      }
+-    }
+-
+-    "thrown exception" when {
+-      "tai sends an invalid json" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(corruptJsonResponse))
+-
+-        val ex = the[JsResultException] thrownBy Await
+-          .result(sut.companyCarBenefitForEmployment(nino, employmentId), 5 seconds)
+-        ex.getMessage must include("List(JsonValidationError(List(error.path.missing)")
+-      }
+-    }
+-  }
+-
+-  "companyCarsForCurrentYearEmployments" must {
+-    "return CompanyCarBenefit" when {
+-      "provided with valid nino" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(companyCars))
+-
+-        val result = sut.companyCarsForCurrentYearEmployments(nino)
+-        Await.result(result, 5 seconds) mustBe Seq(companyCar)
+-      }
+-    }
+-
+-    "return empty sequence of company car benefit" when {
+-      "company car service returns no car" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(emptyCompanyCars))
+-
+-        val result = sut.companyCarsForCurrentYearEmployments(nino)
+-        Await.result(result, 5 seconds) mustBe Seq.empty[CompanyCarBenefit]
+-      }
+-
+-      "company car service returns a failure response" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any()))
+-          .thenReturn(Future.failed(new HttpException("company car strange response", UNPROCESSABLE_ENTITY)))
+-
+-        val result = sut.companyCarsForCurrentYearEmployments(nino)
+-        Await.result(result, 5 seconds) mustBe Seq.empty[CompanyCarBenefit]
+-      }
+-    }
+-
+-  }
+-
+   val companyCar: CompanyCarBenefit = CompanyCarBenefit(
+     10,
+     1000,
+@@ -171,4 +111,64 @@
+     override val serviceUrl: String = "mockUrl"
+   }
+ 
++  "Company car url" should {
++    "fetch the correct Url" in {
++      sut
++        .companyCarEmploymentUrl(
++          nino,
++          employmentId
++        ) mustBe s"${sut.serviceUrl}/tai/$nino/tax-account/tax-components/employments/$employmentId/benefits/company-car"
++    }
++  }
++
++  "getCompanyCarBenefits" should {
++    "fetch the company car details" when {
++      "provided with valid nino" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(companyCarForEmploymentJson))
++
++        val result = sut.companyCarBenefitForEmployment(nino, employmentId)
++        Await.result(result, 5 seconds) mustBe Some(companyCar)
++      }
++    }
++
++    "thrown exception" when {
++      "tai sends an invalid json" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(corruptJsonResponse))
++
++        val ex = the[JsResultException] thrownBy Await
++          .result(sut.companyCarBenefitForEmployment(nino, employmentId), 5 seconds)
++        ex.getMessage must include("List(JsonValidationError(List(error.path.missing)")
++      }
++    }
++  }
++
++  "companyCarsForCurrentYearEmployments" must {
++    "return CompanyCarBenefit" when {
++      "provided with valid nino" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(companyCars))
++
++        val result = sut.companyCarsForCurrentYearEmployments(nino)
++        Await.result(result, 5 seconds) mustBe Seq(companyCar)
++      }
++    }
++
++    "return empty sequence of company car benefit" when {
++      "company car service returns no car" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(emptyCompanyCars))
++
++        val result = sut.companyCarsForCurrentYearEmployments(nino)
++        Await.result(result, 5 seconds) mustBe Seq.empty[CompanyCarBenefit]
++      }
++
++      "company car service returns a failure response" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.failed(new HttpException("company car strange response", UNPROCESSABLE_ENTITY)))
++
++        val result = sut.companyCarsForCurrentYearEmployments(nino)
++        Await.result(result, 5 seconds) mustBe Seq.empty[CompanyCarBenefit]
++      }
++    }
++
++  }
+ }
+Index: test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala	
+@@ -28,6 +28,8 @@
+ 
+ class PensionProviderConnectorSpec extends BaseSpec {
+ 
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
+   "PensionProviderConnector addPensionProvider" must {
+     "return an envelope id on a successful invocation" in {
+       val addPensionProvider =
+@@ -35,7 +37,12 @@
+       val json = Json.obj("data" -> JsString("123-456-789"))
+       when(
+         httpHandler
+-          .postToApi(meq(sut.addPensionProviderServiceUrl(nino)), meq(addPensionProvider))(any(), any(), any())
++          .postToApi(meq(sut.addPensionProviderServiceUrl(nino)), meq(addPensionProvider), any())(
++            any(),
++            any(),
++            any(),
++            any()
++          )
+       )
+         .thenReturn(Future.successful(HttpResponse.apply(200, json.toString())))
+ 
+@@ -54,11 +61,13 @@
+       )
+       val json = Json.obj("data" -> JsString("123-456-789"))
+       when(
+-        httpHandler.postToApi(meq(sut.incorrectPensionProviderServiceUrl(nino, 1)), meq(incorrectPensionProvider))(
+-          any(),
+-          any(),
+-          any()
+-        )
++        httpHandler
++          .postToApi(meq(sut.incorrectPensionProviderServiceUrl(nino, 1)), meq(incorrectPensionProvider), any())(
++            any(),
++            any(),
++            any(),
++            any()
++          )
+       )
+         .thenReturn(Future.successful(HttpResponse.apply(200, json.toString())))
+ 
+@@ -68,8 +77,6 @@
+     }
+   }
+ 
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+   def sut: PensionProviderConnector = new PensionProviderConnector(httpHandler, servicesConfig) {
+     override val serviceUrl: String = "testUrl"
+   }
+Index: test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala b/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala	
+@@ -19,7 +19,8 @@
+ import com.github.tomakehurst.wiremock.client.WireMock._
+ import org.scalatest.concurrent.{IntegrationPatience, ScalaFutures}
+ import play.api.http.Status._
+-import play.api.libs.json.{Format, Json}
++import play.api.libs.json.{Format, JsValue, Json, OFormat, Writes}
++import play.api.libs.ws.BodyWritable
+ import uk.gov.hmrc.http._
+ import utils.{BaseSpec, WireMockHelper}
+ 
+@@ -30,12 +31,12 @@
+ 
+ class HttpHandlerSpec extends BaseSpec with WireMockHelper with ScalaFutures with IntegrationPatience {
+ 
+-  lazy val httpHandler = inject[HttpHandler]
++  lazy val httpHandler: HttpHandler = inject[HttpHandler]
+ 
+-  lazy val testUrl = server.url("/")
++  lazy val testUrl: String = server.url("/")
+ 
+   protected case class ResponseObject(name: String, age: Int)
+-  implicit val responseObjectFormat = Json.format[ResponseObject]
++  implicit val responseObjectFormat: OFormat[ResponseObject] = Json.format[ResponseObject]
+ 
+   private val responseBodyObject = ResponseObject("Name", 24)
+ 
+@@ -44,6 +45,13 @@
+   object DateRequest {
+ 
+     implicit val formatDateRequest: Format[DateRequest] = Json.format[DateRequest]
++
++    implicit val writes: Writes[DateRequest] = Json.writes[DateRequest]
++
++    implicit def jsonBodyWritable[T](implicit
++      writes: Writes[T],
++      jsValueBodyWritable: BodyWritable[JsValue]
++    ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
+   }
+ 
+   "getFromApiV2" must {
+Index: test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala	
+@@ -56,6 +56,211 @@
+   lazy val nonTaxCodeIncomeUrl = s"/tai/$nino/tax-account/${currentTaxYear.year}/income"
+   lazy val totalTaxUrl = s"/tai/$nino/tax-account/${currentTaxYear.year}/total-tax"
+ 
++  private val currentTaxYear = TaxYear()
++
++  def ninoAsString: String = nino.value
++
++  val taxCodeIncomeJson: JsValue = Json.obj(
++    "data" -> JsArray(
++      Seq(
++        Json.obj(
++          "componentType"  -> "EmploymentIncome",
++          "employmentId"   -> 1,
++          "amount"         -> 1111,
++          "description"    -> "employment",
++          "taxCode"        -> "1150L",
++          "name"           -> "Employer1",
++          "basisOperation" -> "OtherBasisOperation",
++          "status"         -> "Live"
++        )
++      )
++    ),
++    "links" -> JsArray(Seq())
++  )
++
++  val incomeSourceJson: JsValue = Json.obj(
++    "data" -> Json.arr(
++      Json.obj(
++        "taxCodeIncome" -> Json.obj(
++          "componentType"                 -> "EmploymentIncome",
++          "employmentId"                  -> 1,
++          "amount"                        -> 1111,
++          "description"                   -> "employment",
++          "taxCode"                       -> "1150L",
++          "name"                          -> "Employer1",
++          "basisOperation"                -> "OtherBasisOperation",
++          "status"                        -> "Live",
++          "inYearAdjustmentIntoCY"        -> 0,
++          "totalInYearAdjustment"         -> 0,
++          "inYearAdjustmentIntoCYPlusOne" -> 0
++        ),
++        "employment" -> Json.obj(
++          "name"                         -> "company name",
++          "employmentStatus"             -> "Live",
++          "payrollNumber"                -> "888",
++          "startDate"                    -> "2019-05-26",
++          "annualAccounts"               -> Json.arr(),
++          "taxDistrictNumber"            -> "",
++          "payeNumber"                   -> "",
++          "sequenceNumber"               -> 1,
++          "cessationPay"                 -> 100,
++          "hasPayrolledBenefit"          -> false,
++          "receivingOccupationalPension" -> true
++        )
++      )
++    )
++  )
++
++  val incomeSourceEmpty: JsValue = Json.obj(
++    "data" -> Json.arr()
++  )
++
++  val codingComponentSampleJson: JsValue = Json.obj(
++    "data" -> Json.arr(
++      Json.obj(
++        "componentType" -> "EmployerProvidedServices",
++        "employmentId"  -> 12,
++        "amount"        -> 12321,
++        "description"   -> "Some Description",
++        "iabdCategory"  -> "Benefit"
++      ),
++      Json.obj(
++        "componentType" -> "GiftsSharesCharity",
++        "employmentId"  -> 31,
++        "amount"        -> 12345,
++        "description"   -> "Some Description Some",
++        "iabdCategory"  -> "Allowance"
++      )
++    ),
++    "links" -> Json.arr()
++  )
++
++  val corruptJsonResponse: JsValue = Json.obj(
++    "data" -> JsArray(
++      Seq(
++        Json.obj(
++          "employmentId"   -> 1,
++          "amount"         -> 1111,
++          "description"    -> "employment",
++          "taxCode"        -> "1150L",
++          "name"           -> "Employer1",
++          "basisOperation" -> "OtherBasisOperation"
++        )
++      )
++    ),
++    "links" -> JsArray(Seq())
++  )
++
++  val incomeJson: JsValue = Json.obj(
++    "data" -> Json.obj(
++      "taxCodeIncomes" -> JsArray(),
++      "nonTaxCodeIncomes" -> Json.obj(
++        "otherNonTaxCodeIncomes" -> Json.arr(
++          Json.obj(
++            "incomeComponentType" -> "Profit",
++            "amount"              -> 100,
++            "description"         -> "Profit"
++          )
++        )
++      )
++    ),
++    "links" -> Json.arr()
++  )
++
++  private val totalTaxJson = Json.obj(
++    "data" -> Json.obj(
++      "amount" -> 1000,
++      "incomeCategories" -> Json.arr(
++        Json.obj(
++          "incomeCategoryType" -> "UkDividendsIncomeCategory",
++          "totalTax"           -> 10,
++          "totalTaxableIncome" -> 20,
++          "totalIncome"        -> 30,
++          "taxBands" -> Json.arr(
++            Json.obj(
++              "bandType" -> "",
++              "code"     -> "",
++              "income"   -> 0,
++              "tax"      -> 0,
++              "rate"     -> 0
++            ),
++            Json.obj(
++              "bandType"  -> "B",
++              "code"      -> "BR",
++              "income"    -> 10000,
++              "tax"       -> 500,
++              "lowerBand" -> 5000,
++              "upperBand" -> 20000,
++              "rate"      -> 10
++            )
++          )
++        )
++      ),
++      "reliefsGivingBackTax" -> Json.obj(
++        "amount" -> 100,
++        "taxAdjustmentComponents" -> Json.arr(
++          Json.obj(
++            "taxAdjustmentType"   -> "EnterpriseInvestmentSchemeRelief",
++            "taxAdjustmentAmount" -> 100
++          )
++        )
++      ),
++      "otherTaxDue" -> Json.obj(
++        "amount" -> 100,
++        "taxAdjustmentComponents" -> Json.arr(
++          Json.obj(
++            "taxAdjustmentType"   -> "ExcessGiftAidTax",
++            "taxAdjustmentAmount" -> 100
++          )
++        )
++      ),
++      "alreadyTaxedAtSource" -> Json.obj(
++        "amount" -> 100,
++        "taxAdjustmentComponents" -> Json.arr(
++          Json.obj(
++            "taxAdjustmentType"   -> "TaxOnBankBSInterest",
++            "taxAdjustmentAmount" -> 100
++          )
++        )
++      )
++    ),
++    "links" -> Json.arr()
++  )
++
++  private val income = uk.gov.hmrc.tai.model.domain.income.Incomes(
++    Seq.empty[TaxCodeIncome],
++    NonTaxCodeIncome(
++      None,
++      Seq(
++        OtherNonTaxCodeIncome(Profit, None, 100, "Profit")
++      )
++    )
++  )
++
++  val taxCodeIncome: TaxCodeIncome =
++    TaxCodeIncome(EmploymentIncome, Some(1), 1111, "employment", "1150L", "Employer1", OtherBasisOfOperation, Live)
++  val employment: Employment = Employment(
++    "company name",
++    Live,
++    Some("888"),
++    LocalDate.of(2019, 5, 26),
++    None,
++    Seq.empty[AnnualAccount],
++    "",
++    "",
++    1,
++    Some(BigDecimal(100)),
++    hasPayrolledBenefit = false,
++    receivingOccupationalPension = true
++  )
++  val codingComponentSeq: Seq[CodingComponent] = Seq(
++    CodingComponent(EmployerProvidedServices, Some(12), 12321, "Some Description"),
++    CodingComponent(GiftsSharesCharity, Some(31), 12345, "Some Description Some")
++  )
++  val incomeSource: TaxedIncome = TaxedIncome(taxCodeIncome, employment)
++
++  lazy val taxAccountConnector = new TaxAccountConnector(inject[HttpHandler], servicesConfig)
++
+   "tax account url" must {
+     "fetch the url to connect to TAI to retrieve tax codes" in {
+       taxAccountConnector
+@@ -466,209 +671,4 @@
+       }
+     }
+   }
+-
+-  private val currentTaxYear = TaxYear()
+-
+-  def ninoAsString: String = nino.value
+-
+-  val taxCodeIncomeJson: JsValue = Json.obj(
+-    "data" -> JsArray(
+-      Seq(
+-        Json.obj(
+-          "componentType"  -> "EmploymentIncome",
+-          "employmentId"   -> 1,
+-          "amount"         -> 1111,
+-          "description"    -> "employment",
+-          "taxCode"        -> "1150L",
+-          "name"           -> "Employer1",
+-          "basisOperation" -> "OtherBasisOperation",
+-          "status"         -> "Live"
+-        )
+-      )
+-    ),
+-    "links" -> JsArray(Seq())
+-  )
+-
+-  val incomeSourceJson: JsValue = Json.obj(
+-    "data" -> Json.arr(
+-      Json.obj(
+-        "taxCodeIncome" -> Json.obj(
+-          "componentType"                 -> "EmploymentIncome",
+-          "employmentId"                  -> 1,
+-          "amount"                        -> 1111,
+-          "description"                   -> "employment",
+-          "taxCode"                       -> "1150L",
+-          "name"                          -> "Employer1",
+-          "basisOperation"                -> "OtherBasisOperation",
+-          "status"                        -> "Live",
+-          "inYearAdjustmentIntoCY"        -> 0,
+-          "totalInYearAdjustment"         -> 0,
+-          "inYearAdjustmentIntoCYPlusOne" -> 0
+-        ),
+-        "employment" -> Json.obj(
+-          "name"                         -> "company name",
+-          "employmentStatus"             -> "Live",
+-          "payrollNumber"                -> "888",
+-          "startDate"                    -> "2019-05-26",
+-          "annualAccounts"               -> Json.arr(),
+-          "taxDistrictNumber"            -> "",
+-          "payeNumber"                   -> "",
+-          "sequenceNumber"               -> 1,
+-          "cessationPay"                 -> 100,
+-          "hasPayrolledBenefit"          -> false,
+-          "receivingOccupationalPension" -> true
+-        )
+-      )
+-    )
+-  )
+-
+-  val incomeSourceEmpty: JsValue = Json.obj(
+-    "data" -> Json.arr()
+-  )
+-
+-  val codingComponentSampleJson: JsValue = Json.obj(
+-    "data" -> Json.arr(
+-      Json.obj(
+-        "componentType" -> "EmployerProvidedServices",
+-        "employmentId"  -> 12,
+-        "amount"        -> 12321,
+-        "description"   -> "Some Description",
+-        "iabdCategory"  -> "Benefit"
+-      ),
+-      Json.obj(
+-        "componentType" -> "GiftsSharesCharity",
+-        "employmentId"  -> 31,
+-        "amount"        -> 12345,
+-        "description"   -> "Some Description Some",
+-        "iabdCategory"  -> "Allowance"
+-      )
+-    ),
+-    "links" -> Json.arr()
+-  )
+-
+-  val corruptJsonResponse: JsValue = Json.obj(
+-    "data" -> JsArray(
+-      Seq(
+-        Json.obj(
+-          "employmentId"   -> 1,
+-          "amount"         -> 1111,
+-          "description"    -> "employment",
+-          "taxCode"        -> "1150L",
+-          "name"           -> "Employer1",
+-          "basisOperation" -> "OtherBasisOperation"
+-        )
+-      )
+-    ),
+-    "links" -> JsArray(Seq())
+-  )
+-
+-  val incomeJson: JsValue = Json.obj(
+-    "data" -> Json.obj(
+-      "taxCodeIncomes" -> JsArray(),
+-      "nonTaxCodeIncomes" -> Json.obj(
+-        "otherNonTaxCodeIncomes" -> Json.arr(
+-          Json.obj(
+-            "incomeComponentType" -> "Profit",
+-            "amount"              -> 100,
+-            "description"         -> "Profit"
+-          )
+-        )
+-      )
+-    ),
+-    "links" -> Json.arr()
+-  )
+-
+-  private val totalTaxJson = Json.obj(
+-    "data" -> Json.obj(
+-      "amount" -> 1000,
+-      "incomeCategories" -> Json.arr(
+-        Json.obj(
+-          "incomeCategoryType" -> "UkDividendsIncomeCategory",
+-          "totalTax"           -> 10,
+-          "totalTaxableIncome" -> 20,
+-          "totalIncome"        -> 30,
+-          "taxBands" -> Json.arr(
+-            Json.obj(
+-              "bandType" -> "",
+-              "code"     -> "",
+-              "income"   -> 0,
+-              "tax"      -> 0,
+-              "rate"     -> 0
+-            ),
+-            Json.obj(
+-              "bandType"  -> "B",
+-              "code"      -> "BR",
+-              "income"    -> 10000,
+-              "tax"       -> 500,
+-              "lowerBand" -> 5000,
+-              "upperBand" -> 20000,
+-              "rate"      -> 10
+-            )
+-          )
+-        )
+-      ),
+-      "reliefsGivingBackTax" -> Json.obj(
+-        "amount" -> 100,
+-        "taxAdjustmentComponents" -> Json.arr(
+-          Json.obj(
+-            "taxAdjustmentType"   -> "EnterpriseInvestmentSchemeRelief",
+-            "taxAdjustmentAmount" -> 100
+-          )
+-        )
+-      ),
+-      "otherTaxDue" -> Json.obj(
+-        "amount" -> 100,
+-        "taxAdjustmentComponents" -> Json.arr(
+-          Json.obj(
+-            "taxAdjustmentType"   -> "ExcessGiftAidTax",
+-            "taxAdjustmentAmount" -> 100
+-          )
+-        )
+-      ),
+-      "alreadyTaxedAtSource" -> Json.obj(
+-        "amount" -> 100,
+-        "taxAdjustmentComponents" -> Json.arr(
+-          Json.obj(
+-            "taxAdjustmentType"   -> "TaxOnBankBSInterest",
+-            "taxAdjustmentAmount" -> 100
+-          )
+-        )
+-      )
+-    ),
+-    "links" -> Json.arr()
+-  )
+-
+-  private val income = uk.gov.hmrc.tai.model.domain.income.Incomes(
+-    Seq.empty[TaxCodeIncome],
+-    NonTaxCodeIncome(
+-      None,
+-      Seq(
+-        OtherNonTaxCodeIncome(Profit, None, 100, "Profit")
+-      )
+-    )
+-  )
+-
+-  val taxCodeIncome =
+-    TaxCodeIncome(EmploymentIncome, Some(1), 1111, "employment", "1150L", "Employer1", OtherBasisOfOperation, Live)
+-  val employment = Employment(
+-    "company name",
+-    Live,
+-    Some("888"),
+-    LocalDate.of(2019, 5, 26),
+-    None,
+-    Seq.empty[AnnualAccount],
+-    "",
+-    "",
+-    1,
+-    Some(BigDecimal(100)),
+-    hasPayrolledBenefit = false,
+-    receivingOccupationalPension = true
+-  )
+-  val codingComponentSeq = Seq(
+-    CodingComponent(EmployerProvidedServices, Some(12), 12321, "Some Description"),
+-    CodingComponent(GiftsSharesCharity, Some(31), 12345, "Some Description Some")
+-  )
+-  val incomeSource = TaxedIncome(taxCodeIncome, employment)
+-
+-  lazy val taxAccountConnector = new TaxAccountConnector(inject[HttpHandler], servicesConfig)
+ }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023__16_12__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023__16_12__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023__16_12__Changes_.xml
new file mode 100644
--- /dev/null	(date 1696950855649)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023__16_12__Changes_.xml	(date 1696950855649)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]" date="1696950747401" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10/10/2023, 16:12 [Changes]" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023__16_12__Changes_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023__16_12__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023__16_12__Changes_1.xml
new file mode 100644
--- /dev/null	(date 1696950855689)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023__16_12__Changes_1.xml	(date 1696950855689)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]1" date="1696950767475" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2023,_16_12_[Changes]1/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10/10/2023, 16:12 [Changes]" />
+</changelist>
\ No newline at end of file
Index: .idea/modules/tai-frontend.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/tai-frontend.iml b/.idea/modules/tai-frontend.iml
--- a/.idea/modules/tai-frontend.iml	
+++ b/.idea/modules/tai-frontend.iml	(date 1696950887940)
@@ -38,7 +38,7 @@
     <orderEntry type="library" name="sbt: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.2:jar" level="project" />
     <orderEntry type="library" name="sbt: com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.2:jar" level="project" />
     <orderEntry type="library" name="sbt: com.fasterxml.jackson.module:jackson-module-scala_2.13:2.13.2:jar" level="project" />
-    <orderEntry type="library" name="sbt: com.github.ben-manes.caffeine:caffeine:2.8.8:jar" level="project" />
+    <orderEntry type="library" name="sbt: com.github.ben-manes.caffeine:caffeine:2.9.3:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: com.github.jknack:handlebars-helpers:4.3.1:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: com.github.jknack:handlebars:4.3.1:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: com.github.tomakehurst:wiremock-jre8:2.35.0:jar" level="project" />
@@ -80,10 +80,10 @@
     <orderEntry type="library" name="sbt: com.typesafe.play:play-cache_2.13:2.8.19:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe.play:play-ehcache_2.13:2.8.19:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe.play:play-exceptions:2.8.19:jar" level="project" />
-    <orderEntry type="library" name="sbt: com.typesafe.play:play-functional_2.13:2.8.2:jar" level="project" />
+    <orderEntry type="library" name="sbt: com.typesafe.play:play-functional_2.13:2.9.4:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe.play:play-guice_2.13:2.8.19:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe.play:play-joda-forms_2.13:2.8.19:jar" level="project" />
-    <orderEntry type="library" name="sbt: com.typesafe.play:play-json_2.13:2.8.2:jar" level="project" />
+    <orderEntry type="library" name="sbt: com.typesafe.play:play-json_2.13:2.9.4:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe.play:play-logback_2.13:2.8.19:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe.play:play-server_2.13:2.8.19:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe.play:play-streams_2.13:2.8.19:jar" level="project" />
@@ -195,7 +195,7 @@
     <orderEntry type="library" scope="TEST" name="sbt: org.apache.pdfbox:xmpbox:2.0.24:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.atteo.classindex:classindex:3.4:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.brotli:dec:0.1.2:jar" level="project" />
-    <orderEntry type="library" name="sbt: org.checkerframework:checker-qual:3.12.0:jar" level="project" />
+    <orderEntry type="library" name="sbt: org.checkerframework:checker-qual:3.19.0:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.eclipse.jetty.http2:http2-common:9.4.49.v20220914:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.eclipse.jetty.http2:http2-hpack:9.4.49.v20220914:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.eclipse.jetty.http2:http2-server:9.4.49.v20220914:jar" level="project" />
@@ -242,6 +242,7 @@
     <orderEntry type="library" scope="TEST" name="sbt: org.objenesis:objenesis:3.2:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.ow2.asm:asm:9.4:jar" level="project" />
     <orderEntry type="library" name="sbt: org.reactivestreams:reactive-streams:1.0.4:jar" level="project" />
+    <orderEntry type="library" name="sbt: org.scala-lang.modules:scala-collection-compat_2.13:2.10.0:jar" level="project" />
     <orderEntry type="library" name="sbt: org.scala-lang.modules:scala-java8-compat_2.13:1.0.2:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.scala-lang.modules:scala-parallel-collections_2.13:1.0.4:jar" level="project" />
     <orderEntry type="library" name="sbt: org.scala-lang.modules:scala-parser-combinators_2.13:1.1.2:jar" level="project" />
@@ -275,16 +276,14 @@
     <orderEntry type="library" name="sbt: org.typelevel:cats-free_2.13:2.0.0:jar" level="project" />
     <orderEntry type="library" name="sbt: org.typelevel:cats-kernel_2.13:2.10.0:jar" level="project" />
     <orderEntry type="library" name="sbt: org.typelevel:cats-macros_2.13:2.0.0:jar" level="project" />
-    <orderEntry type="library" name="sbt: org.webjars.npm:accessible-autocomplete:2.0.4:jar" level="project" />
-    <orderEntry type="library" name="sbt: org.webjars.npm:govuk-frontend:4.6.0:jar" level="project" />
-    <orderEntry type="library" name="sbt: org.webjars.npm:preact:8.5.3:jar" level="project" />
+    <orderEntry type="library" name="sbt: org.webjars.npm:govuk-frontend:4.7.0:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.xmlunit:xmlunit-core:2.9.0:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.xmlunit:xmlunit-legacy:2.9.0:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: org.xmlunit:xmlunit-placeholders:2.9.0:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: ru.vyarus:generics-resolver:3.0.3:jar" level="project" />
     <orderEntry type="library" name="sbt: uk.gov.hmrc.mongo:hmrc-mongo-common_2.13:1.3.0:jar" level="project" />
     <orderEntry type="library" name="sbt: uk.gov.hmrc.mongo:hmrc-mongo-play-28_2.13:1.3.0:jar" level="project" />
-    <orderEntry type="library" name="sbt: uk.gov.hmrc.webjars:hmrc-frontend:5.31.0:jar" level="project" />
+    <orderEntry type="library" name="sbt: uk.gov.hmrc.webjars:hmrc-frontend:5.46.0:jar" level="project" />
     <orderEntry type="library" name="sbt: uk.gov.hmrc:auth-client_2.13:5.12.0-play-28:jar" level="project" />
     <orderEntry type="library" name="sbt: uk.gov.hmrc:bootstrap-common-play-28_2.13:7.19.0:jar" level="project" />
     <orderEntry type="library" name="sbt: uk.gov.hmrc:bootstrap-frontend-play-28_2.13:7.19.0:jar" level="project" />
@@ -301,10 +300,11 @@
     <orderEntry type="library" name="sbt: uk.gov.hmrc:mongo-feature-toggles-client_2.13:0.3.0:jar" level="project" />
     <orderEntry type="library" name="sbt: uk.gov.hmrc:play-auditing-play-28_2.13:8.6.0:jar" level="project" />
     <orderEntry type="library" name="sbt: uk.gov.hmrc:play-conditional-form-mapping_2.13:1.13.0-play-28:jar" level="project" />
-    <orderEntry type="library" name="sbt: uk.gov.hmrc:play-frontend-hmrc_2.13:7.7.0-play-28:jar" level="project" />
-    <orderEntry type="library" name="sbt: uk.gov.hmrc:play-frontend-pta_2.13:0.5.0:jar" level="project" />
-    <orderEntry type="library" name="sbt: uk.gov.hmrc:play-language_2.13:6.1.0-play-28:jar" level="project" />
-    <orderEntry type="library" name="sbt: uk.gov.hmrc:play-partials_2.13:8.3.0-play-28:jar" level="project" />
+    <orderEntry type="library" name="sbt: uk.gov.hmrc:play-frontend-hmrc_2.13:7.19.0-play-28:jar" level="project" />
+    <orderEntry type="library" name="sbt: uk.gov.hmrc:play-frontend-pta_2.13:0.4.0:jar" level="project" />
+    <orderEntry type="library" name="sbt: uk.gov.hmrc:play-language_2.13:6.2.0-play-28:jar" level="project" />
+    <orderEntry type="library" name="sbt: uk.gov.hmrc:play-partials_2.13:8.4.0-play-28:jar" level="project" />
+    <orderEntry type="library" name="sbt: uk.gov.hmrc:sca-wrapper_2.13:1.0.44:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: xalan:serializer:2.7.2:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: xalan:xalan:2.7.2:jar" level="project" />
     <orderEntry type="library" scope="TEST" name="sbt: xerces:xercesImpl:2.12.0:jar" level="project" />
Index: .idea/modules/tai-frontend-build.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/tai-frontend-build.iml b/.idea/modules/tai-frontend-build.iml
--- a/.idea/modules/tai-frontend-build.iml	
+++ b/.idea/modules/tai-frontend-build.iml	(date 1696950887954)
@@ -101,12 +101,12 @@
           <root url="jar://$USER_HOME$/.sbt/boot/scala-2.12.16/org.scala-sbt/sbt/1.7.2/zinc-persist-core-assembly-1.7.2.jar!/" />
           <root url="jar://$USER_HOME$/.sbt/boot/scala-2.12.16/org.scala-sbt/sbt/1.7.2/zinc-persist_2.12-1.7.2.jar!/" />
           <root url="jar://$USER_HOME$/.sbt/boot/scala-2.12.16/org.scala-sbt/sbt/1.7.2/zinc_2.12-1.7.2.jar!/" />
-          <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/ivy2/uk.gov.hmrc/sbt-auto-build/scala_2.12/sbt_1.0/3.9.0/jars/sbt-auto-build.jar!/" />
+          <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/ivy2/uk.gov.hmrc/sbt-auto-build/scala_2.12/sbt_1.0/3.14.0/jars/sbt-auto-build.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/ivy2/uk.gov.hmrc/sbt-distributables/scala_2.12/sbt_1.0/2.2.0/jars/sbt-distributables.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/ivy2/uk.gov.hmrc/sbt-git-stamp/scala_2.12/sbt_1.0/6.2.0/jars/sbt-git-stamp.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/ivy2/uk.gov.hmrc/sbt-git-versioning/scala_2.12/sbt_1.0/2.4.0/jars/sbt-git-versioning.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/ivy2/uk.gov.hmrc/sbt-setting-keys/scala_2.12/sbt_1.0/0.3.0/jars/sbt-setting-keys.jar!/" />
-          <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/ivy2/uk.gov.hmrc/sbt-settings/scala_2.12/sbt_1.0/4.13.0/jars/sbt-settings.jar!/" />
+          <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/ivy2/uk.gov.hmrc/sbt-settings/scala_2.12/sbt_1.0/4.15.0/jars/sbt-settings.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/open.artefacts.tax.service.gov.uk/maven2/uk/gov/hmrc/release-versioning_2.12/0.17.0/release-versioning_2.12-0.17.0.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo.scala-sbt.org/scalasbt/sbt-plugin-releases/com.eed3si9n/sbt-buildinfo/scala_2.12/sbt_1.0/0.7.0/jars/sbt-buildinfo.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo.scala-sbt.org/scalasbt/sbt-plugin-releases/com.lightbend.sbt/sbt-javaagent/scala_2.12/sbt_1.0/0.1.5/jars/sbt-javaagent.jar!/" />
@@ -142,7 +142,7 @@
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/twirl-parser_2.12/1.5.1/twirl-parser_2.12-1.5.1.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/commons-codec/commons-codec/1.15/commons-codec-1.15.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar!/" />
-          <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/de/heikoseeberger/sbt-header_2.12_1.0/5.7.0/sbt-header-5.7.0.jar!/" />
+          <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/de/heikoseeberger/sbt-header_2.12_1.0/5.10.0/sbt-header-5.10.0.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/apigee/trireme/trireme-core/0.9.4/trireme-core-0.9.4.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/apigee/trireme/trireme-kernel/0.9.4/trireme-kernel-0.9.4.jar!/" />
           <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/apigee/trireme/trireme-node10src/0.9.4/trireme-node10src-0.9.4.jar!/" />
@@ -216,7 +216,7 @@
   </component>
   <component name="SbtModule">
     <option name="buildForURI" value="file:$MODULE_DIR$/../../" />
-    <option name="imports" value="SUB:DOLLAR564b726a848dbb5d6d46.`microservice`, _root_.sbt.Keys._, _root_.sbt.ScriptedPlugin.autoImport._, _root_.sbt.plugins.JUnitXmlReportPlugin.autoImport._, _root_.sbt.plugins.MiniDependencyTreePlugin.autoImport._, _root_.play.sbt.Play.autoImport._, _root_.play.sbt.PlayService.autoImport._, _root_.play.sbt.routes.RoutesCompiler.autoImport._, _root_.org.scalastyle.sbt.ScalastylePlugin.autoImport._, _root_.scoverage.ScoverageSbtPlugin.autoImport._, _root_.org.scalafmt.sbt.ScalafmtPlugin.autoImport._, _root_.org.irundaia.sbt.sass.SbtSassify.autoImport._, _root_.net.ground5hark.sbt.concat.SbtConcat.autoImport._, _root_.com.typesafe.sbt.uglify.SbtUglify.autoImport._, _root_.play.twirl.sbt.SbtTwirl.autoImport._, _root_.com.typesafe.sbt.SbtNativePackager.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.JavaAppPackaging.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.jar.ClasspathJarPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.jlink.JlinkPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemdPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin.autoImport._, _root_.com.typesafe.sbt.packager.debian.DebianPlugin.autoImport._, _root_.com.typesafe.sbt.packager.docker.DockerPlugin.autoImport._, _root_.com.typesafe.sbt.packager.graalvmnativeimage.GraalVMNativeImagePlugin.autoImport._, _root_.com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin.autoImport._, _root_.com.typesafe.sbt.packager.linux.LinuxPlugin.autoImport._, _root_.com.typesafe.sbt.packager.rpm.RpmPlugin.autoImport._, _root_.com.typesafe.sbt.packager.universal.UniversalPlugin.autoImport._, _root_.com.typesafe.sbt.packager.windows.WindowsPlugin.autoImport._, _root_.com.lightbend.sbt.javaagent.JavaAgent.autoImport._, _root_.com.typesafe.sbt.web.SbtWeb.autoImport._, _root_.com.typesafe.sbt.jse.SbtJsEngine.autoImport._, _root_.com.typesafe.sbt.jse.SbtJsTask.autoImport._, _root_.de.heikoseeberger.sbtheader.AutomateHeaderPlugin.autoImport._, _root_.de.heikoseeberger.sbtheader.HeaderPlugin.autoImport._, _root_.uk.gov.hmrc.sbtsettingkeys.SbtSettingKeys.autoImport._, _root_.uk.gov.hmrc.versioning.SbtGitVersioning.autoImport._, _root_.sbtbuildinfo.BuildInfoPlugin.autoImport._, _root_.com.typesafe.sbt.GitPlugin.autoImport._, _root_.sbt._, _root_.sbt.nio.Keys._, _root_.sbt.plugins.IvyPlugin, _root_.sbt.plugins.JvmPlugin, _root_.sbt.plugins.CorePlugin, _root_.sbt.ScriptedPlugin, _root_.sbt.plugins.SbtPlugin, _root_.sbt.plugins.SemanticdbPlugin, _root_.sbt.plugins.JUnitXmlReportPlugin, _root_.sbt.plugins.Giter8TemplatePlugin, _root_.sbt.plugins.MiniDependencyTreePlugin, _root_.play.sbt.Play, _root_.play.sbt.PlayAkkaHttp2Support, _root_.play.sbt.PlayAkkaHttpServer, _root_.play.sbt.PlayFilters, _root_.play.sbt.PlayJava, _root_.play.sbt.PlayLayoutPlugin, _root_.play.sbt.PlayLogback, _root_.play.sbt.PlayMinimalJava, _root_.play.sbt.PlayNettyServer, _root_.play.sbt.PlayScala, _root_.play.sbt.PlayService, _root_.play.sbt.PlayWeb, _root_.play.sbt.routes.RoutesCompiler, _root_.play.sbt.test.MediatorWorkaroundPlugin, _root_.org.scalastyle.sbt.ScalastylePlugin, _root_.scoverage.ScoverageSbtPlugin, _root_.uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin, _root_.uk.gov.hmrc.SbtAutoBuildPlugin, _root_.org.scalafmt.sbt.ScalafmtPlugin, _root_.org.irundaia.sbt.sass.SbtSassify, _root_.net.ground5hark.sbt.concat.SbtConcat, _root_.com.typesafe.sbt.uglify.SbtUglify, _root_.play.twirl.sbt.SbtTwirl, _root_.com.typesafe.sbt.SbtNativePackager, _root_.com.typesafe.sbt.packager.archetypes.JavaAppPackaging, _root_.com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging, _root_.com.typesafe.sbt.packager.archetypes.jar.ClasspathJarPlugin, _root_.com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin, _root_.com.typesafe.sbt.packager.archetypes.jlink.JlinkPlugin, _root_.com.typesafe.sbt.packager.archetypes.scripts.AshScriptPlugin, _root_.com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin, _root_.com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemVPlugin, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemdPlugin, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin, _root_.com.typesafe.sbt.packager.archetypes.systemloader.UpstartPlugin, _root_.com.typesafe.sbt.packager.debian.DebianDeployPlugin, _root_.com.typesafe.sbt.packager.debian.DebianPlugin, _root_.com.typesafe.sbt.packager.debian.JDebPackaging, _root_.com.typesafe.sbt.packager.docker.DockerPlugin, _root_.com.typesafe.sbt.packager.docker.DockerSpotifyClientPlugin, _root_.com.typesafe.sbt.packager.graalvmnativeimage.GraalVMNativeImagePlugin, _root_.com.typesafe.sbt.packager.jdkpackager.JDKPackagerDeployPlugin, _root_.com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin, _root_.com.typesafe.sbt.packager.linux.LinuxPlugin, _root_.com.typesafe.sbt.packager.rpm.RpmDeployPlugin, _root_.com.typesafe.sbt.packager.rpm.RpmPlugin, _root_.com.typesafe.sbt.packager.universal.UniversalDeployPlugin, _root_.com.typesafe.sbt.packager.universal.UniversalPlugin, _root_.com.typesafe.sbt.packager.windows.WindowsDeployPlugin, _root_.com.typesafe.sbt.packager.windows.WindowsPlugin, _root_.com.lightbend.sbt.javaagent.JavaAgent, _root_.com.lightbend.sbt.javaagent.JavaAgentPackaging, _root_.com.typesafe.sbt.web.SbtWeb, _root_.com.typesafe.sbt.jse.SbtJsEngine, _root_.com.typesafe.sbt.jse.SbtJsTask, _root_.de.heikoseeberger.sbtheader.AutomateHeaderPlugin, _root_.de.heikoseeberger.sbtheader.HeaderPlugin, _root_.uk.gov.hmrc.sbtsettingkeys.SbtSettingKeys, _root_.uk.gov.hmrc.versioning.SbtGitVersioning, _root_.uk.gov.hmrc.gitstamp.GitStampPlugin, _root_.sbtbuildinfo.BuildInfoPlugin, _root_.com.typesafe.sbt.GitBranchPrompt, _root_.com.typesafe.sbt.GitPlugin, _root_.com.typesafe.sbt.GitVersioning, _root_.scala.xml.{TopScope=&gt;SUB:DOLLARscope}" />
+    <option name="imports" value="SUB:DOLLARd913baa8d30cf7efb5e6.`microservice`, _root_.sbt.Keys._, _root_.sbt.ScriptedPlugin.autoImport._, _root_.sbt.plugins.JUnitXmlReportPlugin.autoImport._, _root_.sbt.plugins.MiniDependencyTreePlugin.autoImport._, _root_.play.sbt.Play.autoImport._, _root_.play.sbt.PlayService.autoImport._, _root_.play.sbt.routes.RoutesCompiler.autoImport._, _root_.org.scalastyle.sbt.ScalastylePlugin.autoImport._, _root_.scoverage.ScoverageSbtPlugin.autoImport._, _root_.org.scalafmt.sbt.ScalafmtPlugin.autoImport._, _root_.org.irundaia.sbt.sass.SbtSassify.autoImport._, _root_.net.ground5hark.sbt.concat.SbtConcat.autoImport._, _root_.com.typesafe.sbt.uglify.SbtUglify.autoImport._, _root_.play.twirl.sbt.SbtTwirl.autoImport._, _root_.com.typesafe.sbt.SbtNativePackager.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.JavaAppPackaging.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.jar.ClasspathJarPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.jlink.JlinkPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemdPlugin.autoImport._, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin.autoImport._, _root_.com.typesafe.sbt.packager.debian.DebianPlugin.autoImport._, _root_.com.typesafe.sbt.packager.docker.DockerPlugin.autoImport._, _root_.com.typesafe.sbt.packager.graalvmnativeimage.GraalVMNativeImagePlugin.autoImport._, _root_.com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin.autoImport._, _root_.com.typesafe.sbt.packager.linux.LinuxPlugin.autoImport._, _root_.com.typesafe.sbt.packager.rpm.RpmPlugin.autoImport._, _root_.com.typesafe.sbt.packager.universal.UniversalPlugin.autoImport._, _root_.com.typesafe.sbt.packager.windows.WindowsPlugin.autoImport._, _root_.com.lightbend.sbt.javaagent.JavaAgent.autoImport._, _root_.com.typesafe.sbt.web.SbtWeb.autoImport._, _root_.com.typesafe.sbt.jse.SbtJsEngine.autoImport._, _root_.com.typesafe.sbt.jse.SbtJsTask.autoImport._, _root_.de.heikoseeberger.sbtheader.AutomateHeaderPlugin.autoImport._, _root_.de.heikoseeberger.sbtheader.HeaderPlugin.autoImport._, _root_.uk.gov.hmrc.sbtsettingkeys.SbtSettingKeys.autoImport._, _root_.uk.gov.hmrc.versioning.SbtGitVersioning.autoImport._, _root_.sbtbuildinfo.BuildInfoPlugin.autoImport._, _root_.com.typesafe.sbt.GitPlugin.autoImport._, _root_.sbt._, _root_.sbt.nio.Keys._, _root_.sbt.plugins.IvyPlugin, _root_.sbt.plugins.JvmPlugin, _root_.sbt.plugins.CorePlugin, _root_.sbt.ScriptedPlugin, _root_.sbt.plugins.SbtPlugin, _root_.sbt.plugins.SemanticdbPlugin, _root_.sbt.plugins.JUnitXmlReportPlugin, _root_.sbt.plugins.Giter8TemplatePlugin, _root_.sbt.plugins.MiniDependencyTreePlugin, _root_.play.sbt.Play, _root_.play.sbt.PlayAkkaHttp2Support, _root_.play.sbt.PlayAkkaHttpServer, _root_.play.sbt.PlayFilters, _root_.play.sbt.PlayJava, _root_.play.sbt.PlayLayoutPlugin, _root_.play.sbt.PlayLogback, _root_.play.sbt.PlayMinimalJava, _root_.play.sbt.PlayNettyServer, _root_.play.sbt.PlayScala, _root_.play.sbt.PlayService, _root_.play.sbt.PlayWeb, _root_.play.sbt.routes.RoutesCompiler, _root_.play.sbt.test.MediatorWorkaroundPlugin, _root_.org.scalastyle.sbt.ScalastylePlugin, _root_.scoverage.ScoverageSbtPlugin, _root_.uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin, _root_.uk.gov.hmrc.SbtAutoBuildPlugin, _root_.org.scalafmt.sbt.ScalafmtPlugin, _root_.org.irundaia.sbt.sass.SbtSassify, _root_.net.ground5hark.sbt.concat.SbtConcat, _root_.com.typesafe.sbt.uglify.SbtUglify, _root_.play.twirl.sbt.SbtTwirl, _root_.com.typesafe.sbt.SbtNativePackager, _root_.com.typesafe.sbt.packager.archetypes.JavaAppPackaging, _root_.com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging, _root_.com.typesafe.sbt.packager.archetypes.jar.ClasspathJarPlugin, _root_.com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin, _root_.com.typesafe.sbt.packager.archetypes.jlink.JlinkPlugin, _root_.com.typesafe.sbt.packager.archetypes.scripts.AshScriptPlugin, _root_.com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin, _root_.com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemVPlugin, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemdPlugin, _root_.com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin, _root_.com.typesafe.sbt.packager.archetypes.systemloader.UpstartPlugin, _root_.com.typesafe.sbt.packager.debian.DebianDeployPlugin, _root_.com.typesafe.sbt.packager.debian.DebianPlugin, _root_.com.typesafe.sbt.packager.debian.JDebPackaging, _root_.com.typesafe.sbt.packager.docker.DockerPlugin, _root_.com.typesafe.sbt.packager.docker.DockerSpotifyClientPlugin, _root_.com.typesafe.sbt.packager.graalvmnativeimage.GraalVMNativeImagePlugin, _root_.com.typesafe.sbt.packager.jdkpackager.JDKPackagerDeployPlugin, _root_.com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin, _root_.com.typesafe.sbt.packager.linux.LinuxPlugin, _root_.com.typesafe.sbt.packager.rpm.RpmDeployPlugin, _root_.com.typesafe.sbt.packager.rpm.RpmPlugin, _root_.com.typesafe.sbt.packager.universal.UniversalDeployPlugin, _root_.com.typesafe.sbt.packager.universal.UniversalPlugin, _root_.com.typesafe.sbt.packager.windows.WindowsDeployPlugin, _root_.com.typesafe.sbt.packager.windows.WindowsPlugin, _root_.com.lightbend.sbt.javaagent.JavaAgent, _root_.com.lightbend.sbt.javaagent.JavaAgentPackaging, _root_.com.typesafe.sbt.web.SbtWeb, _root_.com.typesafe.sbt.jse.SbtJsEngine, _root_.com.typesafe.sbt.jse.SbtJsTask, _root_.de.heikoseeberger.sbtheader.AutomateHeaderPlugin, _root_.de.heikoseeberger.sbtheader.HeaderPlugin, _root_.uk.gov.hmrc.sbtsettingkeys.SbtSettingKeys, _root_.uk.gov.hmrc.versioning.SbtGitVersioning, _root_.uk.gov.hmrc.gitstamp.GitStampPlugin, _root_.sbtbuildinfo.BuildInfoPlugin, _root_.com.typesafe.sbt.GitBranchPrompt, _root_.com.typesafe.sbt.GitPlugin, _root_.com.typesafe.sbt.GitVersioning, _root_.scala.xml.{TopScope=&gt;SUB:DOLLARscope}" />
     <option name="resolvers" value="$USER_HOME$/.ivy2/cache|ivy|true|Local cache, https://jcenter.bintray.com/|maven|jcenter, https://open.artefacts.tax.service.gov.uk/maven2|maven|HMRC-open-artefacts-maven2, https://oss.sonatype.org/service/local/repositories/releases/content/|maven|sonatype-releases, https://repo1.maven.org/maven2/|maven|public, https://artefacts.tax.service.gov.uk/artifactory/hmrc-releases/|maven|hmrc-releases, https://repo.typesafe.com/typesafe/releases|maven|typesafe-releases, https://artefacts.tax.service.gov.uk/artifactory/third-party-maven-releases/|maven|third-party-maven-releases" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_sca_wrapper_2_13_1_0_44_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_sca_wrapper_2_13_1_0_44_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_sca_wrapper_2_13_1_0_44_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888240)
+++ b/.idea/libraries/sbt__uk_gov_hmrc_sca_wrapper_2_13_1_0_44_jar.xml	(date 1696950888240)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: uk.gov.hmrc:sca-wrapper_2.13:1.0.44:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/sca-wrapper_2.13/1.0.44/sca-wrapper_2.13-1.0.44.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/sca-wrapper_2.13/1.0.44/sca-wrapper_2.13-1.0.44-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/sca-wrapper_2.13/1.0.44/sca-wrapper_2.13-1.0.44-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__org_webjars_npm_govuk_frontend_4_7_0_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__org_webjars_npm_govuk_frontend_4_7_0_jar.xml b/.idea/libraries/sbt__org_webjars_npm_govuk_frontend_4_7_0_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888112)
+++ b/.idea/libraries/sbt__org_webjars_npm_govuk_frontend_4_7_0_jar.xml	(date 1696950888112)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: org.webjars.npm:govuk-frontend:4.7.0:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/govuk-frontend/4.7.0/govuk-frontend-4.7.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/govuk-frontend/4.7.0/govuk-frontend-4.7.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/govuk-frontend/4.7.0/govuk-frontend-4.7.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__com_typesafe_play_play_json_2_13_2_9_4_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__com_typesafe_play_play_json_2_13_2_9_4_jar.xml b/.idea/libraries/sbt__com_typesafe_play_play_json_2_13_2_9_4_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888031)
+++ b/.idea/libraries/sbt__com_typesafe_play_play_json_2_13_2_9_4_jar.xml	(date 1696950888031)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: com.typesafe.play:play-json_2.13:2.9.4:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-json_2.13/2.9.4/play-json_2.13-2.9.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-json_2.13/2.9.4/play-json_2.13-2.9.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-json_2.13/2.9.4/play-json_2.13-2.9.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__org_checkerframework_checker_qual_3_19_0_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__org_checkerframework_checker_qual_3_19_0_jar.xml b/.idea/libraries/sbt__org_checkerframework_checker_qual_3_19_0_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888069)
+++ b/.idea/libraries/sbt__org_checkerframework_checker_qual_3_19_0_jar.xml	(date 1696950888069)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: org.checkerframework:checker-qual:3.19.0:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.19.0/checker-qual-3.19.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.19.0/checker-qual-3.19.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.19.0/checker-qual-3.19.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_play_frontend_pta_2_13_0_4_0_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_pta_2_13_0_4_0_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_pta_2_13_0_4_0_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888154)
+++ b/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_pta_2_13_0_4_0_jar.xml	(date 1696950888154)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: uk.gov.hmrc:play-frontend-pta_2.13:0.4.0:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-pta_2.13/0.4.0/play-frontend-pta_2.13-0.4.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-pta_2.13/0.4.0/play-frontend-pta_2.13-0.4.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-pta_2.13/0.4.0/play-frontend-pta_2.13-0.4.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_webjars_hmrc_frontend_5_46_0_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_webjars_hmrc_frontend_5_46_0_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_webjars_hmrc_frontend_5_46_0_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888268)
+++ b/.idea/libraries/sbt__uk_gov_hmrc_webjars_hmrc_frontend_5_46_0_jar.xml	(date 1696950888268)
@@ -0,0 +1,9 @@
+<component name="libraryTable">
+  <library name="sbt: uk.gov.hmrc.webjars:hmrc-frontend:5.46.0:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/webjars/hmrc-frontend/5.46.0/hmrc-frontend-5.46.0.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__com_github_ben_manes_caffeine_caffeine_2_9_3_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__com_github_ben_manes_caffeine_caffeine_2_9_3_jar.xml b/.idea/libraries/sbt__com_github_ben_manes_caffeine_caffeine_2_9_3_jar.xml
new file mode 100644
--- /dev/null	(date 1696950887980)
+++ b/.idea/libraries/sbt__com_github_ben_manes_caffeine_caffeine_2_9_3_jar.xml	(date 1696950887980)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: com.github.ben-manes.caffeine:caffeine:2.9.3:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/2.9.3/caffeine-2.9.3.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/2.9.3/caffeine-2.9.3-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/2.9.3/caffeine-2.9.3-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__com_typesafe_play_play_functional_2_13_2_9_4_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__com_typesafe_play_play_functional_2_13_2_9_4_jar.xml b/.idea/libraries/sbt__com_typesafe_play_play_functional_2_13_2_9_4_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888001)
+++ b/.idea/libraries/sbt__com_typesafe_play_play_functional_2_13_2_9_4_jar.xml	(date 1696950888001)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: com.typesafe.play:play-functional_2.13:2.9.4:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-functional_2.13/2.9.4/play-functional_2.13-2.9.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-functional_2.13/2.9.4/play-functional_2.13-2.9.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-functional_2.13/2.9.4/play-functional_2.13-2.9.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_play_language_2_13_6_2_0_play_28_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_play_language_2_13_6_2_0_play_28_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_play_language_2_13_6_2_0_play_28_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888189)
+++ b/.idea/libraries/sbt__uk_gov_hmrc_play_language_2_13_6_2_0_play_28_jar.xml	(date 1696950888189)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: uk.gov.hmrc:play-language_2.13:6.2.0-play-28:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-language_2.13/6.2.0-play-28/play-language_2.13-6.2.0-play-28.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-language_2.13/6.2.0-play-28/play-language_2.13-6.2.0-play-28-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-language_2.13/6.2.0-play-28/play-language_2.13-6.2.0-play-28-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_play_partials_2_13_8_4_0_play_28_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_play_partials_2_13_8_4_0_play_28_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_play_partials_2_13_8_4_0_play_28_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888217)
+++ b/.idea/libraries/sbt__uk_gov_hmrc_play_partials_2_13_8_4_0_play_28_jar.xml	(date 1696950888217)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: uk.gov.hmrc:play-partials_2.13:8.4.0-play-28:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-partials_2.13/8.4.0-play-28/play-partials_2.13-8.4.0-play-28.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-partials_2.13/8.4.0-play-28/play-partials_2.13-8.4.0-play-28-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-partials_2.13/8.4.0-play-28/play-partials_2.13-8.4.0-play-28-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_play_frontend_hmrc_2_13_7_19_0_play_28_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_hmrc_2_13_7_19_0_play_28_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_hmrc_2_13_7_19_0_play_28_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888130)
+++ b/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_hmrc_2_13_7_19_0_play_28_jar.xml	(date 1696950888130)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: uk.gov.hmrc:play-frontend-hmrc_2.13:7.19.0-play-28:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-hmrc_2.13/7.19.0-play-28/play-frontend-hmrc_2.13-7.19.0-play-28.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-hmrc_2.13/7.19.0-play-28/play-frontend-hmrc_2.13-7.19.0-play-28-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-hmrc_2.13/7.19.0-play-28/play-frontend-hmrc_2.13-7.19.0-play-28-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__org_scala_lang_modules_scala_collection_compat_2_13_2_10_0_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/sbt__org_scala_lang_modules_scala_collection_compat_2_13_2_10_0_jar.xml b/.idea/libraries/sbt__org_scala_lang_modules_scala_collection_compat_2_13_2_10_0_jar.xml
new file mode 100644
--- /dev/null	(date 1696950888092)
+++ b/.idea/libraries/sbt__org_scala_lang_modules_scala_collection_compat_2_13_2_10_0_jar.xml	(date 1696950888092)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="sbt: org.scala-lang.modules:scala-collection-compat_2.13:2.10.0:jar">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-collection-compat_2.13/2.10.0/scala-collection-compat_2.13-2.10.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-collection-compat_2.13/2.10.0/scala-collection-compat_2.13-2.10.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-collection-compat_2.13/2.10.0/scala-collection-compat_2.13-2.10.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_play_frontend_hmrc_2_13_7_7_0_play_28_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_hmrc_2_13_7_7_0_play_28_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_hmrc_2_13_7_7_0_play_28_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_hmrc_2_13_7_7_0_play_28_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: uk.gov.hmrc:play-frontend-hmrc_2.13:7.7.0-play-28:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-hmrc_2.13/7.7.0-play-28/play-frontend-hmrc_2.13-7.7.0-play-28.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-hmrc_2.13/7.7.0-play-28/play-frontend-hmrc_2.13-7.7.0-play-28-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-hmrc_2.13/7.7.0-play-28/play-frontend-hmrc_2.13-7.7.0-play-28-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__org_webjars_npm_accessible_autocomplete_2_0_4_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__org_webjars_npm_accessible_autocomplete_2_0_4_jar.xml b/.idea/libraries/sbt__org_webjars_npm_accessible_autocomplete_2_0_4_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__org_webjars_npm_accessible_autocomplete_2_0_4_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: org.webjars.npm:accessible-autocomplete:2.0.4:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/accessible-autocomplete/2.0.4/accessible-autocomplete-2.0.4.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/accessible-autocomplete/2.0.4/accessible-autocomplete-2.0.4-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/accessible-autocomplete/2.0.4/accessible-autocomplete-2.0.4-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_play_partials_2_13_8_3_0_play_28_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_play_partials_2_13_8_3_0_play_28_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_play_partials_2_13_8_3_0_play_28_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__uk_gov_hmrc_play_partials_2_13_8_3_0_play_28_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: uk.gov.hmrc:play-partials_2.13:8.3.0-play-28:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-partials_2.13/8.3.0-play-28/play-partials_2.13-8.3.0-play-28.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-partials_2.13/8.3.0-play-28/play-partials_2.13-8.3.0-play-28-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-partials_2.13/8.3.0-play-28/play-partials_2.13-8.3.0-play-28-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_play_language_2_13_6_1_0_play_28_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_play_language_2_13_6_1_0_play_28_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_play_language_2_13_6_1_0_play_28_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__uk_gov_hmrc_play_language_2_13_6_1_0_play_28_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: uk.gov.hmrc:play-language_2.13:6.1.0-play-28:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-language_2.13/6.1.0-play-28/play-language_2.13-6.1.0-play-28.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-language_2.13/6.1.0-play-28/play-language_2.13-6.1.0-play-28-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-language_2.13/6.1.0-play-28/play-language_2.13-6.1.0-play-28-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__com_typesafe_play_play_functional_2_13_2_8_2_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__com_typesafe_play_play_functional_2_13_2_8_2_jar.xml b/.idea/libraries/sbt__com_typesafe_play_play_functional_2_13_2_8_2_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__com_typesafe_play_play_functional_2_13_2_8_2_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: com.typesafe.play:play-functional_2.13:2.8.2:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-functional_2.13/2.8.2/play-functional_2.13-2.8.2.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-functional_2.13/2.8.2/play-functional_2.13-2.8.2-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-functional_2.13/2.8.2/play-functional_2.13-2.8.2-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__com_github_ben_manes_caffeine_caffeine_2_8_8_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__com_github_ben_manes_caffeine_caffeine_2_8_8_jar.xml b/.idea/libraries/sbt__com_github_ben_manes_caffeine_caffeine_2_8_8_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__com_github_ben_manes_caffeine_caffeine_2_8_8_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: com.github.ben-manes.caffeine:caffeine:2.8.8:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/2.8.8/caffeine-2.8.8.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/2.8.8/caffeine-2.8.8-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/2.8.8/caffeine-2.8.8-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_webjars_hmrc_frontend_5_31_0_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_webjars_hmrc_frontend_5_31_0_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_webjars_hmrc_frontend_5_31_0_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__uk_gov_hmrc_webjars_hmrc_frontend_5_31_0_jar.xml	
+++ /dev/null	
@@ -1,9 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: uk.gov.hmrc.webjars:hmrc-frontend:5.31.0:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/webjars/hmrc-frontend/5.31.0/hmrc-frontend-5.31.0.jar!/" />
-    </CLASSES>
-    <JAVADOC />
-    <SOURCES />
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__uk_gov_hmrc_play_frontend_pta_2_13_0_5_0_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_pta_2_13_0_5_0_jar.xml b/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_pta_2_13_0_5_0_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__uk_gov_hmrc_play_frontend_pta_2_13_0_5_0_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: uk.gov.hmrc:play-frontend-pta_2.13:0.5.0:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-pta_2.13/0.5.0/play-frontend-pta_2.13-0.5.0.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-pta_2.13/0.5.0/play-frontend-pta_2.13-0.5.0-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/artefacts.tax.service.gov.uk/artifactory/hmrc-releases/uk/gov/hmrc/play-frontend-pta_2.13/0.5.0/play-frontend-pta_2.13-0.5.0-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__org_checkerframework_checker_qual_3_12_0_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__org_checkerframework_checker_qual_3_12_0_jar.xml b/.idea/libraries/sbt__org_checkerframework_checker_qual_3_12_0_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__org_checkerframework_checker_qual_3_12_0_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: org.checkerframework:checker-qual:3.12.0:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.12.0/checker-qual-3.12.0.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.12.0/checker-qual-3.12.0-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.12.0/checker-qual-3.12.0-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__com_typesafe_play_play_json_2_13_2_8_2_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__com_typesafe_play_play_json_2_13_2_8_2_jar.xml b/.idea/libraries/sbt__com_typesafe_play_play_json_2_13_2_8_2_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__com_typesafe_play_play_json_2_13_2_8_2_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: com.typesafe.play:play-json_2.13:2.8.2:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-json_2.13/2.8.2/play-json_2.13-2.8.2.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-json_2.13/2.8.2/play-json_2.13-2.8.2-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/play-json_2.13/2.8.2/play-json_2.13-2.8.2-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__org_webjars_npm_govuk_frontend_4_6_0_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__org_webjars_npm_govuk_frontend_4_6_0_jar.xml b/.idea/libraries/sbt__org_webjars_npm_govuk_frontend_4_6_0_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__org_webjars_npm_govuk_frontend_4_6_0_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: org.webjars.npm:govuk-frontend:4.6.0:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/govuk-frontend/4.6.0/govuk-frontend-4.6.0.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/govuk-frontend/4.6.0/govuk-frontend-4.6.0-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/govuk-frontend/4.6.0/govuk-frontend-4.6.0-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/sbt__org_webjars_npm_preact_8_5_3_jar.xml
===================================================================
diff --git a/.idea/libraries/sbt__org_webjars_npm_preact_8_5_3_jar.xml b/.idea/libraries/sbt__org_webjars_npm_preact_8_5_3_jar.xml
deleted file mode 100644
--- a/.idea/libraries/sbt__org_webjars_npm_preact_8_5_3_jar.xml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="sbt: org.webjars.npm:preact:8.5.3:jar">
-    <CLASSES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/preact/8.5.3/preact-8.5.3.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/preact/8.5.3/preact-8.5.3-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$USER_HOME$/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/webjars/npm/preact/8.5.3/preact-8.5.3-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: build.sbt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.sbt b/build.sbt
--- a/build.sbt	
+++ b/build.sbt	(date 1696950747632)
@@ -96,7 +96,6 @@
       "javascripts/tai-app.js" -> group(Seq(
         "javascripts/card.js",
         "javascripts/char-count.js",
-        "javascripts/tai-backlink.js",
         "javascripts/tai-new.js",
         "javascripts/tax-code-change.js",
         "javascripts/urbanner.js"
Index: DDCNL-7776.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DDCNL-7776.patch b/DDCNL-7776.patch
new file mode 100644
--- /dev/null	(date 1696951051351)
+++ b/DDCNL-7776.patch	(date 1696951051351)
@@ -0,0 +1,1011 @@
+Index: app/uk/gov/hmrc/tai/util/Timeout.scala
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/util/Timeout.scala b/app/uk/gov/hmrc/tai/util/Timeout.scala
+deleted file mode 100644
+--- a/app/uk/gov/hmrc/tai/util/Timeout.scala	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
++++ /dev/null	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
+@@ -1,41 +0,0 @@
+-/*
+- * Copyright 2023 HM Revenue & Customs
+- *
+- * Licensed under the Apache License, Version 2.0 (the "License");
+- * you may not use this file except in compliance with the License.
+- * You may obtain a copy of the License at
+- *
+- *     http://www.apache.org/licenses/LICENSE-2.0
+- *
+- * Unless required by applicable law or agreed to in writing, software
+- * distributed under the License is distributed on an "AS IS" BASIS,
+- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+- * See the License for the specific language governing permissions and
+- * limitations under the License.
+- */
+-
+-package uk.gov.hmrc.tai.util
+-
+-import akka.actor.ActorSystem
+-import play.api.Logging
+-
+-import scala.concurrent._
+-import scala.concurrent.duration._
+-
+-case object FutureEarlyTimeout extends RuntimeException
+-
+-trait Timeout extends Logging {
+-  def system: ActorSystem
+-
+-  def withTimeout[A](timeoutDuration: FiniteDuration)(block: => Future[A])(implicit ec: ExecutionContext): Future[A] = {
+-    val delayedFuture =
+-      akka.pattern.after(timeoutDuration, system.scheduler) {
+-        val exception = new RuntimeException(s"Future took longer than ${timeoutDuration.toSeconds}s")
+-        logger.error(exception.getMessage + "\n" + exception.getStackTrace.mkString("\n"))
+-        Future.failed(FutureEarlyTimeout)
+-      }
+-
+-    Future.firstCompletedOf(Seq(block, delayedFuture))
+-  }
+-  Future.failed(FutureEarlyTimeout)
+-}
+Index: test/uk/gov/hmrc/tai/util/TimeoutSpec.scala
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala b/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala
+deleted file mode 100644
+--- a/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
++++ /dev/null	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
+@@ -1,59 +0,0 @@
+-/*
+- * Copyright 2023 HM Revenue & Customs
+- *
+- * Licensed under the Apache License, Version 2.0 (the "License");
+- * you may not use this file except in compliance with the License.
+- * You may obtain a copy of the License at
+- *
+- *     http://www.apache.org/licenses/LICENSE-2.0
+- *
+- * Unless required by applicable law or agreed to in writing, software
+- * distributed under the License is distributed on an "AS IS" BASIS,
+- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+- * See the License for the specific language governing permissions and
+- * limitations under the License.
+- */
+-
+-package uk.gov.hmrc.tai.util
+-
+-import akka.actor.ActorSystem
+-import org.scalatest.concurrent.ScalaFutures
+-import utils.{BaseSpec, WireMockHelper}
+-
+-import scala.concurrent.Future
+-import scala.concurrent.duration._
+-
+-class TimeoutSpec extends BaseSpec with ScalaFutures with Timeout with WireMockHelper {
+-
+-  val system = inject[ActorSystem]
+-
+-  implicit val config: PatienceConfig = PatienceConfig(5.seconds)
+-
+-  "Timeout" must {
+-    "not time out within timeout window" in {
+-      val timeoutInSeconds = 2
+-
+-      val result = withTimeout(timeoutInSeconds.seconds) {
+-        akka.pattern.after((timeoutInSeconds - 1).seconds, system.scheduler) {
+-          Future.successful(true)
+-        }
+-      }
+-      result.futureValue mustBe true
+-    }
+-
+-    "time out the request after timeout window" in {
+-
+-      val timeoutInSeconds = 1
+-
+-      val result = withTimeout(timeoutInSeconds.seconds) {
+-        akka.pattern.after((timeoutInSeconds + 1).seconds, system.scheduler) {
+-          Future.successful(true)
+-        }
+-      }
+-
+-      whenReady(result.failed) { e =>
+-        e mustBe FutureEarlyTimeout
+-      }
+-    }
+-  }
+-}
+Index: test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
++++ b/test/uk/gov/hmrc/tai/connectors/CompanyCarConnectorSpec.scala	(date 1696950749749)
+@@ -30,66 +30,6 @@
+ 
+ class CompanyCarConnectorSpec extends BaseSpec {
+ 
+-  "Company car url" should {
+-    "fetch the correct Url" in {
+-      sut
+-        .companyCarEmploymentUrl(
+-          nino,
+-          employmentId
+-        ) mustBe s"${sut.serviceUrl}/tai/$nino/tax-account/tax-components/employments/$employmentId/benefits/company-car"
+-    }
+-  }
+-
+-  "getCompanyCarBenefits" should {
+-    "fetch the company car details" when {
+-      "provided with valid nino" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(companyCarForEmploymentJson))
+-
+-        val result = sut.companyCarBenefitForEmployment(nino, employmentId)
+-        Await.result(result, 5 seconds) mustBe Some(companyCar)
+-      }
+-    }
+-
+-    "thrown exception" when {
+-      "tai sends an invalid json" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(corruptJsonResponse))
+-
+-        val ex = the[JsResultException] thrownBy Await
+-          .result(sut.companyCarBenefitForEmployment(nino, employmentId), 5 seconds)
+-        ex.getMessage must include("List(JsonValidationError(List(error.path.missing)")
+-      }
+-    }
+-  }
+-
+-  "companyCarsForCurrentYearEmployments" must {
+-    "return CompanyCarBenefit" when {
+-      "provided with valid nino" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(companyCars))
+-
+-        val result = sut.companyCarsForCurrentYearEmployments(nino)
+-        Await.result(result, 5 seconds) mustBe Seq(companyCar)
+-      }
+-    }
+-
+-    "return empty sequence of company car benefit" when {
+-      "company car service returns no car" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(emptyCompanyCars))
+-
+-        val result = sut.companyCarsForCurrentYearEmployments(nino)
+-        Await.result(result, 5 seconds) mustBe Seq.empty[CompanyCarBenefit]
+-      }
+-
+-      "company car service returns a failure response" in {
+-        when(httpHandler.getFromApiV2(any())(any(), any()))
+-          .thenReturn(Future.failed(new HttpException("company car strange response", UNPROCESSABLE_ENTITY)))
+-
+-        val result = sut.companyCarsForCurrentYearEmployments(nino)
+-        Await.result(result, 5 seconds) mustBe Seq.empty[CompanyCarBenefit]
+-      }
+-    }
+-
+-  }
+-
+   val companyCar: CompanyCarBenefit = CompanyCarBenefit(
+     10,
+     1000,
+@@ -171,4 +111,64 @@
+     override val serviceUrl: String = "mockUrl"
+   }
+ 
++  "Company car url" should {
++    "fetch the correct Url" in {
++      sut
++        .companyCarEmploymentUrl(
++          nino,
++          employmentId
++        ) mustBe s"${sut.serviceUrl}/tai/$nino/tax-account/tax-components/employments/$employmentId/benefits/company-car"
++    }
++  }
++
++  "getCompanyCarBenefits" should {
++    "fetch the company car details" when {
++      "provided with valid nino" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.successful(companyCarForEmploymentJson))
++
++        val result = sut.companyCarBenefitForEmployment(nino, employmentId)
++        Await.result(result, 5 seconds) mustBe Some(companyCar)
++      }
++    }
++
++    "thrown exception" when {
++      "tai sends an invalid json" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(corruptJsonResponse))
++
++        val ex = the[JsResultException] thrownBy Await
++          .result(sut.companyCarBenefitForEmployment(nino, employmentId), 5 seconds)
++        ex.getMessage must include("List(JsonValidationError(List(error.path.missing)")
++      }
++    }
++  }
++
++  "companyCarsForCurrentYearEmployments" must {
++    "return CompanyCarBenefit" when {
++      "provided with valid nino" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(companyCars))
++
++        val result = sut.companyCarsForCurrentYearEmployments(nino)
++        Await.result(result, 5 seconds) mustBe Seq(companyCar)
++      }
++    }
++
++    "return empty sequence of company car benefit" when {
++      "company car service returns no car" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(emptyCompanyCars))
++
++        val result = sut.companyCarsForCurrentYearEmployments(nino)
++        Await.result(result, 5 seconds) mustBe Seq.empty[CompanyCarBenefit]
++      }
++
++      "company car service returns a failure response" in {
++        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++          .thenReturn(Future.failed(new HttpException("company car strange response", UNPROCESSABLE_ENTITY)))
++
++        val result = sut.companyCarsForCurrentYearEmployments(nino)
++        Await.result(result, 5 seconds) mustBe Seq.empty[CompanyCarBenefit]
++      }
++    }
++
++  }
+ }
+Index: test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
++++ b/test/uk/gov/hmrc/tai/connectors/PensionProviderConnectorSpec.scala	(date 1696950749763)
+@@ -28,6 +28,8 @@
+ 
+ class PensionProviderConnectorSpec extends BaseSpec {
+ 
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
+   "PensionProviderConnector addPensionProvider" must {
+     "return an envelope id on a successful invocation" in {
+       val addPensionProvider =
+@@ -35,7 +37,12 @@
+       val json = Json.obj("data" -> JsString("123-456-789"))
+       when(
+         httpHandler
+-          .postToApi(meq(sut.addPensionProviderServiceUrl(nino)), meq(addPensionProvider))(any(), any(), any())
++          .postToApi(meq(sut.addPensionProviderServiceUrl(nino)), meq(addPensionProvider), any())(
++            any(),
++            any(),
++            any(),
++            any()
++          )
+       )
+         .thenReturn(Future.successful(HttpResponse.apply(200, json.toString())))
+ 
+@@ -54,11 +61,13 @@
+       )
+       val json = Json.obj("data" -> JsString("123-456-789"))
+       when(
+-        httpHandler.postToApi(meq(sut.incorrectPensionProviderServiceUrl(nino, 1)), meq(incorrectPensionProvider))(
+-          any(),
+-          any(),
+-          any()
+-        )
++        httpHandler
++          .postToApi(meq(sut.incorrectPensionProviderServiceUrl(nino, 1)), meq(incorrectPensionProvider), any())(
++            any(),
++            any(),
++            any(),
++            any()
++          )
+       )
+         .thenReturn(Future.successful(HttpResponse.apply(200, json.toString())))
+ 
+@@ -68,8 +77,6 @@
+     }
+   }
+ 
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+   def sut: PensionProviderConnector = new PensionProviderConnector(httpHandler, servicesConfig) {
+     override val serviceUrl: String = "testUrl"
+   }
+Index: test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala b/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
++++ b/test/uk/gov/hmrc/tai/connectors/HttpHandlerSpec.scala	(date 1696950749787)
+@@ -19,7 +19,8 @@
+ import com.github.tomakehurst.wiremock.client.WireMock._
+ import org.scalatest.concurrent.{IntegrationPatience, ScalaFutures}
+ import play.api.http.Status._
+-import play.api.libs.json.{Format, Json}
++import play.api.libs.json.{Format, JsValue, Json, OFormat, Writes}
++import play.api.libs.ws.BodyWritable
+ import uk.gov.hmrc.http._
+ import utils.{BaseSpec, WireMockHelper}
+ 
+@@ -30,12 +31,12 @@
+ 
+ class HttpHandlerSpec extends BaseSpec with WireMockHelper with ScalaFutures with IntegrationPatience {
+ 
+-  lazy val httpHandler = inject[HttpHandler]
++  lazy val httpHandler: HttpHandler = inject[HttpHandler]
+ 
+-  lazy val testUrl = server.url("/")
++  lazy val testUrl: String = server.url("/")
+ 
+   protected case class ResponseObject(name: String, age: Int)
+-  implicit val responseObjectFormat = Json.format[ResponseObject]
++  implicit val responseObjectFormat: OFormat[ResponseObject] = Json.format[ResponseObject]
+ 
+   private val responseBodyObject = ResponseObject("Name", 24)
+ 
+@@ -44,6 +45,13 @@
+   object DateRequest {
+ 
+     implicit val formatDateRequest: Format[DateRequest] = Json.format[DateRequest]
++
++    implicit val writes: Writes[DateRequest] = Json.writes[DateRequest]
++
++    implicit def jsonBodyWritable[T](implicit
++      writes: Writes[T],
++      jsValueBodyWritable: BodyWritable[JsValue]
++    ): BodyWritable[T] = jsValueBodyWritable.map(writes.writes)
+   }
+ 
+   "getFromApiV2" must {
+Index: test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
++++ b/test/uk/gov/hmrc/tai/connectors/TaxAccountConnectorSpec.scala	(date 1696950749930)
+@@ -56,6 +56,211 @@
+   lazy val nonTaxCodeIncomeUrl = s"/tai/$nino/tax-account/${currentTaxYear.year}/income"
+   lazy val totalTaxUrl = s"/tai/$nino/tax-account/${currentTaxYear.year}/total-tax"
+ 
++  private val currentTaxYear = TaxYear()
++
++  def ninoAsString: String = nino.value
++
++  val taxCodeIncomeJson: JsValue = Json.obj(
++    "data" -> JsArray(
++      Seq(
++        Json.obj(
++          "componentType"  -> "EmploymentIncome",
++          "employmentId"   -> 1,
++          "amount"         -> 1111,
++          "description"    -> "employment",
++          "taxCode"        -> "1150L",
++          "name"           -> "Employer1",
++          "basisOperation" -> "OtherBasisOperation",
++          "status"         -> "Live"
++        )
++      )
++    ),
++    "links" -> JsArray(Seq())
++  )
++
++  val incomeSourceJson: JsValue = Json.obj(
++    "data" -> Json.arr(
++      Json.obj(
++        "taxCodeIncome" -> Json.obj(
++          "componentType"                 -> "EmploymentIncome",
++          "employmentId"                  -> 1,
++          "amount"                        -> 1111,
++          "description"                   -> "employment",
++          "taxCode"                       -> "1150L",
++          "name"                          -> "Employer1",
++          "basisOperation"                -> "OtherBasisOperation",
++          "status"                        -> "Live",
++          "inYearAdjustmentIntoCY"        -> 0,
++          "totalInYearAdjustment"         -> 0,
++          "inYearAdjustmentIntoCYPlusOne" -> 0
++        ),
++        "employment" -> Json.obj(
++          "name"                         -> "company name",
++          "employmentStatus"             -> "Live",
++          "payrollNumber"                -> "888",
++          "startDate"                    -> "2019-05-26",
++          "annualAccounts"               -> Json.arr(),
++          "taxDistrictNumber"            -> "",
++          "payeNumber"                   -> "",
++          "sequenceNumber"               -> 1,
++          "cessationPay"                 -> 100,
++          "hasPayrolledBenefit"          -> false,
++          "receivingOccupationalPension" -> true
++        )
++      )
++    )
++  )
++
++  val incomeSourceEmpty: JsValue = Json.obj(
++    "data" -> Json.arr()
++  )
++
++  val codingComponentSampleJson: JsValue = Json.obj(
++    "data" -> Json.arr(
++      Json.obj(
++        "componentType" -> "EmployerProvidedServices",
++        "employmentId"  -> 12,
++        "amount"        -> 12321,
++        "description"   -> "Some Description",
++        "iabdCategory"  -> "Benefit"
++      ),
++      Json.obj(
++        "componentType" -> "GiftsSharesCharity",
++        "employmentId"  -> 31,
++        "amount"        -> 12345,
++        "description"   -> "Some Description Some",
++        "iabdCategory"  -> "Allowance"
++      )
++    ),
++    "links" -> Json.arr()
++  )
++
++  val corruptJsonResponse: JsValue = Json.obj(
++    "data" -> JsArray(
++      Seq(
++        Json.obj(
++          "employmentId"   -> 1,
++          "amount"         -> 1111,
++          "description"    -> "employment",
++          "taxCode"        -> "1150L",
++          "name"           -> "Employer1",
++          "basisOperation" -> "OtherBasisOperation"
++        )
++      )
++    ),
++    "links" -> JsArray(Seq())
++  )
++
++  val incomeJson: JsValue = Json.obj(
++    "data" -> Json.obj(
++      "taxCodeIncomes" -> JsArray(),
++      "nonTaxCodeIncomes" -> Json.obj(
++        "otherNonTaxCodeIncomes" -> Json.arr(
++          Json.obj(
++            "incomeComponentType" -> "Profit",
++            "amount"              -> 100,
++            "description"         -> "Profit"
++          )
++        )
++      )
++    ),
++    "links" -> Json.arr()
++  )
++
++  private val totalTaxJson = Json.obj(
++    "data" -> Json.obj(
++      "amount" -> 1000,
++      "incomeCategories" -> Json.arr(
++        Json.obj(
++          "incomeCategoryType" -> "UkDividendsIncomeCategory",
++          "totalTax"           -> 10,
++          "totalTaxableIncome" -> 20,
++          "totalIncome"        -> 30,
++          "taxBands" -> Json.arr(
++            Json.obj(
++              "bandType" -> "",
++              "code"     -> "",
++              "income"   -> 0,
++              "tax"      -> 0,
++              "rate"     -> 0
++            ),
++            Json.obj(
++              "bandType"  -> "B",
++              "code"      -> "BR",
++              "income"    -> 10000,
++              "tax"       -> 500,
++              "lowerBand" -> 5000,
++              "upperBand" -> 20000,
++              "rate"      -> 10
++            )
++          )
++        )
++      ),
++      "reliefsGivingBackTax" -> Json.obj(
++        "amount" -> 100,
++        "taxAdjustmentComponents" -> Json.arr(
++          Json.obj(
++            "taxAdjustmentType"   -> "EnterpriseInvestmentSchemeRelief",
++            "taxAdjustmentAmount" -> 100
++          )
++        )
++      ),
++      "otherTaxDue" -> Json.obj(
++        "amount" -> 100,
++        "taxAdjustmentComponents" -> Json.arr(
++          Json.obj(
++            "taxAdjustmentType"   -> "ExcessGiftAidTax",
++            "taxAdjustmentAmount" -> 100
++          )
++        )
++      ),
++      "alreadyTaxedAtSource" -> Json.obj(
++        "amount" -> 100,
++        "taxAdjustmentComponents" -> Json.arr(
++          Json.obj(
++            "taxAdjustmentType"   -> "TaxOnBankBSInterest",
++            "taxAdjustmentAmount" -> 100
++          )
++        )
++      )
++    ),
++    "links" -> Json.arr()
++  )
++
++  private val income = uk.gov.hmrc.tai.model.domain.income.Incomes(
++    Seq.empty[TaxCodeIncome],
++    NonTaxCodeIncome(
++      None,
++      Seq(
++        OtherNonTaxCodeIncome(Profit, None, 100, "Profit")
++      )
++    )
++  )
++
++  val taxCodeIncome: TaxCodeIncome =
++    TaxCodeIncome(EmploymentIncome, Some(1), 1111, "employment", "1150L", "Employer1", OtherBasisOfOperation, Live)
++  val employment: Employment = Employment(
++    "company name",
++    Live,
++    Some("888"),
++    LocalDate.of(2019, 5, 26),
++    None,
++    Seq.empty[AnnualAccount],
++    "",
++    "",
++    1,
++    Some(BigDecimal(100)),
++    hasPayrolledBenefit = false,
++    receivingOccupationalPension = true
++  )
++  val codingComponentSeq: Seq[CodingComponent] = Seq(
++    CodingComponent(EmployerProvidedServices, Some(12), 12321, "Some Description"),
++    CodingComponent(GiftsSharesCharity, Some(31), 12345, "Some Description Some")
++  )
++  val incomeSource: TaxedIncome = TaxedIncome(taxCodeIncome, employment)
++
++  lazy val taxAccountConnector = new TaxAccountConnector(inject[HttpHandler], servicesConfig)
++
+   "tax account url" must {
+     "fetch the url to connect to TAI to retrieve tax codes" in {
+       taxAccountConnector
+@@ -466,209 +671,4 @@
+       }
+     }
+   }
+-
+-  private val currentTaxYear = TaxYear()
+-
+-  def ninoAsString: String = nino.value
+-
+-  val taxCodeIncomeJson: JsValue = Json.obj(
+-    "data" -> JsArray(
+-      Seq(
+-        Json.obj(
+-          "componentType"  -> "EmploymentIncome",
+-          "employmentId"   -> 1,
+-          "amount"         -> 1111,
+-          "description"    -> "employment",
+-          "taxCode"        -> "1150L",
+-          "name"           -> "Employer1",
+-          "basisOperation" -> "OtherBasisOperation",
+-          "status"         -> "Live"
+-        )
+-      )
+-    ),
+-    "links" -> JsArray(Seq())
+-  )
+-
+-  val incomeSourceJson: JsValue = Json.obj(
+-    "data" -> Json.arr(
+-      Json.obj(
+-        "taxCodeIncome" -> Json.obj(
+-          "componentType"                 -> "EmploymentIncome",
+-          "employmentId"                  -> 1,
+-          "amount"                        -> 1111,
+-          "description"                   -> "employment",
+-          "taxCode"                       -> "1150L",
+-          "name"                          -> "Employer1",
+-          "basisOperation"                -> "OtherBasisOperation",
+-          "status"                        -> "Live",
+-          "inYearAdjustmentIntoCY"        -> 0,
+-          "totalInYearAdjustment"         -> 0,
+-          "inYearAdjustmentIntoCYPlusOne" -> 0
+-        ),
+-        "employment" -> Json.obj(
+-          "name"                         -> "company name",
+-          "employmentStatus"             -> "Live",
+-          "payrollNumber"                -> "888",
+-          "startDate"                    -> "2019-05-26",
+-          "annualAccounts"               -> Json.arr(),
+-          "taxDistrictNumber"            -> "",
+-          "payeNumber"                   -> "",
+-          "sequenceNumber"               -> 1,
+-          "cessationPay"                 -> 100,
+-          "hasPayrolledBenefit"          -> false,
+-          "receivingOccupationalPension" -> true
+-        )
+-      )
+-    )
+-  )
+-
+-  val incomeSourceEmpty: JsValue = Json.obj(
+-    "data" -> Json.arr()
+-  )
+-
+-  val codingComponentSampleJson: JsValue = Json.obj(
+-    "data" -> Json.arr(
+-      Json.obj(
+-        "componentType" -> "EmployerProvidedServices",
+-        "employmentId"  -> 12,
+-        "amount"        -> 12321,
+-        "description"   -> "Some Description",
+-        "iabdCategory"  -> "Benefit"
+-      ),
+-      Json.obj(
+-        "componentType" -> "GiftsSharesCharity",
+-        "employmentId"  -> 31,
+-        "amount"        -> 12345,
+-        "description"   -> "Some Description Some",
+-        "iabdCategory"  -> "Allowance"
+-      )
+-    ),
+-    "links" -> Json.arr()
+-  )
+-
+-  val corruptJsonResponse: JsValue = Json.obj(
+-    "data" -> JsArray(
+-      Seq(
+-        Json.obj(
+-          "employmentId"   -> 1,
+-          "amount"         -> 1111,
+-          "description"    -> "employment",
+-          "taxCode"        -> "1150L",
+-          "name"           -> "Employer1",
+-          "basisOperation" -> "OtherBasisOperation"
+-        )
+-      )
+-    ),
+-    "links" -> JsArray(Seq())
+-  )
+-
+-  val incomeJson: JsValue = Json.obj(
+-    "data" -> Json.obj(
+-      "taxCodeIncomes" -> JsArray(),
+-      "nonTaxCodeIncomes" -> Json.obj(
+-        "otherNonTaxCodeIncomes" -> Json.arr(
+-          Json.obj(
+-            "incomeComponentType" -> "Profit",
+-            "amount"              -> 100,
+-            "description"         -> "Profit"
+-          )
+-        )
+-      )
+-    ),
+-    "links" -> Json.arr()
+-  )
+-
+-  private val totalTaxJson = Json.obj(
+-    "data" -> Json.obj(
+-      "amount" -> 1000,
+-      "incomeCategories" -> Json.arr(
+-        Json.obj(
+-          "incomeCategoryType" -> "UkDividendsIncomeCategory",
+-          "totalTax"           -> 10,
+-          "totalTaxableIncome" -> 20,
+-          "totalIncome"        -> 30,
+-          "taxBands" -> Json.arr(
+-            Json.obj(
+-              "bandType" -> "",
+-              "code"     -> "",
+-              "income"   -> 0,
+-              "tax"      -> 0,
+-              "rate"     -> 0
+-            ),
+-            Json.obj(
+-              "bandType"  -> "B",
+-              "code"      -> "BR",
+-              "income"    -> 10000,
+-              "tax"       -> 500,
+-              "lowerBand" -> 5000,
+-              "upperBand" -> 20000,
+-              "rate"      -> 10
+-            )
+-          )
+-        )
+-      ),
+-      "reliefsGivingBackTax" -> Json.obj(
+-        "amount" -> 100,
+-        "taxAdjustmentComponents" -> Json.arr(
+-          Json.obj(
+-            "taxAdjustmentType"   -> "EnterpriseInvestmentSchemeRelief",
+-            "taxAdjustmentAmount" -> 100
+-          )
+-        )
+-      ),
+-      "otherTaxDue" -> Json.obj(
+-        "amount" -> 100,
+-        "taxAdjustmentComponents" -> Json.arr(
+-          Json.obj(
+-            "taxAdjustmentType"   -> "ExcessGiftAidTax",
+-            "taxAdjustmentAmount" -> 100
+-          )
+-        )
+-      ),
+-      "alreadyTaxedAtSource" -> Json.obj(
+-        "amount" -> 100,
+-        "taxAdjustmentComponents" -> Json.arr(
+-          Json.obj(
+-            "taxAdjustmentType"   -> "TaxOnBankBSInterest",
+-            "taxAdjustmentAmount" -> 100
+-          )
+-        )
+-      )
+-    ),
+-    "links" -> Json.arr()
+-  )
+-
+-  private val income = uk.gov.hmrc.tai.model.domain.income.Incomes(
+-    Seq.empty[TaxCodeIncome],
+-    NonTaxCodeIncome(
+-      None,
+-      Seq(
+-        OtherNonTaxCodeIncome(Profit, None, 100, "Profit")
+-      )
+-    )
+-  )
+-
+-  val taxCodeIncome =
+-    TaxCodeIncome(EmploymentIncome, Some(1), 1111, "employment", "1150L", "Employer1", OtherBasisOfOperation, Live)
+-  val employment = Employment(
+-    "company name",
+-    Live,
+-    Some("888"),
+-    LocalDate.of(2019, 5, 26),
+-    None,
+-    Seq.empty[AnnualAccount],
+-    "",
+-    "",
+-    1,
+-    Some(BigDecimal(100)),
+-    hasPayrolledBenefit = false,
+-    receivingOccupationalPension = true
+-  )
+-  val codingComponentSeq = Seq(
+-    CodingComponent(EmployerProvidedServices, Some(12), 12321, "Some Description"),
+-    CodingComponent(GiftsSharesCharity, Some(31), 12345, "Some Description Some")
+-  )
+-  val incomeSource = TaxedIncome(taxCodeIncome, employment)
+-
+-  lazy val taxAccountConnector = new TaxAccountConnector(inject[HttpHandler], servicesConfig)
+ }
+Index: app/uk/gov/hmrc/tai/connectors/HttpHandler.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala b/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala
+--- a/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala	(revision fd38a7620e2419bb4811d64553eba6d158dcf219)
++++ b/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala	(date 1696950749733)
+@@ -19,14 +19,17 @@
+ import cats.data.EitherT
+ import play.api.Logging
+ import play.api.http.Status._
+-import play.api.libs.json.{JsValue, Writes}
+-import uk.gov.hmrc.http._
+-import uk.gov.hmrc.play.bootstrap.http.DefaultHttpClient
++import play.api.libs.json.JsValue
++import play.api.libs.ws.BodyWritable
++import uk.gov.hmrc.http.{BadRequestException, _}
++import uk.gov.hmrc.http.client.HttpClientV2
+ 
+ import javax.inject.Inject
++import scala.concurrent.duration.DurationInt
+ import scala.concurrent.{ExecutionContext, Future}
++import scala.reflect.runtime.universe.TypeTag
+ 
+-class HttpHandler @Inject() (val http: DefaultHttpClient) extends HttpErrorFunctions with Logging {
++class HttpHandler @Inject() (val http: HttpClientV2) extends HttpErrorFunctions with Logging {
+ 
+   def read(
+     response: Future[Either[UpstreamErrorResponse, HttpResponse]]
+@@ -48,19 +51,38 @@
+       Left(UpstreamErrorResponse(exception.message, 502, 502))
+     })
+ 
+-  def getFromApiV2(url: String)(implicit hc: HeaderCarrier, ec: ExecutionContext): Future[JsValue] = {
+-    implicit val httpRds = new HttpReads[HttpResponse] {
++  def getFromApiV2(url: String, timeoutInSec: Option[Int] = None)(implicit
++    hc: HeaderCarrier,
++    ec: ExecutionContext
++  ): Future[JsValue] = {
++    implicit val httpRds: HttpReads[HttpResponse] = new HttpReads[HttpResponse] {
+       def customRead(http: String, url: String, response: HttpResponse): HttpResponse =
+         response.status match {
+           case UNAUTHORIZED => response
+-          case _            => handleResponse(http, url)(response)
++          case _ =>
++            handleResponseEither(http, url)(response).fold(
++              error =>
++                if (error.statusCode == BAD_REQUEST) {
++                  throw new BadRequestException("bad request")
++                } else if (error.statusCode == NOT_FOUND) {
++                  throw new NotFoundException("not found")
++                } else {
++                  throw error
++                },
++              httpResponse => httpResponse
++            )
+         }
+ 
+-      def read(http: String, url: String, res: HttpResponse) = customRead(http, url, res)
++      def read(http: String, url: String, res: HttpResponse): HttpResponse = customRead(http, url, res)
+     }
+ 
+-    val futureResponse = http.GET[HttpResponse](url)
++    val httpCall = if (timeoutInSec.isDefined) {
++      http.get(url"$url").transform(_.withRequestTimeout(timeoutInSec.get.seconds))
++    } else {
++      http.get(url"$url")
++    }
+ 
++    val futureResponse = httpCall.execute[HttpResponse]
+     futureResponse.flatMap { httpResponse =>
+       httpResponse.status match {
+ 
+@@ -94,68 +116,97 @@
+     }
+   }
+ 
+-  def putToApi[I](url: String, data: I)(implicit
++  def putToApi[I: TypeTag](url: String, data: I, timeoutInSec: Option[Int] = None)(implicit
+     hc: HeaderCarrier,
+-    writes: Writes[I],
+-    executionContext: ExecutionContext
+-  ): Future[HttpResponse] =
+-    http.PUT[I, HttpResponse](url, data).flatMap { httpResponse =>
+-      httpResponse.status match {
++    executionContext: ExecutionContext,
++    jsValueBodyWritable: BodyWritable[I]
++  ): Future[HttpResponse] = {
++
++    val httpCall = if (timeoutInSec.isDefined) {
++      http.put(url"$url")(hc).withBody(data).transform(_.withRequestTimeout(timeoutInSec.get.seconds))
++    } else {
++      http.put(url"$url")(hc).withBody(data)
++    }
++
++    httpCall
++      .execute[HttpResponse]
++      .flatMap { httpResponse =>
++        httpResponse.status match {
+ 
+-        case OK =>
+-          Future.successful(httpResponse)
++          case OK =>
++            Future.successful(httpResponse)
+ 
+-        case NOT_FOUND =>
+-          logger.warn(s"HttpHandler - No data can be found")
+-          Future.failed(new NotFoundException(httpResponse.body))
++          case NOT_FOUND =>
++            logger.warn(s"HttpHandler - No data can be found")
++            Future.failed(new NotFoundException(httpResponse.body))
+ 
+-        case INTERNAL_SERVER_ERROR =>
+-          logger.warn(s"HttpHandler - Internal Server Error received")
+-          Future.failed(new InternalServerException(httpResponse.body))
++          case INTERNAL_SERVER_ERROR =>
++            logger.warn(s"HttpHandler - Internal Server Error received")
++            Future.failed(new InternalServerException(httpResponse.body))
+ 
+-        case BAD_REQUEST =>
+-          logger.warn(s"HttpHandler - Bad Request received")
+-          Future.failed(new BadRequestException(httpResponse.body))
++          case BAD_REQUEST =>
++            logger.warn(s"HttpHandler - Bad Request received")
++            Future.failed(new BadRequestException(httpResponse.body))
+ 
+-        case _ =>
+-          logger.warn(s"HttpHandler - Server error received")
+-          Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++          case _ =>
++            logger.warn(s"HttpHandler - Server error received")
++            Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++        }
+       }
+-    }
++  }
+ 
+-  def postToApi[I](url: String, data: I)(implicit
++  def postToApi[I: TypeTag](url: String, data: I, timeoutInSec: Option[Int] = None)(implicit
+     hc: HeaderCarrier,
+-    writes: Writes[I],
+-    executionContext: ExecutionContext
+-  ): Future[HttpResponse] =
+-    http.POST[I, HttpResponse](url, data) flatMap { httpResponse =>
+-      httpResponse.status match {
+-        case OK | CREATED =>
+-          Future.successful(httpResponse)
++    executionContext: ExecutionContext,
++    jsValueBodyWritable: BodyWritable[I]
++  ): Future[HttpResponse] = {
++
++    val httpCall = if (timeoutInSec.isDefined) {
++      http.post(url"$url")(hc).withBody(data).transform(_.withRequestTimeout(timeoutInSec.get.seconds))
++    } else {
++      http.post(url"$url")(hc).withBody(data)
++    }
++
++    httpCall
++      .execute[HttpResponse]
++      .flatMap { httpResponse =>
++        httpResponse.status match {
++          case OK | CREATED =>
++            Future.successful(httpResponse)
+ 
+-        case _ =>
+-          logger.warn(
+-            s"HttpHandler - Error received with status: ${httpResponse.status} and body: ${httpResponse.body}"
+-          )
+-          Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++          case _ =>
++            logger.warn(
++              s"HttpHandler - Error received with status: ${httpResponse.status} and body: ${httpResponse.body}"
++            )
++            Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++        }
+       }
+-    }
++  }
+ 
+-  def deleteFromApi(url: String)(implicit
++  def deleteFromApi(url: String, timeoutInSec: Option[Int] = None)(implicit
+     hc: HeaderCarrier,
+-    rds: HttpReads[HttpResponse],
+     executionContext: ExecutionContext
+-  ): Future[HttpResponse] =
+-    http.DELETE[HttpResponse](url) flatMap { httpResponse =>
+-      httpResponse.status match {
+-        case OK | NO_CONTENT | ACCEPTED =>
+-          Future.successful(httpResponse)
+-        case _ =>
+-          logger.warn(
+-            s"HttpHandler - Error received with status: ${httpResponse.status} and body: ${httpResponse.body}"
+-          )
+-          Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++  ): Future[HttpResponse] = {
++
++    val httpCall = if (timeoutInSec.isDefined) {
++      http.delete(url"$url").transform(_.withRequestTimeout(timeoutInSec.get.seconds))
++    } else {
++      http.delete(url"$url")
++    }
++
++    httpCall
++      .execute[HttpResponse]
++      .flatMap { httpResponse =>
++        httpResponse.status match {
++          case OK | NO_CONTENT | ACCEPTED =>
++            Future.successful(httpResponse)
++          case _ =>
++            logger.warn(
++              s"HttpHandler - Error received with status: ${httpResponse.status} and body: ${httpResponse.body}"
++            )
++            Future.failed(new HttpException(httpResponse.body, httpResponse.status))
++        }
+       }
+-    }
++  }
+ 
+ }
Index: local_history.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local_history.patch b/local_history.patch
new file mode 100644
--- /dev/null	(date 1696950852049)
+++ b/local_history.patch	(date 1696950852049)
@@ -0,0 +1,3058 @@
+Index: it/controllers/ContentsCheckSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/it/controllers/ContentsCheckSpec.scala b/it/controllers/ContentsCheckSpec.scala
+new file mode 100644
+--- /dev/null	(date 1696950747639)
++++ b/it/controllers/ContentsCheckSpec.scala	(date 1696950747639)
+@@ -0,0 +1,995 @@
++/*
++ * Copyright 2023 HM Revenue & Customs
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++
++package controllers
++
++import com.github.tomakehurst.wiremock.client.WireMock
++import com.github.tomakehurst.wiremock.client.WireMock.{delete, get, matching, ok, post, put, urlEqualTo, urlMatching}
++import org.jsoup.Jsoup
++import org.mockito.scalatest.MockitoSugar
++import org.scalatest.matchers.must.Matchers
++import play.api.Application
++import play.api.http.ContentTypes
++import play.api.http.Status.{LOCKED, OK}
++import play.api.inject.bind
++import play.api.inject.guice.GuiceApplicationBuilder
++import play.api.libs.json.{JsArray, JsValue, Json}
++import play.api.mvc.{AnyContentAsEmpty, Result}
++import play.api.test.FakeRequest
++import play.api.test.Helpers.{CONTENT_TYPE, GET, contentAsString, defaultAwaitTimeout, route, status, writeableOf_AnyContentAsEmpty}
++import uk.gov.hmrc.http.SessionKeys
++import uk.gov.hmrc.mongoFeatureToggles.model.FeatureFlag
++import uk.gov.hmrc.mongoFeatureToggles.services.FeatureFlagService
++import uk.gov.hmrc.sca.models.{MenuItemConfig, PtaMinMenuConfig, WrapperDataResponse}
++import uk.gov.hmrc.tai.model.{CalculatedPay, Employers, JrsClaims, TaxYear, YearAndMonth}
++import uk.gov.hmrc.tai.model.admin.{CyPlusOneToggle, IncomeTaxHistoryToggle, SCAWrapperToggle}
++import uk.gov.hmrc.tai.model.domain.income.Week1Month1BasisOfOperation
++import uk.gov.hmrc.tai.model.domain.tax.{IncomeCategory, NonSavingsIncomeCategory, TaxBand, TotalTax}
++import uk.gov.hmrc.tai.model.domain.{Address, CarBenefit, Person, TaxAccountSummary, TaxCodeChange, TaxCodeRecord, TaxComponentType}
++import uk.gov.hmrc.tai.util.constants.EditIncomeIrregularPayConstants
++import utils.IntegrationSpec
++import utils.JsonGenerator.{taxCodeChangeJson, taxCodeIncomesJson}
++
++import java.time.LocalDate
++import java.util.UUID
++import scala.concurrent.Future
++import scala.jdk.CollectionConverters.CollectionHasAsScala
++import scala.util.Random
++
++class ContentsCheckSpec extends IntegrationSpec with MockitoSugar with Matchers {
++
++  val mockFeatureFlagService = mock[FeatureFlagService]
++
++  case class ExpectedData(
++    title: String,
++    navBarExpected: Boolean,
++    httpStatus: Int = OK,
++    headerTitle: String = "Check your Income Tax"
++  )
++
++  def getExpectedData(key: String): ExpectedData =
++    key match {
++      case "what-to-do" =>
++        ExpectedData(
++          "PAYE Income Tax overview - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "jrs-claims" =>
++        ExpectedData(
++          "Coronavirus Job Retention Scheme - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "no-info" =>
++        ExpectedData(
++          "Your PAYE Income Tax - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "historic-paye-year" =>
++        ExpectedData("Your taxable income for 6 April 2022 to 5 April 2023 - Check your Income Tax - GOV.UK", true)
++      case "income-tax-history" =>
++        ExpectedData("Income tax history - Check your Income Tax - GOV.UK", true)
++      case "timeout" => ExpectedData("Log In - Check your Income Tax - GOV.UK", false)
++      case "tax-estimate-unavailable" =>
++        ExpectedData("We cannot access your details - Check your Income Tax - GOV.UK", false, LOCKED)
++      case "deceased" =>
++        ExpectedData("The information you want is not available to view - Check your Income Tax - GOV.UK", true)
++      case "session-expired" =>
++        ExpectedData("For your security, we signed you out - Check your Income Tax - GOV.UK", false)
++      case "add-employment-name" =>
++        ExpectedData("What is the name of the employer you want to add? - Check your Income Tax - GOV.UK", true)
++      case "add-employment-start-date" =>
++        ExpectedData("When did you start working for this employer? - Check your Income Tax - GOV.UK", true)
++      case "add-employment-first-pay" =>
++        ExpectedData(
++          "Have you received your first pay from H M Revenue and Customs? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "add-employment-six-weeks" =>
++        ExpectedData(
++          "We cannot add this employer yet - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "add-employment-payroll-number" =>
++        ExpectedData(
++          "Do you know your payroll number for this employer? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "add-employment-telephone-number" | "add-pension-telephone-number" | "end-employment-telephone-number" |
++          "update-employment-telephone-number" | "update-income-details-number" | "remove-telephone-number" |
++          "incorrect-pension-telephone-number" =>
++        ExpectedData("Can we call you if we need more information? - Check your Income Tax - GOV.UK", true)
++      case "add-employment-cya" | "add-pension-cya" | "end-employment-cya" | "update-employment-cya" |
++          "update-income-cya" | "update-income-details-cya" | "remove-cya" | "incorrect-pension-cya" =>
++        ExpectedData("Check your answers - Check your Income Tax - GOV.UK", true)
++      case "add-employment-success" =>
++        ExpectedData("Your update about an employment has been received - Check your Income Tax - GOV.UK", true)
++      case "add-pension-name" =>
++        ExpectedData(
++          "What is the name of the pension provider you want to add? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "add-pension-first-payment" =>
++        ExpectedData(
++          "Have you received your first pension payment from this employer? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "add-pension-number" =>
++        ExpectedData(
++          "Do you know your pension number from your this employer? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "add-pension-success" =>
++        ExpectedData("Your update about a pension has been received - Check your Income Tax - GOV.UK", true)
++      case "remove-employment-warning" =>
++        ExpectedData("You have already sent an update about this employment - Check your Income Tax - GOV.UK", true)
++      case "end-employment-decision" =>
++        ExpectedData("Do you currently work for H M Revenue and Customs? - Check your Income Tax - GOV.UK", true)
++      case "end-employment-six-weeks" =>
++        ExpectedData("We cannot update your details yet - Check your Income Tax - GOV.UK", true)
++      case "end-employment-irregular-payment" =>
++        ExpectedData("End employment - Check your Income Tax - GOV.UK", true)
++      case "end-employment-date" =>
++        ExpectedData("When did you finish working for this employer? - Check your Income Tax - GOV.UK", true)
++      case "update-employment-tell-us" =>
++        ExpectedData("What do you want to tell us about this employer? - Check your Income Tax - GOV.UK", true)
++      case "update-employment-success" =>
++        ExpectedData("Your update about an employment has been received - Check your Income Tax - GOV.UK", true)
++      case "previous-underpayment" =>
++        ExpectedData("What is a previous year underpayment? - Check your Income Tax - GOV.UK", true)
++      case "underpayment-estimate" =>
++        ExpectedData("Estimated tax you owe - Check your Income Tax - GOV.UK", true)
++      case "tax-free-allowance" =>
++        ExpectedData("Your tax-free amount for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
++      case "tax-code" =>
++        ExpectedData("Your tax code for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
++      case "year-tax-codes" =>
++        ExpectedData("Your last tax code for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
++      case "paye-income-tax-estimate" =>
++        ExpectedData(
++          "Your PAYE Income Tax estimate - Check your Income Tax - GOV.UK",
++          true,
++          headerTitle = "Your PAYE Income Tax estimate"
++        )
++      case "detailed-income-tax-estimate" =>
++        ExpectedData("Your detailed PAYE Income Tax estimate - Check your Income Tax - GOV.UK", true)
++      case "income-tax-comparison" =>
++        ExpectedData("Income Tax comparison: current tax year and next tax year - Check your Income Tax - GOV.UK", true)
++      case "your-income-calculation-details" =>
++        ExpectedData("Taxable income from company name - Check your Income Tax - GOV.UK", true)
++      case "update-income-warning" =>
++        ExpectedData("You have already sent a new estimated income - Check your Income Tax - GOV.UK", true)
++      case "update-income-start" =>
++        ExpectedData("Update your estimated income - Check your Income Tax - GOV.UK", true)
++      case "update-income-estimated-pay" =>
++        ExpectedData("There is an error with your calculation - Check your Income Tax - GOV.UK", true)
++      case "how-to-update-income" =>
++        ExpectedData("How do you want to update your estimated income - Check your Income Tax - GOV.UK", true)
++      case "update-income-working-hours" =>
++        ExpectedData("What are your working hours through the year? - Check your Income Tax - GOV.UK", true)
++      case "edit-income-irregular-hours" =>
++        ExpectedData(
++          "We cannot calculate your annual income as you have irregular working hours - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "edit-income-irregular-hours-confirm" | "update-income-check-save" =>
++        ExpectedData(
++          "Confirm your estimated income for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "edit-income-irregular-hours-submit" =>
++        ExpectedData(
++          "Your taxable income has been updated - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-income-pay-period" =>
++        ExpectedData(
++          "How often do you get paid? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-income-payslip-amount" =>
++        ExpectedData("Enter your gross pay for the month - Check your Income Tax - GOV.UK", true)
++      case "update-income-payslip-deductions" =>
++        ExpectedData(
++          "Does your payslip show deductions before tax and National Insurance? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-income-taxable-payslip-amount" =>
++        ExpectedData("Enter your taxable pay for the month - Check your Income Tax - GOV.UK", true)
++      case "update-income-bonus-payments" =>
++        ExpectedData(
++          "Will you get any bonus, commission or overtime between 6 April 2023 and 5 April 2024? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-income-bonus-overtime-amount" =>
++        ExpectedData(
++          "How much do you think you will get in bonus, commission or overtime between 6 April 2023 and 5 April 2024? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-income-edit-taxable-pay" | "update-income-edit-pension" =>
++        ExpectedData(
++          "Update your estimated income for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-income-same-estimated-pay" =>
++        ExpectedData("Your estimated income for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
++      case "update-income-success-page" =>
++        ExpectedData("Your taxable income has been updated - Check your Income Tax - GOV.UK", true)
++      case "get-help" =>
++        ExpectedData("Cannot pay the tax you owe this year - Check your Income Tax - GOV.UK", true)
++      case "update-income-details-decision" =>
++        ExpectedData("Update income details for 6 April 2022 to 5 April 2023 - Check your Income Tax - GOV.UK", true)
++      case "update-income-what-to-tell" =>
++        ExpectedData("What do you want to tell us about your income details? - Check your Income Tax - GOV.UK", true)
++      case "update-income-details-success" =>
++        ExpectedData("Your update has been received - Check your Income Tax - GOV.UK", true)
++      case "income" =>
++        ExpectedData("Your tax-free amount for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK", true)
++      case "income-tax-refresh" =>
++        ExpectedData(
++          "Your PAYE Income Tax summary for 6 April 2023 to 5 April 2024 - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "remove-stop-date" =>
++        ExpectedData(
++          "When did you stop getting benefitName benefit from employmentName? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "remove-total-value-of-benefit" =>
++        ExpectedData(
++          "What was the total value of your benefitName benefit from employmentName? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "remove-success" =>
++        ExpectedData(
++          "Your update has been received - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "company-benefit-decision" =>
++        ExpectedData(
++          "Do you currently get Telephone benefit from company name? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "incorrect-pension-decision" =>
++        ExpectedData(
++          "Confirm your pension provider - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "incorrect-pension-what-to-tell" =>
++        ExpectedData(
++          "What do you want to tell us about your pension provider? - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "incorrect-pension-success" =>
++        ExpectedData(
++          "Your update about a pension has been received - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "incorrect-pension-warning" =>
++        ExpectedData(
++          "You have already sent an update about this pension - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "tax-code-comparison" =>
++        ExpectedData(
++          "Your tax code change - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "your-tax-free-amount" =>
++        ExpectedData(
++          "How we worked out your tax code - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "what-happens-next" =>
++        ExpectedData(
++          "What happens next - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "unauthorised" =>
++        ExpectedData(
++          "You have been signed out for your security - Check your Income Tax - GOV.UK",
++          false
++        )
++      case "update-next-income-warning" =>
++        ExpectedData(
++          "You have already sent a new estimated income - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-next-income-start" =>
++        ExpectedData(
++          "Update your estimated income from <span class=\"carry-over\">company name</span> for next tax year - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-next-income-edit" =>
++        ExpectedData(
++          "Update your estimated income for 6 April 2024 to 5 April 2025 - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-next-income-no-change" =>
++        ExpectedData("Your estimated income for 6 April 2024 to 5 April 2025 - Check your Income Tax - GOV.UK", true)
++      case "update-next-income-confirm" =>
++        ExpectedData(
++          "Confirm your estimated income for 6 April 2024 to 5 April 2025 - Check your Income Tax - GOV.UK",
++          true
++        )
++      case "update-next-income-success" =>
++        ExpectedData(
++          "Your updated estimated income for 6 April 2024 to 5 April 2025 - Check your Income Tax - GOV.UK",
++          true
++        )
++    }
++
++  val urls = Map(
++    "/check-income-tax/what-do-you-want-to-do"                        -> getExpectedData("what-to-do"),
++    "/check-income-tax/jrs-claims"                                    -> getExpectedData("jrs-claims"),
++    "/check-income-tax/income-tax/no-info"                            -> getExpectedData("no-info"),
++    s"/check-income-tax/historic-paye/${LocalDate.now().getYear - 1}" -> getExpectedData("historic-paye-year"),
++    "/check-income-tax/income-tax-history"                            -> getExpectedData("income-tax-history"),
++    "/check-income-tax/timeout"                                       -> getExpectedData("timeout"),
++    "/check-income-tax/tax-estimate-unavailable"                      -> getExpectedData("tax-estimate-unavailable"),
++    "/check-income-tax/deceased"                                      -> getExpectedData("deceased"),
++    "/check-income-tax/session-expired"                               -> getExpectedData("session-expired"),
++    "/check-income-tax/add-employment/employment-name"                -> getExpectedData("add-employment-name"),
++    "/check-income-tax/add-employment/employment-start-date"          -> getExpectedData("add-employment-start-date"),
++    "/check-income-tax/add-employment/employment-first-pay"           -> getExpectedData("add-employment-first-pay"),
++    "/check-income-tax/add-employment/six-weeks"                      -> getExpectedData("add-employment-six-weeks"),
++    "/check-income-tax/add-employment/employment-payroll-number" -> getExpectedData("add-employment-payroll-number"),
++    "/check-income-tax/add-employment/telephone-number"          -> getExpectedData("add-employment-telephone-number"),
++    "/check-income-tax/add-employment/check-your-answers"        -> getExpectedData("add-employment-cya"),
++    "/check-income-tax/add-employment/employment-success"        -> getExpectedData("add-employment-success"),
++    "/check-income-tax/add-pension-provider/name"                -> getExpectedData("add-pension-name"),
++    "/check-income-tax/add-pension-provider/received-first-payment" -> getExpectedData("add-pension-first-payment"),
++    "/check-income-tax/add-pension-provider/pension-number"         -> getExpectedData("add-pension-number"),
++    "/check-income-tax/add-pension-provider/telephone-number"       -> getExpectedData("add-pension-telephone-number"),
++    "/check-income-tax/add-pension-provider/check-your-answers"     -> getExpectedData("add-pension-cya"),
++    "/check-income-tax/add-pension-provider/success"                -> getExpectedData("add-pension-success"),
++    "/check-income-tax/update-remove-employment/warning"            -> getExpectedData("remove-employment-warning"),
++    "/check-income-tax/update-remove-employment/decision-page"      -> getExpectedData("end-employment-decision"),
++    "/check-income-tax/end-employment/six-weeks"                    -> getExpectedData("end-employment-six-weeks"),
++    "/check-income-tax/end-employment/irregular-payment"  -> getExpectedData("end-employment-irregular-payment"),
++    "/check-income-tax/end-employment/telephone-number"   -> getExpectedData("end-employment-telephone-number"),
++    "/check-income-tax/end-employment/date"               -> getExpectedData("end-employment-date"),
++    "/check-income-tax/end-employment/check-your-answers" -> getExpectedData("end-employment-cya"),
++    "/check-income-tax/update-employment/what-do-you-want-to-tell-us/1" -> getExpectedData("update-employment-tell-us"),
++    "/check-income-tax/update-employment/telephone-number"    -> getExpectedData("update-employment-telephone-number"),
++    "/check-income-tax/update-employment/check-your-answers"  -> getExpectedData("update-employment-cya"),
++    "/check-income-tax/update-employment/success"             -> getExpectedData("update-employment-success"),
++    "/check-income-tax/previous-underpayment"                 -> getExpectedData("previous-underpayment"),
++    "/check-income-tax/underpayment-estimate"                 -> getExpectedData("underpayment-estimate"),
++    "/check-income-tax/tax-free-allowance"                    -> getExpectedData("tax-free-allowance"),
++    "/check-income-tax/tax-code/1"                            -> getExpectedData("tax-code"),
++    s"/check-income-tax/tax-codes/${LocalDate.now().getYear}" -> getExpectedData("year-tax-codes"),
++    "/check-income-tax/paye-income-tax-estimate"              -> getExpectedData("paye-income-tax-estimate"),
++    "/check-income-tax/detailed-income-tax-estimate"          -> getExpectedData("detailed-income-tax-estimate"),
++    "/check-income-tax/income-tax-comparison"                 -> getExpectedData("income-tax-comparison"),
++    "/check-income-tax/your-income-calculation-details/1"     -> getExpectedData("your-income-calculation-details"),
++    "/check-income-tax/update-income/warning/1"               -> getExpectedData("update-income-warning"),
++    "/check-income-tax/update-income/check-your-answers/1"    -> getExpectedData("update-income-cya"),
++    "/check-income-tax/update-income/start/1"                 -> getExpectedData("update-income-start"),
++    "/check-income-tax/update-income/estimated-pay/1"         -> getExpectedData("update-income-estimated-pay"),
++    "/check-income-tax/update-income/how-to-update-income/1"  -> getExpectedData("how-to-update-income"),
++    "/check-income-tax/update-income/working-hours"           -> getExpectedData("update-income-working-hours"),
++    "/check-income-tax/update-income/edit-income-irregular-hours/1" -> getExpectedData("edit-income-irregular-hours"),
++    "/check-income-tax/update-income/edit-income-irregular-hours/1/confirm" -> getExpectedData(
++      "edit-income-irregular-hours-confirm"
++    ),
++    "/check-income-tax/update-income/edit-income-irregular-hours/1/submit" -> getExpectedData(
++      "edit-income-irregular-hours-submit"
++    ),
++    "/check-income-tax/update-income/pay-period"             -> getExpectedData("update-income-pay-period"),
++    "/check-income-tax/update-income/payslip-amount"         -> getExpectedData("update-income-payslip-amount"),
++    "/check-income-tax/update-income/payslip-deductions"     -> getExpectedData("update-income-payslip-deductions"),
++    "/check-income-tax/update-income/taxable-payslip-amount" -> getExpectedData("update-income-taxable-payslip-amount"),
++    "/check-income-tax/update-income/bonus-payments"         -> getExpectedData("update-income-bonus-payments"),
++    "/check-income-tax/update-income/bonus-overtime-amount"  -> getExpectedData("update-income-bonus-overtime-amount"),
++    "/check-income-tax/update-income/edit-taxable-pay/1"     -> getExpectedData("update-income-edit-taxable-pay"),
++    "/check-income-tax/update-income/edit-pension/1"         -> getExpectedData("update-income-edit-pension"),
++    "/check-income-tax/update-income/income/1/check-save"    -> getExpectedData("update-income-check-save"),
++    "/check-income-tax/update-income/income/same-estimated-pay/1" -> getExpectedData(
++      "update-income-same-estimated-pay"
++    ),
++    "/check-income-tax/update-income/success-page/1" -> getExpectedData("update-income-success-page"),
++    "/check-income-tax/get-help"                     -> getExpectedData("get-help"),
++    s"/check-income-tax/update-income-details/decision/${TaxYear().prev.year}" -> getExpectedData(
++      "update-income-details-decision"
++    ),
++    "/check-income-tax/update-income-details/what-do-you-want-to-tell-us" -> getExpectedData(
++      "update-income-what-to-tell"
++    ),
++    "/check-income-tax/update-income-details/telephone-number" -> getExpectedData(
++      "update-income-details-number"
++    ),
++    "/check-income-tax/update-income-details/success" -> getExpectedData(
++      "update-income-details-success"
++    ),
++    "/check-income-tax/income"                           -> getExpectedData("income"),
++    "/check-income-tax/income-tax-refresh"               -> getExpectedData("income-tax-refresh"),
++    "/check-income-tax/remove-company-benefit/stop-date" -> getExpectedData("remove-stop-date"),
++    "/check-income-tax/remove-company-benefit/total-value-of-benefit" -> getExpectedData(
++      "remove-total-value-of-benefit"
++    ),
++    "/check-income-tax/remove-company-benefit/telephone-number"   -> getExpectedData("remove-telephone-number"),
++    "/check-income-tax/remove-company-benefit/check-your-answers" -> getExpectedData("remove-cya"),
++    "/check-income-tax/remove-company-benefit/success"            -> getExpectedData("remove-success"),
++    "/check-income-tax/company-benefit/decision"                  -> getExpectedData("company-benefit-decision"),
++    "/check-income-tax/incorrect-pension/decision"                -> getExpectedData("incorrect-pension-decision"),
++    "/check-income-tax/incorrect-pension/what-do-you-want-to-tell-us" -> getExpectedData(
++      "incorrect-pension-what-to-tell"
++    ),
++    "/check-income-tax/incorrect-pension/telephone-number"   -> getExpectedData("incorrect-pension-telephone-number"),
++    "/check-income-tax/incorrect-pension/check-your-answers" -> getExpectedData("incorrect-pension-cya"),
++    "/check-income-tax/incorrect-pension/success"            -> getExpectedData("incorrect-pension-success"),
++    "/check-income-tax/incorrect-pension/warning"            -> getExpectedData("incorrect-pension-warning"),
++    "/check-income-tax/tax-code-change/tax-code-comparison"  -> getExpectedData("tax-code-comparison"),
++    "/check-income-tax/tax-code-change/your-tax-free-amount" -> getExpectedData("your-tax-free-amount"),
++    "/check-income-tax/tax-code-change/what-happens-next"    -> getExpectedData("what-happens-next"),
++    "/check-income-tax/unauthorised"                         -> getExpectedData("unauthorised"),
++    "/check-income-tax/update-income/next-year/income/1/warning"   -> getExpectedData("update-next-income-warning"),
++    "/check-income-tax/update-income/next-year/income/1/start"     -> getExpectedData("update-next-income-start"),
++    "/check-income-tax/update-income/next-year/income/1/edit"      -> getExpectedData("update-next-income-edit"),
++    "/check-income-tax/update-income/next-year/income/1/no-change" -> getExpectedData("update-next-income-no-change"),
++    "/check-income-tax/update-income/next-year/income/1/confirm"   -> getExpectedData("update-next-income-confirm"),
++    "/check-income-tax/update-income/next-year/income/1/success"   -> getExpectedData("update-next-income-success")
++  )
++
++  override lazy val app: Application = new GuiceApplicationBuilder()
++    .overrides(
++      bind[FeatureFlagService].toInstance(mockFeatureFlagService)
++    )
++    .configure(
++      "microservice.services.auth.port"                                -> server.port(),
++      "microservice.services.cachable.session-cache.port"              -> server.port(),
++      "sca-wrapper.services.single-customer-account-wrapper-data.url"  -> s"http://localhost:${server.port()}",
++      "microservice.services.tai.port"                                 -> server.port(),
++      "microservice.services.coronavirus-jrs-published-employees.port" -> server.port()
++    )
++    .build()
++
++  val uuid = UUID.randomUUID().toString
++
++  def request(url: String): FakeRequest[AnyContentAsEmpty.type] =
++    FakeRequest(GET, url)
++      .withSession(SessionKeys.sessionId -> uuid, SessionKeys.authToken -> "Bearer 1")
++      .withHeaders("Referer" -> "")
++
++  val wrapperDataResponse = Json
++    .toJson(
++      WrapperDataResponse(
++        Seq(
++          MenuItemConfig("id", "NewLayout Item", "link", false, 0, None, None),
++          MenuItemConfig("signout", "Sign out", "link", false, 0, None, None)
++        ),
++        PtaMinMenuConfig("MenuName", "BackName")
++      )
++    )
++    .toString
++
++  val person = Person(
++    generatedNino,
++    "Firstname",
++    "Surname",
++    isDeceased = false,
++    manualCorrespondenceInd = false,
++    Address("", "", "", "", "")
++  )
++  val employments = Json.obj("data" -> Json.obj("employments" -> Seq.empty[JsValue]))
++  val taxAccountSummary = Json.obj("data" -> Json.toJson(TaxAccountSummary(0, 0, 0, 0, 0)))
++  val employer1 = Employers("Employer", "reference", List(YearAndMonth("2020-01"), YearAndMonth("2021-01")))
++  val jrsClaim = JrsClaims(List(employer1))
++
++  val taxBand = TaxBand("B", "BR", 16500, 1000, Some(0), Some(16500), 20)
++  val incomeCatergories = IncomeCategory(NonSavingsIncomeCategory, 1000, 5000, 16500, Seq(taxBand))
++  val totalTax: TotalTax = TotalTax(1000, Seq(incomeCatergories), None, None, None)
++
++  val taxCodeRecordJson =
++    """[{"taxCodeId":2,"taxCode":"1100L","basisOfOperation":"Week 1 Month 1","startDate":"2023-09-14","endDate":"2024-04-05","employerName":"Asda","payrollNumber":"NPSQAR-62","pensionIndicator":false,"primary":true}]"""
++
++  val incomeJson: JsValue = Json.obj(
++    "data" -> Json.obj(
++      "taxCodeIncomes" -> JsArray(),
++      "nonTaxCodeIncomes" -> Json.obj(
++        "otherNonTaxCodeIncomes" -> Json.arr(
++          Json.obj(
++            "incomeComponentType" -> "Profit",
++            "amount"              -> 100,
++            "description"         -> "Profit"
++          )
++        )
++      )
++    ),
++    "links" -> Json.arr()
++  )
++
++  private val oneEmployment =
++    """{
++          "data" : {
++            "name": "company name",
++            "employmentStatus" : "Live",
++            "payrollNumber": "123",
++            "startDate": "2016-05-26",
++            "endDate": "2016-05-26",
++            "annualAccounts": [],
++            "taxDistrictNumber": "123",
++            "payeNumber": "321",
++            "sequenceNumber": 2,
++            "isPrimary": true,
++            "hasPayrolledBenefit" : false,
++            "receivingOccupationalPension": false
++          }
++        }"""
++
++  val startYear = 2023
++  val numberOfYears = Random.between(2, 10)
++
++  def taxCodeRecord(year: Int) = TaxCodeRecord(
++    s"${year}X",
++    TaxYear.apply(year).start,
++    TaxYear.apply(year).end,
++    Week1Month1BasisOfOperation,
++    s"employer$year",
++    pensionIndicator = false,
++    None,
++    primary = true
++  )
++
++  lazy val taxCodeChange: TaxCodeChange = {
++    val previousYears = (startYear - numberOfYears until startYear).map(taxCodeRecord).toList
++    val currentYears = (startYear - numberOfYears to startYear).map(taxCodeRecord).toList
++    TaxCodeChange(previousYears, currentYears)
++  }
++
++  val taxCodeComparisonJson = Json.obj(
++    "data" -> Json.obj(
++      "previous" -> Json.arr(
++        Json.obj(
++          "componentType" -> Json.toJson[TaxComponentType](CarBenefit),
++          "employmentId"  -> 1,
++          "amount"        -> 1,
++          "description"   -> "Car Benefit",
++          "iabdCategory"  -> "Benefit",
++          "inputAmount"   -> 1
++        )
++      ),
++      "current" -> Json.arr(
++        Json.obj(
++          "componentType" -> Json.toJson[TaxComponentType](CarBenefit),
++          "employmentId"  -> 1,
++          "amount"        -> 1,
++          "description"   -> "Car Benefit",
++          "iabdCategory"  -> "Benefit",
++          "inputAmount"   -> 1
++        )
++      )
++    )
++  )
++
++  override def beforeEach() = {
++    super.beforeEach()
++
++    when(mockFeatureFlagService.get(CyPlusOneToggle)).thenReturn(Future.successful(FeatureFlag(CyPlusOneToggle, true)))
++    when(mockFeatureFlagService.get(IncomeTaxHistoryToggle))
++      .thenReturn(Future.successful(FeatureFlag(IncomeTaxHistoryToggle, true)))
++    when(mockFeatureFlagService.get(SCAWrapperToggle))
++      .thenReturn(Future.successful(FeatureFlag(SCAWrapperToggle, true)))
++    server.stubFor(
++      get(urlEqualTo(s"/tai/$generatedNino/person"))
++        .willReturn(ok(Json.obj("data" -> Json.toJson(person)).toString))
++    )
++
++    server.stubFor(
++      get(urlEqualTo(s"/tai/$generatedNino/tax-account/${LocalDate.now().getYear + 1}/summary"))
++        .willReturn(ok(Json.toJson(taxAccountSummary).toString))
++    )
++
++    server.stubFor(
++      get(urlEqualTo(s"/tai/$generatedNino/tax-account/tax-code-change/exists"))
++        .willReturn(ok("false"))
++    )
++
++    for (year <- LocalDate.now().getYear - 5 to LocalDate.now().getYear + 1) {
++      server.stubFor(
++        get(urlEqualTo(s"/tai/$generatedNino/employments/years/$year"))
++          .willReturn(ok(Json.toJson(employments).toString))
++      )
++      server.stubFor(
++        get(urlEqualTo(s"/tai/$generatedNino/tax-account/$year/summary"))
++          .willReturn(ok(Json.toJson(taxAccountSummary).toString))
++      )
++      server.stubFor(
++        get(urlEqualTo(s"/tai/$generatedNino/tax-account/$year/income/tax-code-incomes"))
++          .willReturn(
++            ok(taxCodeIncomesJson)
++          )
++      )
++      server.stubFor(
++        get(urlEqualTo(s"/tai/$generatedNino/tax-account/$year/total-tax"))
++          .willReturn(ok(s"""{"data": ${Json.toJson(totalTax).toString()}}"""))
++      )
++
++    }
++
++    server.stubFor(
++      get(urlEqualTo(s"/tai/$generatedNino/employments/1"))
++        .willReturn(ok(oneEmployment))
++    )
++    server.stubFor(
++      get(urlEqualTo(s"/coronavirus-jrs-published-employees/employee/$generatedNino"))
++        .willReturn(ok(Json.toJson(jrsClaim).toString()))
++    )
++
++    case class stubValuesData(journeyName: String, keyName: String, valueReturned: String)
++
++    val nameValueUrls = List(
++      stubValuesData("add-employment", "employmentName", "H M Revenue and Customs"),
++      stubValuesData("add-pension-provider", "pensionProviderName", "H M Revenue and Customs"),
++      stubValuesData("end-employment", "employmentId", "1"),
++      stubValuesData("update-employment", "employmentId", "1"),
++      stubValuesData("update-employment", "employmentDetails", "Details"),
++      stubValuesData("update-income", "updateIncomeHowToUpdate", "1"),
++      stubValuesData("update-income", "updateIncomeWorkingHours", EditIncomeIrregularPayConstants.RegularHours),
++      stubValuesData("update-income", "updateIncomePayslipDeductionsKey", "1"),
++      stubValuesData("update-income", "updateIncomeBonusPaymentsKey", "4000"),
++      stubValuesData("update-income", "updateIncomeTaxablePayKey", "4000"),
++      stubValuesData("update-income", "updateIncomeBonusOvertimeAmountKey", "4000"),
++      stubValuesData("update-income", "updateIncomeEmploymentIdKey", "1"),
++      stubValuesData("update-income", "updateIncomeConfirmedAmountKey-1", "1000"),
++      stubValuesData("update-income", "updateIncomeNewAmountKey", "1000"),
++      stubValuesData("update-previous-years-income", "incomeDetails", "Details"),
++      stubValuesData("update-previous-years-income", "updateIncomeTelephoneContactAllowed", "No"),
++      stubValuesData("update-previous-years-income", "updateIncomeTelephoneNumber", ""),
++      stubValuesData("end-company-benefit", "benefitType", "Telephone"),
++      stubValuesData("end-company-benefit", "Telephone%20decisionChoice", "No"),
++      stubValuesData("update-pension-provider", "pensionProviderId", "1"),
++      stubValuesData("update-next-years-income", "update-next-years-new-amount-1", "1")
++    )
++    nameValueUrls.foreach { stubData =>
++      server.stubFor(
++        get(urlEqualTo(s"/tai/journey-cache/${stubData.journeyName}/values/${stubData.keyName}"))
++          .willReturn(
++            ok(Json.toJson(stubData.valueReturned).toString())
++          )
++      )
++    }
++    server.stubFor(
++      post(s"/tai/journey-cache/update-employment")
++        .willReturn(ok("""{
++                         |"employmentName":"H M Revenue and Customs",
++                         |"employmentDetails":"",
++                         |"employmentId":"1",
++                         |"employmentTelephoneContactAllowed":"No",
++                         |"employmentTelephoneNumber":""}""".stripMargin))
++    )
++    server.stubFor(
++      post(s"/tai/journey-cache/update-previous-years-income")
++        .willReturn(ok(s"""{
++                          |"taxYear":"${TaxYear().prev.year}",
++                          |"employmentDetails":"",
++                          |"employmentId":"1",
++                          |"employmentTelephoneContactAllowed":"No",
++                          |"employmentTelephoneNumber":""}""".stripMargin))
++    )
++
++    server.stubFor(
++      get(s"/tai/journey-cache/update-income")
++        .willReturn(ok(s"""{
++                          |"updateIncomeEmploymentName":"H M Revenue and Customs",
++                          |"updateIncomeEmploymentIdKey":"1",
++                          |"updateIncomeConfirmedAmountKey":"1000",
++                          |"updateIncomeIncomeTypeKey":"0",
++                          |"updateIncomeConfirmedAmountKey-1":"100",
++                          |"updateIncomePayPeriodKey":"monthly",
++                          |"updateIncomeTotalSalaryKey":"1000",
++                          |"updateIncomePayslipDeductionsKey":"key",
++                          |"updateIncomeBonusPaymentsKey":"200",
++                          |"updateIncomeIrregularAnnualPayKey":"50000",
++                          |"updateIncomePayToDateKey":"60000",
++                          |"updateIncomeNewAmountKey":"5000"}""".stripMargin))
++    )
++
++    server.stubFor(
++      post(s"/tai/journey-cache/update-income")
++        .willReturn(ok(s"""{
++                          |"updateIncomeEmploymentName":"H M Revenue and Customs",
++                          |"updateIncomeEmploymentIdKey":"1",
++                          |"updateIncomeConfirmedAmountKey":"1000",
++                          |"updateIncomeIncomeTypeKey":"0",
++                          |"updateIncomeConfirmedAmountKey-1":"100",
++                          |"updateIncomePayPeriodKey":"monthly",
++                          |"updateIncomeTotalSalaryKey":"1000",
++                          |"updateIncomePayslipDeductionsKey":"key",
++                          |"updateIncomeBonusPaymentsKey":"200",
++                          |"updateIncomeIrregularAnnualPayKey":"50000",
++                          |"updateIncomePayToDateKey":"60000"}""".stripMargin))
++    )
++
++    server.stubFor(
++      get(s"/tai/journey-cache/update-pension-provider")
++        .willReturn(ok(s"""{
++                          |"pensionProviderName":"pensionProviderName",
++                          |"pensionProviderId":"1",
++                          |"receivePension":"Yes",
++                          |"telephoneContactAllowed":"No",
++                          |"telephoneNumber":"",
++                          |"pensionDetails":"pensionDetails"}""".stripMargin))
++    )
++
++    server.stubFor(
++      delete(s"/tai/journey-cache/update-income")
++        .willReturn(ok)
++    )
++
++    server.stubFor(
++      get(urlEqualTo("/tai/journey-cache/add-employment")).willReturn(
++        ok(
++          """{
++            |"employmentName":"H M Revenue and Customs",
++            |"employmentStartDate":"2022-07-10",
++            |"employmentStartDateWithinSixWeeks":"No",
++            |"employmentFirstPayReceived":"2022-08-10",
++            |"employmentPayrollNumberKnown":"No",
++            |"employmentPayrollNumber":"I do not know",
++            |"employmentTelephoneContactAllowed":"No",
++            |"employmentTelephoneNumber":""}""".stripMargin
++        )
++      )
++    )
++
++    server.stubFor(
++      get(urlEqualTo("/tai/journey-cache/add-pension-provider")).willReturn(
++        ok(
++          """{
++            |"pensionProviderName":"H M Revenue and Customs",
++            |"pensionProviderStartDate":"2022-07-10",
++            |"pensionProviderStartDateWithinSixWeeks":"No",
++            |"pensionFirstPayment":"2022-08-10",
++            |"pensionProviderPayrollChoice":"No",
++            |"pensionProviderPayrollNumber":"I do not know",
++            |"pensionProviderTelephoneContactAllowed":"No",
++            |"pensionProviderTelephoneNumber":""}""".stripMargin
++        )
++      )
++    )
++
++    server.stubFor(
++      get(urlEqualTo("/tai/journey-cache/end-employment")).willReturn(
++        ok(
++          """{
++            |"employmentName":"H M Revenue and Customs",
++            |"employmentEndDate":"2022-07-10",
++            |"employmentLatestPaymentDate":"2022-08-10",
++            |"employmentTelephoneQuestion":"No",
++            |"employmentTelephoneNumber":"",
++            |"employmentId":"1",
++            |"employmentDecision":"No"}""".stripMargin
++        )
++      )
++    )
++
++    server.stubFor(
++      get(urlEqualTo("/tai/journey-cache/add-employment")).willReturn(
++        ok(
++          """{
++            |"employmentName":"H M Revenue and Customs",
++            |"employmentStartDate":"2022-07-10",
++            |"employmentStartDateWithinSixWeeks":"No",
++            |"employmentFirstPayReceived":"2022-08-10",
++            |"employmentPayrollNumberKnown":"No",
++            |"employmentPayrollNumber":"I do not know",
++            |"employmentTelephoneContactAllowed":"No",
++            |"employmentTelephoneNumber":""}""".stripMargin
++        )
++      )
++    )
++
++    server.stubFor(
++      get(urlEqualTo("/tai/journey-cache/update-employment")).willReturn(
++        ok(
++          """{
++            |"employmentId":"1",
++            |"employmentName":"H M Revenue and Customs",
++            |"employmentDetails":"Details",
++            |"employmentTelephoneContactAllowed":"No",
++            |"employmentTelephoneNumber":""}""".stripMargin
++        )
++      )
++    )
++
++    server.stubFor(
++      get(urlEqualTo("/tai/journey-cache/successful-journey")).willReturn(
++        ok(
++          """{
++            |"update-next-years-successful":"Yes",
++            |"employmentStartDate":"2022-07-10",
++            |"employmentStartDateWithinSixWeeks":"No",
++            |"employmentFirstPayReceived":"2022-08-10",
++            |"employmentPayrollNumberKnown":"No",
++            |"employmentPayrollNumber":"I do not know",
++            |"employmentTelephoneContactAllowed":"No",
++            |"employmentTelephoneNumber":""}""".stripMargin
++        )
++      )
++    )
++
++    server.stubFor(
++      get(s"/tai/journey-cache/update-previous-years-income")
++        .willReturn(ok(s"""{
++                          |"taxYear":"${LocalDate.now().getYear}",
++                          |"incomeDetails":"details",
++                          |"updateIncomeTelephoneContactAllowed":"No",
++                          |"updateIncomeTelephoneNumber":""}""".stripMargin))
++    )
++
++    server.stubFor(
++      get(s"/tai/journey-cache/end-company-benefit")
++        .willReturn(ok(s"""{
++                          |"employmentId":"1",
++                          |"employmentName":"employmentName",
++                          |"benefitType":"Telephone",
++                          |"stopDate":"${LocalDate.now()}",
++                          |"benefitValue":"1000",
++                          |"telephoneContactAllowed":"No",
++                          |"telephoneNumber":"",
++                          |"benefitName":"benefitName",
++                          |"referer":"referer"}""".stripMargin))
++    )
++
++    server.stubFor(
++      post(s"/tai/journey-cache/end-company-benefit")
++        .willReturn(ok(s"""{
++                          |"employmentId":"1",
++                          |"employmentName":"employmentName",
++                          |"benefitType":"Telephone",
++                          |"stopDate":"${LocalDate.now()}",
++                          |"benefitValue":"1000",
++                          |"telephoneContactAllowed":"No",
++                          |"telephoneNumber":"",
++                          |"benefitName":"benefitName",
++                          |"referer":"referer"}""".stripMargin))
++    )
++
++    server.stubFor(
++      get(s"/tai/journey-cache/update-next-years-income")
++        .willReturn(ok(s"""{
++                          |"update-next-years-employment-id":"1",
++                          |"update-next-years-employment-name":"employmentName",
++                          |"update-next-years-pension-indicator":"No",
++                          |"update-next-years-current-amount":"1000",
++                          |"update-next-years-new-amount":"1000",
++                          |"update-next-years-successful":"Yes"}""".stripMargin))
++    )
++
++    server.stubFor(
++      get(urlEqualTo(s"/tai/$generatedNino/tax-account/${LocalDate.now().getYear}/tax-code/latest"))
++        .willReturn(ok(s"""{"data":$taxCodeRecordJson}"""))
++    )
++
++    server.stubFor(
++      get(urlEqualTo(s"/tai/$generatedNino/tax-account/${LocalDate.now().getYear}/income"))
++        .willReturn(ok(incomeJson.toString))
++    )
++
++    server.stubFor(
++      post(urlEqualTo("/tai/calculator/calculate-estimated-pay"))
++        .willReturn(ok(Json.toJson(CalculatedPay(None, None)).toString()))
++    )
++
++    server.stubFor(
++      put(
++        s"/tai/$generatedNino/tax-account/snapshots/${LocalDate.now().getYear}/incomes/tax-code-incomes/1/estimated-pay"
++      )
++        .withHeader(CONTENT_TYPE, matching(ContentTypes.JSON))
++        .willReturn(
++          ok
++        )
++    )
++
++    server.stubFor(
++      get(s"/tai/$generatedNino/employments/year/${LocalDate.now().getYear}/status/ceased")
++        .willReturn(ok("""{"data": []}"""))
++    )
++    server.stubFor(
++      get(s"/tai/$generatedNino/tax-account/year/${LocalDate.now().getYear}/income/EmploymentIncome/status/Live")
++        .willReturn(ok("""{"data": []}"""))
++    )
++    server.stubFor(
++      get(s"/tai/$generatedNino/tax-account/year/${LocalDate.now().getYear}/income/EmploymentIncome/status/NotLive")
++        .willReturn(ok("""{"data": []}"""))
++    )
++    server.stubFor(
++      get(s"/tai/$generatedNino/tax-account/year/${LocalDate.now().getYear}/income/PensionIncome/status/Live")
++        .willReturn(ok("""{"data": []}"""))
++    )
++    server.stubFor(
++      get(s"/tai/$generatedNino/tax-account/tax-code-change")
++        .willReturn(ok(taxCodeChangeJson(taxCodeChange)))
++    )
++    server.stubFor(
++      get(s"/tai/$generatedNino/tax-account/tax-free-amount-comparison")
++        .willReturn(ok(taxCodeComparisonJson.toString()))
++    )
++  }
++
++  "/check-income-tax/" must {
++    urls.foreach { case (url, expectedData: ExpectedData) =>
++      s"pass content checks at url $url" in {
++
++        server.stubFor(
++          WireMock
++            .get(urlMatching("/single-customer-account-wrapper-data/message-data.*"))
++            .willReturn(ok(s"""{"count": 0}"""))
++        )
++
++        server.stubFor(
++          WireMock
++            .get(urlMatching("/single-customer-account-wrapper-data/wrapper-data.*"))
++            .willReturn(ok(wrapperDataResponse))
++        )
++
++        val result: Future[Result] = route(app, request(url)).get
++        val content = Jsoup.parse(contentAsString(result))
++
++        status(result) mustBe expectedData.httpStatus
++
++        content.title() mustBe expectedData.title
++
++        val govUkBanner = content.getElementsByClass("govuk-phase-banner")
++        govUkBanner.size() mustBe 1
++        govUkBanner.get(0).getElementsByClass("govuk-link").get(0).attr("href") must include(
++          "http://localhost:9250/contact/beta-feedback?service=TES"
++        )
++
++        val accessibilityStatement = content
++          .getElementsByClass("govuk-footer__link")
++          .asScala
++          .toList
++          .map(_.attr("href"))
++          .filter(_.contains("accessibility-statement"))
++          .head
++        accessibilityStatement must include(
++          "http://localhost:12346/accessibility-statement/check-income-tax?referrerUrl=http%3A%2F%2Flocalhost%3A12346%2Fcheck-income-tax"
++        )
++
++        if (expectedData.navBarExpected) {
++          val signoutLink = content
++            .getElementsByClass("hmrc-account-menu__link")
++            .asScala
++            .toList
++            .find(_.html().contains("Sign out"))
++            .get
++            .attr("href")
++          signoutLink mustBe "/check-income-tax/signout"
++        } else {
++          content
++            .getElementsByClass("hmrc-account-menu__link")
++            .asScala
++            .toList
++            .find(_.html().contains("Sign out")) mustBe None
++        }
++
++        val languageToggle = content.getElementsByClass("hmrc-language-select__list")
++        languageToggle.text() must include("English")
++        languageToggle.text() must include("Cymraeg")
++
++        val reportIssueText = content.getElementsByClass("hmrc-report-technical-issue").get(0).text()
++        val reportIssueLink = content.getElementsByClass("hmrc-report-technical-issue").get(0).attr("href")
++        reportIssueText must include("Is this page not working properly? (opens in new tab)")
++        reportIssueLink must include("/contact/report-technical-problem")
++
++        val serviceName = content.getElementsByClass("hmrc-header__service-name").get(0).text()
++        serviceName mustBe expectedData.headerTitle
++      }
++    }
++  }
++}
+Index: app/uk/gov/hmrc/tai/util/Timeout.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/util/Timeout.scala b/app/uk/gov/hmrc/tai/util/Timeout.scala
+new file mode 100644
+--- /dev/null	
++++ b/app/uk/gov/hmrc/tai/util/Timeout.scala	
+@@ -0,0 +1,41 @@
++/*
++ * Copyright 2023 HM Revenue & Customs
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++
++package uk.gov.hmrc.tai.util
++
++import akka.actor.ActorSystem
++import play.api.Logging
++
++import scala.concurrent._
++import scala.concurrent.duration._
++
++case object FutureEarlyTimeout extends RuntimeException
++
++trait Timeout extends Logging {
++  def system: ActorSystem
++
++  def withTimeout[A](timeoutDuration: FiniteDuration)(block: => Future[A])(implicit ec: ExecutionContext): Future[A] = {
++    val delayedFuture =
++      akka.pattern.after(timeoutDuration, system.scheduler) {
++        val exception = new RuntimeException(s"Future took longer than ${timeoutDuration.toSeconds}s")
++        logger.error(exception.getMessage + "\n" + exception.getStackTrace.mkString("\n"))
++        Future.failed(FutureEarlyTimeout)
++      }
++
++    Future.firstCompletedOf(Seq(block, delayedFuture))
++  }
++  Future.failed(FutureEarlyTimeout)
++}
+Index: app/uk/gov/hmrc/tai/config/Filters.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/config/Filters.scala b/app/uk/gov/hmrc/tai/config/Filters.scala
+new file mode 100644
+--- /dev/null	(date 1696950747570)
++++ b/app/uk/gov/hmrc/tai/config/Filters.scala	(date 1696950747570)
+@@ -0,0 +1,54 @@
++/*
++ * Copyright 2023 HM Revenue & Customs
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++
++package uk.gov.hmrc.tai.config
++
++import akka.stream.Materializer
++import play.api.http.{EnabledFilters, HttpFilters}
++import play.api.mvc.{EssentialFilter, RequestHeader, Result}
++import uk.gov.hmrc.mongoFeatureToggles.services.FeatureFlagService
++import uk.gov.hmrc.sca.connectors.ScaWrapperDataConnector
++import uk.gov.hmrc.sca.filters.WrapperDataFilter
++import uk.gov.hmrc.tai.model.admin.SCAWrapperToggle
++
++import javax.inject.{Inject, Singleton}
++import scala.concurrent.{ExecutionContext, Future}
++
++class SCAWrapperDataFilter @Inject() (
++  scaWrapperDataConnector: ScaWrapperDataConnector,
++  featureFlagService: FeatureFlagService
++)(implicit val ec: ExecutionContext, override val mat: Materializer)
++    extends WrapperDataFilter(scaWrapperDataConnector)(ec, mat) {
++
++  override def apply(f: RequestHeader => Future[Result])(rh: RequestHeader): Future[Result] =
++    featureFlagService.get(SCAWrapperToggle).flatMap { toggle =>
++      if (toggle.isEnabled) {
++        super.apply(f)(rh)
++      } else {
++        f(rh)
++      }
++    }
++}
++
++@Singleton
++class Filters @Inject() (
++  defaultFilters: EnabledFilters,
++  wrapperDataFilter: SCAWrapperDataFilter
++) extends HttpFilters {
++
++  override val filters: Seq[EssentialFilter] =
++    defaultFilters.filters ++ Some(wrapperDataFilter)
++}
+Index: app/uk/gov/hmrc/tai/connectors/HttpHandler.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala b/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala
+--- a/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala	
++++ b/app/uk/gov/hmrc/tai/connectors/HttpHandler.scala	(date 1696950749733)
+@@ -61,13 +61,14 @@
+           case UNAUTHORIZED => response
+           case _ =>
+             handleResponseEither(http, url)(response).fold(
+-              error => if (error.statusCode == BAD_REQUEST) {
+-                throw new BadRequestException("bad request")
+-               } else if (error.statusCode == NOT_FOUND){
+-                throw new NotFoundException("not found")
+-                }else{
+-                throw error
+-              },
++              error =>
++                if (error.statusCode == BAD_REQUEST) {
++                  throw new BadRequestException("bad request")
++                } else if (error.statusCode == NOT_FOUND) {
++                  throw new NotFoundException("not found")
++                } else {
++                  throw error
++                },
+               httpResponse => httpResponse
+             )
+         }
+Index: app/views/includes/HeadBlock.scala.html
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/views/includes/HeadBlock.scala.html b/app/views/includes/HeadBlock.scala.html
+new file mode 100644
+--- /dev/null	(date 1696950747593)
++++ b/app/views/includes/HeadBlock.scala.html	(date 1696950747593)
+@@ -0,0 +1,23 @@
++@*
++ * Copyright 2023 HM Revenue & Customs
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ *@
++
++@import views.html.helper.CSPNonce
++
++@this()
++@()(implicit request: Request[_])
++
++    <meta name="format-detection" content="telephone=no"/>
++    <link @CSPNonce.attr rel="stylesheet" href='@controllers.routes.AssetsController.versioned("stylesheets/tai.css")'/>
+Index: app/views/includes/AdditionalJavascript.scala.html
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/views/includes/AdditionalJavascript.scala.html b/app/views/includes/AdditionalJavascript.scala.html
+new file mode 100644
+--- /dev/null	(date 1696950747593)
++++ b/app/views/includes/AdditionalJavascript.scala.html	(date 1696950747593)
+@@ -0,0 +1,40 @@
++@*
++ * Copyright 2023 HM Revenue & Customs
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ *@
++
++@import views.html.helper.CSPNonce
++@import uk.gov.hmrc.webchat.client.WebChatClient
++@import uk.gov.hmrc.tai.config.ApplicationConfig
++
++@this(appConfig: ApplicationConfig,
++webChatClient: WebChatClient)
++@()(implicit request: Request[_])
++
++    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned(file = "javascripts/newcard.js")'></script>
++    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned(file = "javascripts/backlink.js")'></script>
++    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned("javascripts/print.js")'></script>
++    <script @CSPNonce.attr type="text/javascript">
++                window.onload = function() {
++                    var htmlElem = document.querySelector('html')
++                    var techIssueLink =  document.querySelector('a.hmrc-report-technical-issue');
++                    var lang = techIssueLink.getAttribute('lang')
++                    htmlElem.setAttribute("lang", lang);
++                }
++        </script>
++    @if(appConfig.webChatIsEnabled) {
++        @{webChatClient.loadRequiredElements()}
++        @{webChatClient.loadWebChatContainer("HMRC_Anchored_1")}
++    }
++
+Index: app/views/MainTemplate.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/views/MainTemplate.scala b/app/views/MainTemplate.scala
+new file mode 100644
+--- /dev/null	(date 1696950747575)
++++ b/app/views/MainTemplate.scala	(date 1696950747575)
+@@ -0,0 +1,125 @@
++/*
++ * Copyright 2023 HM Revenue & Customs
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++
++package views.html
++
++import com.google.inject.{ImplementedBy, Inject}
++import uk.gov.hmrc.tai.config.ApplicationConfig
++import play.api.Logging
++import play.api.data.Form
++import play.api.i18n.Messages
++import play.api.mvc.Request
++import play.twirl.api.{Html, HtmlFormat}
++import uk.gov.hmrc.mongoFeatureToggles.services.FeatureFlagService
++import uk.gov.hmrc.play.http.HeaderCarrierConverter
++import uk.gov.hmrc.sca.models.BannerConfig
++import uk.gov.hmrc.sca.services.WrapperService
++import uk.gov.hmrc.tai.model.admin.SCAWrapperToggle
++
++import scala.concurrent.Await
++import scala.concurrent.duration.{Duration, SECONDS}
++import views.html.oldMainTemplate
++import views.html.includes.{AdditionalJavascript, HeadBlock}
++
++@ImplementedBy(classOf[MainTemplateImpl])
++trait MainTemplate {
++  def apply(
++    title: String,
++    authedUser: Option[controllers.auth.AuthedUser] = None,
++    pageTitle: Option[String] = None,
++    backLinkUrl: Option[String] = Some("#"),
++    backLinkContent: Option[String],
++    backLinkId: String = "back-link",
++    disableSessionExpired: Boolean = false,
++    pagePrintable: Boolean = false,
++    pagePrintName: Option[String] = None,
++    showPtaAccountNav: Boolean = true,
++    formForErrorSummary: Option[Form[_]] = None
++  )(content: Html)(implicit request: Request[_], messages: Messages): HtmlFormat.Appendable
++}
++
++class MainTemplateImpl @Inject() (
++  appConfig: ApplicationConfig,
++  featureFlagService: FeatureFlagService,
++  wrapperService: WrapperService,
++  oldLayout: oldMainTemplate,
++  scripts: AdditionalJavascript,
++  headBlock: HeadBlock
++) extends MainTemplate with Logging {
++  override def apply(
++    title: String,
++    authedUser: Option[controllers.auth.AuthedUser] = None,
++    pageTitle: Option[String] = None,
++    backLinkUrl: Option[String] = Some("#"),
++    backLinkContent: Option[String],
++    backLinkId: String = "back-link",
++    disableSessionExpired: Boolean = false,
++    pagePrintable: Boolean = false,
++    pagePrintName: Option[String] = None,
++    showPtaAccountNav: Boolean = true,
++    formForErrorSummary: Option[Form[_]] = None
++  )(content: Html)(implicit request: Request[_], messages: Messages): HtmlFormat.Appendable = {
++    val scaWrapperToggle =
++      Await.result(featureFlagService.get(SCAWrapperToggle), Duration(appConfig.SCAWrapperFutureTimeout, SECONDS))
++
++    val prefix =
++      if (formForErrorSummary.exists(_.errors.nonEmpty)) {
++        s"${Messages("tai.page.title.error")} "
++      } else {
++        ""
++      }
++    val fullPageTitle = s"$prefix$title - ${Messages("tai.currentYearSummary.heading")} - GOV.UK"
++
++    if (scaWrapperToggle.isEnabled) {
++      logger.debug(s"SCA Wrapper layout used for request `${request.uri}``")
++      wrapperService.layout(
++        content = content,
++        pageTitle = Some(fullPageTitle),
++        serviceNameKey = Some(messages(pageTitle.getOrElse("tai.service.navTitle"))),
++        serviceNameUrl = Some(appConfig.taiHomePageUrl),
++//      sidebarContent: Option[Html] = None,
++        signoutUrl = controllers.routes.ServiceController.serviceSignout().url,
++        timeOutUrl = Some(controllers.routes.ServiceController.sessionExpiredPage().url),
++        keepAliveUrl = controllers.routes.ServiceController.keepAlive().url,
++        showBackLinkJS = backLinkContent.isDefined && backLinkUrl.contains("#"),
++        backLinkUrl = if (backLinkContent.isDefined) backLinkUrl else None,
++        // showSignOutInHeader: Boolean = false,
++        styleSheets = Seq(headBlock()),
++        scripts = Seq(scripts()),
++        bannerConfig = BannerConfig(false, true, false),
++        optTrustedHelper = authedUser.flatMap(_.trustedHelper),
++        fullWidth = true,
++        hideMenuBar = !showPtaAccountNav,
++        disableSessionExpired = disableSessionExpired
++      )(messages, HeaderCarrierConverter.fromRequest(request), request)
++    } else {
++      logger.debug(s"Old layout used for request `${request.uri}``")
++      oldLayout(
++        title,
++        authedUser,
++        pageTitle,
++        backLinkUrl,
++        backLinkContent,
++        backLinkId,
++        disableSessionExpired,
++        pagePrintable,
++        pagePrintName,
++        showPtaAccountNav,
++        formForErrorSummary
++      )(content)(request, messages)
++    }
++  }
++}
+Index: app/views/oldMainTemplate.scala.html
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/views/oldMainTemplate.scala.html b/app/views/oldMainTemplate.scala.html
+new file mode 100644
+--- /dev/null	(date 1696950747621)
++++ b/app/views/oldMainTemplate.scala.html	(date 1696950747621)
+@@ -0,0 +1,294 @@
++@*
++ * Copyright 2023 HM Revenue & Customs
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ *@
++
++@import help.Link
++@import uk.gov.hmrc.govukfrontend.views.html.components.{FixedWidthPageLayout, GovukBackLink, GovukLayout, TwoThirdsMainContent, TwoThirdsOneThirdMainContent, _}
++@import uk.gov.hmrc.govukfrontend.views.viewmodels.backlink.BackLink
++@import uk.gov.hmrc.govukfrontend.views.viewmodels.content.Text
++@import uk.gov.hmrc.govukfrontend.views.viewmodels.phasebanner.PhaseBanner
++@import uk.gov.hmrc.hmrcfrontend.config.AccountMenuConfig
++@import uk.gov.hmrc.hmrcfrontend.controllers.routes.LanguageController.switchToLanguage
++@import uk.gov.hmrc.hmrcfrontend.views.Aliases.Header
++@import uk.gov.hmrc.hmrcfrontend.views.html.components.implicits.RichAccountMenu
++@import uk.gov.hmrc.hmrcfrontend.views.html.helpers._
++@import uk.gov.hmrc.hmrcfrontend.views.viewmodels.accountmenu.BusinessTaxAccount
++@import uk.gov.hmrc.tai.config.ApplicationConfig
++@import uk.gov.hmrc.tai.util.constants.TaiConstants
++@import uk.gov.hmrc.webchat.client.WebChatClient
++@import views.html.helper.CSPNonce
++@import views.html.includes.attorneyBanner
++@import uk.gov.hmrc.ptafrontend.views.html._
++
++@this(
++        govukTemplate: GovukTemplate,
++        govukLayout: GovukLayout,
++        govukFooter: GovukFooter,
++        hmrcAccountMenu: HmrcAccountMenu,
++        hmrcHeader: HmrcHeader,
++        hmrcStandardHeader: HmrcStandardHeader,
++        hmrcStandardFooter: HmrcStandardFooter,
++        hmrcHead: HmrcHead,
++        hmrcLanguageSelectHelper: HmrcLanguageSelectHelper,
++        hmrcScripts: HmrcScripts,
++        govukBackLink: GovukBackLink,
++        defaultMainContent: TwoThirdsMainContent,
++        fixedWidthPageLayout: FixedWidthPageLayout,
++        twoThirdsMainContent: TwoThirdsMainContent,
++        twoThirdsOneThirdMainContent: TwoThirdsOneThirdMainContent,
++        hmrcTimeoutDialogHelper: HmrcTimeoutDialogHelper,
++        govukPhaseBanner: GovukPhaseBanner,
++        link: Link,
++        appConfig: ApplicationConfig,
++        hmrcReportTechnicalIssueHelper: HmrcReportTechnicalIssueHelper,
++        hmrcReportTechnicalIssue: HmrcReportTechnicalIssue,
++        banner: attorneyBanner,
++        webChatClient: WebChatClient,
++        ptaHead: PtaHead,
++        ptaScripts: PtaScripts
++)(implicit accountMenuConfig: AccountMenuConfig)
++
++
++@(
++        title: String,
++        authedUser: Option[controllers.auth.AuthedUser] = None,
++        pageTitle: Option[String] = None,
++        backLinkUrl: Option[String] = Some("#"),
++        backLinkContent: Option[String],
++        backLinkId: String = "back-link",
++        disableSessionExpired: Boolean = false,
++        pagePrintable: Boolean = false,
++        pagePrintName: Option[String] = None,
++        showPtaAccountNav: Boolean = true,
++        formForErrorSummary: Option[Form[_]] = None
++)(content: Html)(implicit request: Request[_],
++        messages: Messages)
++
++
++@isUserResearchBannerHidden = @{request.cookies.exists((x: Cookie) => x.name == "mdtpurr")}
++
++@isGG = @{
++    authedUser.fold(false) {
++        _.providerType.contains(TaiConstants.AuthProviderGG)
++    }
++}
++
++@isSa = @{
++    authedUser.fold(false) {
++        _.utr.isDefined
++    }
++}
++
++@attorneyBanner = @{
++    for {
++        auth <- authedUser
++        helper <- auth.trustedHelper
++    } yield banner(helper)
++}
++
++@unreadMessageCount = @{
++    authedUser match {
++        case Some(x) => x.messageCount
++        case None => None
++    }
++}
++
++
++@additionalHeadBlock = {
++    <meta name="format-detection" content="telephone=no"/>
++    <link rel="stylesheet" href='@controllers.routes.Assets.versioned("stylesheets/tai.css")'/>
++    @ptaHead()
++    @if(!disableSessionExpired) {
++        @hmrcTimeoutDialogHelper(
++            signOutUrl = routes.ServiceController.sessionExpiredPage().url,
++            keepAliveUrl = Some("/keep-alive")
++        )
++    }
++    <link @CSPNonce.attr rel="stylesheet" href='@controllers.routes.Assets.versioned("stylesheets/tai.css")'/>
++@if(!disableSessionExpired) {
++    @hmrcTimeoutDialogHelper(
++        signOutUrl = routes.ServiceController.sessionExpiredPage().url,
++        keepAliveUrl = Some("/keep-alive")
++    )
++}
++}
++
++@urBanner = {
++    <div class="hmrc-user-research-banner" data-module="hmrc-user-research-banner">
++        <div class="hmrc-user-research-banner__container govuk-width-container">
++            <div class="hmrc-user-research-banner__text">
++                <div class="hmrc-user-research-banner__title govuk-!-font-weight-bold">
++                    @{Messages("tai.urbanner.title")}
++                </div>
++                    <a class="govuk-link hmrc-user-research-banner__link" rel="noopener noreferrer" href="@appConfig.urBannerLink" target="_blank">
++                            @{Messages("tai.urbanner.text")}
++                    </a>
++            </div>
++            <button class="govuk-link hmrc-user-research-banner__close">
++            @messages("tai.urbanner.reject")
++            </button>
++        </div>
++    </div>
++}
++
++@headerBlock = {
++    @hmrcHeader(Header(
++        homepageUrl = "http://www.gov.uk",
++        serviceName = pageTitle,
++        serviceUrl = "",
++        language = En,
++        assetsPath = uk.gov.hmrc.hmrcfrontend.controllers.routes.Assets.at("govuk/images").url,
++        displayHmrcBanner = false,
++        inputLanguageToggle = Some(LanguageToggle((En, switchToLanguage(En.code).url), (Cy, switchToLanguage(Cy.code).url)))
++    ))
++
++    @if(!isUserResearchBannerHidden && appConfig.urBannerEnabled) {
++        @urBanner
++    }
++}
++
++
++@beforeContent = {
++    @authedUser.map { auth =>
++        @if(showPtaAccountNav) {
++            @if(isGG && isSa && !auth.trustedHelper.isDefined) {
++                @hmrcAccountMenu(AccountMenu(
++                    businessTaxAccount = Some(BusinessTaxAccount()),
++                    language = if(messages.lang.code == "cy") Cy else En,
++                    signOut = SignOut(href = routes.ServiceController.serviceSignout().url),
++                    messages = AccountMessages(messageCount = unreadMessageCount)
++                ).withUrlsFromConfig())
++            } else {
++                @hmrcAccountMenu(AccountMenu(
++                    language = if(messages.lang.code == "cy") Cy else En,
++                    signOut = SignOut(href = routes.ServiceController.serviceSignout().url),
++                    messages = AccountMessages(messageCount = unreadMessageCount)
++                ).withUrlsFromConfig())
++            }
++        }
++
++    }
++
++    @attorneyBanner
++
++@if(backLinkContent){
++    @backLinkUrl.map(url =>
++        govukBackLink(
++            BackLink(classes = "js-visible-back",
++            attributes = Map("id" -> backLinkId),
++            href = url,
++            content = Text(backLinkContent.get)))
++        )
++    }
++}
++
++
++
++@contentBlock = {
++    @content
++    <div class="govuk-grid-row govuk-!-margin-top-9">
++        <div class="govuk-grid-column-one-half govuk-!-margin-bottom-5">
++        @hmrcReportTechnicalIssueHelper()
++        </div>
++    </div>
++
++
++    @govukPhaseBanner(PhaseBanner(
++        tag = Some(Tag(
++            content = Text("beta")
++        )),
++        content = HtmlContent(messages("betaBanner.message",
++            link(link = appConfig.betaFeedbackUnauthenticatedUrl,
++                messageKey = "betaBanner.linkText",
++                inParagraph = true)))
++    ))
++}
++
++
++@fullPageTitle = @{
++    val prefix =
++        if(formForErrorSummary.exists(_.errors.nonEmpty)) {
++            s"${Messages("tai.page.title.error")} "
++        } else {
++            ""
++        }
++    s"$prefix$title - ${Messages("tai.currentYearSummary.heading")} - GOV.UK"
++}
++
++
++@accessibilityStatementUrl = @{
++    (appConfig.accessibilityStatementUrl(request.uri))
++}
++
++
++@mainContentDefault = {
++    <div class="govuk-grid-row">
++        <div class="govuk-grid-column-full-width govuk-!-margin-left-3 govuk-!-margin-right-3">
++        @contentBlock
++        </div>
++    </div>
++}
++
++
++@footerBlock = @{
++    Some(hmrcStandardFooter(accessibilityStatementUrl = Some(accessibilityStatementUrl.toString())))
++}
++
++@footerDefault = {
++@footerBlock.getOrElse("")
++}
++
++
++@addPrintableClass = @{
++    if(pagePrintable) {
++        "printable-page " + pagePrintName.getOrElse("")
++    } else ""
++}
++
++@additionalScriptsBlock = {
++    @ptaScripts()
++    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned("javascripts/newcard.js")'></script>
++    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned("javascripts/backlink.js")'></script>
++    <script @CSPNonce.attr src='@controllers.routes.AssetsController.versioned("javascripts/print.js")'></script>
++
++
++    <script @CSPNonce.attr type="text/javascript">
++            window.onload = function() {
++                var htmlElem = document.querySelector('html')
++                var techIssueLink =  document.querySelector('a.hmrc-report-technical-issue');
++                var lang = techIssueLink.getAttribute('lang')
++                htmlElem.setAttribute("lang", lang);
++            }
++    </script>
++    @if(appConfig.webChatIsEnabled) {
++      @{webChatClient.loadRequiredElements()}
++      @{webChatClient.loadWebChatContainer("HMRC_Anchored_1")}
++    }
++}
++
++
++@govukTemplate(
++    htmlLang = Some("en"),
++    pageTitle = Some(fullPageTitle),
++    headBlock = Some(hmrcHead(headBlock = Some(additionalHeadBlock))),
++    headerBlock = headerBlock,
++    beforeContentBlock = Some(beforeContent),
++    mainClasses = Some("govuk-main-wrapper--auto-spacing"),
++    bodyClasses = Some(addPrintableClass),
++    bodyEndBlock = Some(hmrcScripts(scriptsBlock = Some(additionalScriptsBlock))),
++    footerBlock = footerDefault
++)(mainContentDefault)
++
++
+Index: app/assets/javascripts/print.js
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/assets/javascripts/print.js b/app/assets/javascripts/print.js
+new file mode 100644
+--- /dev/null	(date 1696950747565)
++++ b/app/assets/javascripts/print.js	(date 1696950747565)
+@@ -0,0 +1,10 @@
++const printlink = document.getElementById('printLink');
++
++if(printlink != null && printlink != 'undefined' ) {
++
++    printlink.addEventListener("click", function (e) {
++        e.preventDefault();
++        window.print();
++    });
++};
++
+Index: app/assets/javascripts/tai-backlink.js
+===================================================================
+diff --git a/app/assets/javascripts/tai-backlink.js b/app/assets/javascripts/tai-backlink.js
+deleted file mode 100644
+--- a/app/assets/javascripts/tai-backlink.js	
++++ /dev/null	
+@@ -1,14 +0,0 @@
+-/* Back link configuration */
+-// store referrer value to cater for IE - https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10474810/  */
+-var docReferrer = document.referrer
+-if (window.history && window.history.replaceState && typeof window.history.replaceState === 'function') {
+-    window.history.replaceState(null, null, window.location.href);
+-}
+-var backLinkElem = document.getElementById("backLink");
+-if (backLinkElem !=  null){
+-    if (window.history && window.history.back && typeof window.history.back === 'function') {
+-        var backScript = (docReferrer === "" || docReferrer.indexOf(window.location.host) !== -1) ? "javascript:window.history.back(); return false;" : "javascript:void(0);"
+-        backLinkElem.setAttribute("onclick",backScript);
+-        backLinkElem.setAttribute("href","javascript:void(0);");
+-    }
+-}
+\ No newline at end of file
+Index: app/assets/stylesheets/modules/_printSCA.scss
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/assets/stylesheets/modules/_printSCA.scss b/app/assets/stylesheets/modules/_printSCA.scss
+new file mode 100644
+--- /dev/null	(date 1696950747566)
++++ b/app/assets/stylesheets/modules/_printSCA.scss	(date 1696950747566)
+@@ -0,0 +1,235 @@
++.print-table__header--highlight {
++    border-bottom: 2px solid #005EA5;
++}
++.print-table__header--secondary {
++    color: #6f777b;
++}
++
++.print-table__link{
++    padding: 5px 0px 5px 0px;
++    font-size: 16px;
++}
++
++.print-table {
++    text-align: left;
++}
++
++.print-table th {
++    width: 30%;
++    padding-bottom: 6px;
++}
++
++#print-date-column th{
++    width: 20%;
++    padding-bottom: 6px;
++}
++
++.print-table {
++  border-collapse: collapse;
++}
++
++tr.print-pension-contributions-data td {
++  border-bottom-style: solid;
++  border-bottom-width: 1px;
++  border-bottom-color: #bfc1c3;
++  padding-top: 5px;
++  padding-bottom: 5px;
++}
++
++.print-table__row--bold td, th{
++  font-weight: bold;
++  border-bottom-style: solid;
++  border-bottom-width: 1px;
++  border-bottom-color: #bfc1c3;
++  padding-top: 5px;
++  padding-bottom: 5px;
++}
++
++#print-date-column {
++  width: 18%;
++}
++
++#print-taxable-income-column {
++  width: 23%;
++}
++
++#print-income-tax-paid-column {
++  width: 22%;
++}
++
++.print-text--right {
++  text-align: right;
++}
++
++@-ms-viewport {
++  width: device-width;
++}
++@-o-viewport {
++  width: device-width;
++}
++@-ms-viewport {
++  width: device-width;
++}
++@-o-viewport {
++  width: device-width;
++}
++@-ms-viewport {
++  width: device-width;
++}
++@-o-viewport {
++  width: device-width;
++}
++.print-grid-row:after {
++  content: "";
++  display: block;
++  clear: both;
++}
++.print-grid-row {
++  margin: 0 -15px;
++}
++
++#print-icon-important-multi {
++    float: left;
++    padding-bottom: 12%;
++    padding-right: 2%;
++}
++
++@media print {
++  @page {
++    size: portrait;
++    margin: 0mm;
++    padding: 1cm .5cm;
++  }
++  html {
++    margin: 0px;
++  }
++  main.govuk-main-wrapper div.grid.grid-1-3 .inner-block , .hide-for-print{
++    display: none;
++    visibility: hidden;
++  }
++
++  main.govuk-main-wrapper .print-banner {
++    display: block;
++    visibility: visible;
++    border-bottom: 3px solid #b1b4b6;
++    margin-bottom: 30px;
++    padding-bottom: 10px;
++   }
++
++  main.govuk-main-wrapper .print-banner .title {
++    float: right;
++    text-align: right;
++  }
++
++  main.govuk-main-wrapper .print-banner img {
++    width: 180px;
++    aspect-ratio: auto 180 / 48;
++    height: 48px;
++  }
++
++  main.govuk-main-wrapper .print-banner .hmrc-logo {
++    float:left;
++    margin-top:10px;
++  }
++
++  main.govuk-main-wrapper .print-banner .name{
++    text-align: right;
++    padding-top: 18px;
++  }
++
++
++  main.govuk-main-wrapper h1.heading-xlarge {
++    font-size: 2em;
++  }
++
++  main.govuk-main-wrapper h3.heading-large {
++    font-size: 1.5em;
++  }
++
++  main.govuk-main-wrapper .hmrc-user-research-banner,
++  main.govuk-main-wrapper .cbanner-govuk-cookie-banner,
++  main.govuk-main-wrapper a[href],
++  main.govuk-main-wrapper .hide-for-print,
++  main.govuk-main-wrapper .beta-banner,
++  main.govuk-main-wrapper header[role=banner],
++  main.govuk-main-wrapper .report-error,
++  main.govuk-main-wrapper.historic-pay-as-you-earn .govuk-phase-banner,
++  main.govuk-main-wrapper.historic-pay-as-you-earn .govuk-footer,
++  main.govuk-main-wrapper .govuk-phase-banner,
++  main.govuk-main-wrapper .govuk-footer,
++  main.govuk-main-wrapper .service-info,
++  main.govuk-main-wrapper .govuk-back-link {
++    display: none;
++    visibility: hidden;
++  }
++  header, nav, .govuk-back-link, footer, #attorneyBanner {
++        display: none;
++        visibility: hidden;
++   }
++
++  div.govuk-main-wrapper .display-tax-code-for-print {
++      display: inline!important;
++      visibility: visible!important;
++      text-decoration: none;
++      color: black;
++  }
++
++  main.govuk-main-wrapper a[href]:after {
++    content: none!important;
++  }
++
++  main.govuk-main-wrapper  div.govuk-grid-column-two-thirds {
++    width: 95%!important;
++    margin: 30px!important;
++  }
++
++
++  main.govuk-main-wrapper.future-pay-as-you-earn-summary .table__row--top-border,
++  main.govuk-main-wrapper.future-pay-as-you-earn-summary .table__footer--highlight,
++  main.govuk-main-wrapper.future-pay-as-you-earn-summary .highlight {
++  background-color:#fff
++  }
++ main.govuk-main-wrapper .only-visible-on-print {
++    display: inline-block;
++    visibility: visible;
++ }
++
++
++   main.govuk-main-wrapper div.card-body  {
++     background-color:#fff!important;
++   }
++
++   main.govuk-main-wrapper h3.card-heading a {
++     display: block!important;
++     visibility: visible!important;
++   }
++
++   main.govuk-main-wrapper #taxCodesLink {
++   display:inline!important;
++   visibility:visible!important;
++   color:black;
++   text-decoration:none;
++   }
++
++  main.govuk-main-wrapper #taxOnEmploymentIncomeDesc > #taxFreeAmountLink {
++  display:inline!important;
++  visibility:visible!important;
++  color:black;
++  text-decoration:none;
++  }
++
++  main.govuk-main-wrapper #estimatedIncomeLowDesc > #taxFreeAmountLink {
++  display:inline!important;
++  visibility:visible!important;
++  color:black;
++  text-decoration:none;
++  }
++
++  main.govuk-main-wrapper thead {display: table-row-group;}
++
++  main.govuk-main-wrapper details.govuk-details.only-visible-on-print > summary {
++    color: #000;
++  }
++
++
++}
+\ No newline at end of file
+Index: test/uk/gov/hmrc/tai/util/TimeoutSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala b/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala
+new file mode 100644
+--- /dev/null	
++++ b/test/uk/gov/hmrc/tai/util/TimeoutSpec.scala	
+@@ -0,0 +1,59 @@
++/*
++ * Copyright 2023 HM Revenue & Customs
++ *
++ * Licensed under the Apache License, Version 2.0 (the "License");
++ * you may not use this file except in compliance with the License.
++ * You may obtain a copy of the License at
++ *
++ *     http://www.apache.org/licenses/LICENSE-2.0
++ *
++ * Unless required by applicable law or agreed to in writing, software
++ * distributed under the License is distributed on an "AS IS" BASIS,
++ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++ * See the License for the specific language governing permissions and
++ * limitations under the License.
++ */
++
++package uk.gov.hmrc.tai.util
++
++import akka.actor.ActorSystem
++import org.scalatest.concurrent.ScalaFutures
++import utils.{BaseSpec, WireMockHelper}
++
++import scala.concurrent.Future
++import scala.concurrent.duration._
++
++class TimeoutSpec extends BaseSpec with ScalaFutures with Timeout with WireMockHelper {
++
++  val system = inject[ActorSystem]
++
++  implicit val config: PatienceConfig = PatienceConfig(5.seconds)
++
++  "Timeout" must {
++    "not time out within timeout window" in {
++      val timeoutInSeconds = 2
++
++      val result = withTimeout(timeoutInSeconds.seconds) {
++        akka.pattern.after((timeoutInSeconds - 1).seconds, system.scheduler) {
++          Future.successful(true)
++        }
++      }
++      result.futureValue mustBe true
++    }
++
++    "time out the request after timeout window" in {
++
++      val timeoutInSeconds = 1
++
++      val result = withTimeout(timeoutInSeconds.seconds) {
++        akka.pattern.after((timeoutInSeconds + 1).seconds, system.scheduler) {
++          Future.successful(true)
++        }
++      }
++
++      whenReady(result.failed) { e =>
++        e mustBe FutureEarlyTimeout
++      }
++    }
++  }
++}
+Index: test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/SessionConnectorSpec.scala	(date 1696950747658)
+@@ -18,19 +18,18 @@
+ 
+ import org.mockito.ArgumentMatchers.{any, eq => meq}
+ import org.mockito.Mockito
+-import org.scalatest.BeforeAndAfterEach
+ import uk.gov.hmrc.http.HttpResponse
+ import utils.BaseSpec
+ 
+ import scala.concurrent.duration._
+ import scala.concurrent.{Await, Future}
+ 
+-class SessionConnectorSpec extends BaseSpec with BeforeAndAfterEach {
++class SessionConnectorSpec extends BaseSpec {
+ 
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+-  override def beforeEach(): Unit =
++  override def beforeEach(): Unit = {
++    super.beforeEach()
+     Mockito.reset(httpHandler)
++  }
+ 
+   "Session Connector" must {
+     "return Http response" when {
+@@ -43,14 +42,16 @@
+ 
+     "call the proper url to invalidate the cache" in {
+       Await.result(sut.invalidateCache(), 5.seconds)
+-      verify(httpHandler, times(1)).deleteFromApi(meq("localhost/tai/session-cache"), any())(any(), any())
++      verify(httpHandler, times(1)).deleteFromApi(meq("localhost/tai/session-cache"))(any(), any(), any())
+     }
+   }
++
++  val httpHandler: HttpHandler = mock[HttpHandler]
+ 
+   def sut: SessionConnector = new SessionConnector(httpHandler, servicesConfig) {
+     override val serviceUrl: String = "localhost"
+ 
+-    when(httpHandler.deleteFromApi(any(), any())(any(), any()))
++    when(httpHandler.deleteFromApi(any())(any(), any(), any()))
+       .thenReturn(Future.successful(HttpResponse.apply(200, "")))
+ 
+   }
+Index: test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/TrackingConnectorSpec.scala	(date 1696950747659)
+@@ -16,10 +16,8 @@
+ 
+ package uk.gov.hmrc.tai.connectors
+ 
++import akka.actor.ActorSystem
+ import org.mockito.ArgumentMatchers.any
+-import org.mockito.Mockito
+-import org.scalatest.BeforeAndAfterEach
+-import org.scalatest.concurrent.ScalaFutures
+ import play.api.libs.json.Json
+ import uk.gov.hmrc.http.LockedException
+ import uk.gov.hmrc.tai.model.domain.tracking.{TrackedForm, TrackedFormAcquired, TrackedFormReceived}
+@@ -27,7 +25,49 @@
+ 
+ import scala.concurrent.Future
+ 
+-class TrackingConnectorSpec extends BaseSpec with BeforeAndAfterEach with ScalaFutures {
++class TrackingConnectorSpec extends BaseSpec {
++
++  override def beforeEach(): Unit = {
++    super.beforeEach()
++    reset(httpHandler)
++  }
++
++  "Tracking Url" should {
++    "fetch the correct service url" when {
++      "given an id and idType" in {
++        sut.trackingUrl(nino.nino) mustBe s"mockUrl/tracking-data/user/nino/${nino.nino}"
++      }
++    }
++  }
++
++  "getUserTracking" should {
++    "fetch the user tracking details" when {
++      "provided with id and idType" in {
++        when(httpHandler.getFromApiV2(any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(trackedFormSeqJson)))
++
++        val result = sut.getUserTracking(nino.nino)
++        result.futureValue mustBe trackedFormSeq
++      }
++    }
++
++    "return an empty response" when {
++      "json is not valid" in {
++        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse("""{}""")))
++
++        val result = sut.getUserTracking(nino.nino)
++        result.futureValue mustBe Seq.empty[TrackedForm]
++      }
++
++      "getFromApiV2 throws" in {
++        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.failed(new LockedException("locked")))
++
++        val result = sut.getUserTracking(nino.nino)
++        result.futureValue mustBe Seq.empty[TrackedForm]
++      }
++    }
++
++  }
+ 
+   val trackedFormSeqJson =
+     """{"submissions":[{"formId":"R39_EN","formName":"TES1","dfsSubmissionReference":"123-ABCD-456","businessArea":"PSA",
+@@ -47,52 +87,12 @@
+                            {"milestone": "Done","status": "incomplete"}
+                          ]}]}"""
+ 
+-  val trackedFormSeq: Seq[TrackedForm] =
++  val trackedFormSeq =
+     Seq(TrackedForm("R39_EN", "TES1", TrackedFormReceived), TrackedForm("R38_EN", "TES2", TrackedFormAcquired))
+ 
+   val httpHandler: HttpHandler = mock[HttpHandler]
+ 
+-  def sut: TrackingConnector = new TrackingConnector(httpHandler, servicesConfig, appConfig) {
++  def sut: TrackingConnector = new TrackingConnector(httpHandler, servicesConfig, appConfig, inject[ActorSystem]) {
+     override lazy val serviceUrl: String = "mockUrl"
+-  }
+-  override def beforeEach(): Unit =
+-    Mockito.reset(httpHandler)
+-
+-  "Tracking Url" should {
+-    "fetch the correct service url" when {
+-      "given an id and idType" in {
+-        sut.trackingUrl(nino.nino) mustBe s"mockUrl/tracking-data/user/nino/${nino.nino}"
+-      }
+-    }
+-  }
+-
+-  "getUserTracking" should {
+-    "fetch the user tracking details" when {
+-      "provided with id and idType" in {
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(trackedFormSeqJson)))
+-
+-        val result = sut.getUserTracking(nino.nino)
+-        result.futureValue mustBe trackedFormSeq
+-      }
+-    }
+-
+-    "return an empty response" when {
+-      "json is not valid" in {
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(Json.parse("""{}""")))
+-
+-        val result = sut.getUserTracking(nino.nino)
+-        result.futureValue mustBe Seq.empty[TrackedForm]
+-      }
+-
+-      "getFromApiV2 throws" in {
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.failed(new LockedException("locked")))
+-
+-        val result = sut.getUserTracking(nino.nino)
+-        result.futureValue mustBe Seq.empty[TrackedForm]
+-      }
+-    }
+-
+   }
+ }
+Index: test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/EmploymentsConnectorSpec.scala	(date 1696950747658)
+@@ -17,8 +17,6 @@
+ package uk.gov.hmrc.tai.connectors
+ 
+ import org.mockito.ArgumentMatchers.{any, eq => meq}
+-import org.mockito.Mockito
+-import org.scalatest.BeforeAndAfterEach
+ import play.api.libs.json.{JsString, Json}
+ import uk.gov.hmrc.http.HttpResponse
+ import uk.gov.hmrc.tai.model.TaxYear
+@@ -31,9 +29,279 @@
+ import scala.concurrent.{Await, Future}
+ import scala.language.postfixOps
+ 
+-class EmploymentsConnectorSpec extends BaseSpec with BeforeAndAfterEach {
++class EmploymentsConnectorSpec extends BaseSpec {
++
++  override def beforeEach(): Unit = {
++    super.beforeEach()
++    reset(httpHandler)
++  }
++
++  "EmploymentsConnector employments" must {
++    "return a blank the service url" when {
++      "no service url is provided" in {
++        sut().serviceUrl mustBe ""
++      }
++    }
++
++    "return a valid service url" when {
++      "a service url is provided" in {
++        val url = "test/serviceurl/"
++        sut(url).serviceUrl mustBe url
++      }
++    }
++
++    "return the URL of the employments API" when {
++      "a nino is provided" in {
++        sut("test/service")
++          .employmentServiceUrl(nino, year) mustBe s"test/service/tai/$nino/employments/years/${year.year}"
++      }
++    }
++
++    "return the URL of the employments API without service URL" when {
++      "no serviceUrl is given" in {
++        sut().employmentServiceUrl(nino, year) mustBe s"/tai/$nino/employments/years/${year.year}"
++      }
++    }
++
++    "call the employments API with a URL containing a service URL" when {
++      "the service URL is supplied" in {
++        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
++
++        val responseFuture = sut("test/service").employments(nino, year)
++
++        Await.result(responseFuture, 5 seconds)
++        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
++      }
++    }
++
++    "call the employments API with a URL containing a service URL" when {
++
++      "the service URL is not supplied" in {
++
++        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
++
++        val responseFuture = sut().employments(nino, year)
++
++        Await.result(responseFuture, 5 seconds)
++
++        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"))(any(), any())
++      }
++    }
++
++    "return employments from the employments API" when {
++
++      "api provides one employments" in {
++
++        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(oneEmployment)))
++
++        val responseFuture = sut().employments(nino, year)
++
++        val result = Await.result(responseFuture, 5 seconds)
++
++        result mustBe oneEmploymentDetails
++
++        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"))(any(), any())
++      }
++
++      "api provides multiple employments" in {
++
++        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(twoEmployments)))
++
++        val responseFuture = sut("test/service").employments(nino, year)
++
++        val result = Await.result(responseFuture, 5 seconds)
++
++        result mustBe twoEmploymentsDetails
++
++        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
++      }
++    }
++
++    "return nil when api returns zero employments" in {
++
++      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(zeroEmployments)))
++
++      val responseFuture = sut("test/service").employments(nino, year)
++
++      val result = Await.result(responseFuture, 5 seconds)
++
++      result mustBe Nil
++
++      verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"))(any(), any())
++    }
++
++    "throw an exception" when {
++      "invalid json has returned by api" in {
++
++        when(httpHandler.getFromApiV2(any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
++
++        val ex = the[RuntimeException] thrownBy Await.result(sut("test/service").employments(nino, year), 5 seconds)
++        ex.getMessage mustBe "Invalid employment json"
++      }
++    }
++
++  }
++
++  "EmploymentsConnector ceasedEmployments" must {
++
++    "return employments from the employments API" when {
++
++      "api provides one employments" in {
++
++        when(httpHandler.getFromApiV2(any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(oneCeasedEmployment)))
++
++        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
++
++        val result = Await.result(responseFuture, 5 seconds)
++
++        result mustBe oneCeasedEmploymentDetails
++
++        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(
++          any(),
++          any()
++        )
++      }
++
++      "api provides multiple employments" in {
++
++        when(httpHandler.getFromApiV2(any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse(twoCeasedEmployments)))
++
++        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
++
++        val result = Await.result(responseFuture, 5 seconds)
++
++        result mustBe twoCeasedEmploymentsDetails
++
++        verify(httpHandler).getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(
++          any(),
++          any()
++        )
++      }
++    }
++
++    "return nil when api returns zero employments" in {
++
++      when(httpHandler.getFromApiV2(any())(any(), any()))
++        .thenReturn(Future.successful(Json.parse(zeroCeasedEmployments)))
++
++      val responseFuture = sut("test/service").ceasedEmployments(nino, year)
++
++      val result = Await.result(responseFuture, 5 seconds)
++
++      result mustBe Nil
++
++      verify(httpHandler)
++        .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"))(any(), any())
++    }
++
++    "throw an exception" when {
++      "invalid json has returned by api" in {
++
++        when(httpHandler.getFromApiV2(any())(any(), any()))
++          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
++
++        val ex = the[RuntimeException] thrownBy Await
++          .result(sut("test/service").ceasedEmployments(nino, year), 5 seconds)
++        ex.getMessage mustBe "Invalid employment json"
++      }
++    }
++  }
++
++  "EmploymentsConnector employment" must {
++
++    "return service url" in {
++      sut("test").employmentUrl(nino, "123") mustBe s"test/tai/$nino/employments/123"
++    }
++
++    "return an employment from current year" when {
++      "valid id has been passed" in {
++        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(anEmployment)))
++
++        val result = Await.result(sut().employment(nino, "123"), 5.seconds)
++
++        result mustBe Some(anEmploymentObject)
++        verify(httpHandler, times(1)).getFromApiV2(any())(any(), any())
++      }
++    }
++
++    "return none" when {
++      "invalid json returned by an api" in {
++        when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(zeroEmployments)))
++
++        Await.result(sut().employment(nino, "123"), 5.seconds) mustBe None
++      }
++    }
++  }
++
++  "EmploymentsConnector endEmployment" must {
++    "return an envelope" when {
++      "we send a PUT request to backend" in {
++        val json = Json.obj("data" -> JsString("123-456-789"))
++        when(httpHandler.putToApi(any(), any())(any(), any(), any()))
++          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
++
++        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
++
++        val result = Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
++
++        result mustBe "123-456-789"
++      }
++    }
++
++    "return an exception" when {
++      "json is invalid" in {
++        val json = Json.obj("test" -> JsString("123-456-789"))
++        when(httpHandler.putToApi(any(), any())(any(), any(), any()))
++          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
++        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
++
++        val ex = the[RuntimeException] thrownBy Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
++
++        ex.getMessage mustBe "Invalid json"
++      }
++    }
++  }
++
++  "EmploymentsConnector addEmployment" must {
++    "return an envelope id on a successful invocation" in {
++      val addEmployment = AddEmployment(
++        employerName = "testEmployment",
++        payrollNumber = "12345",
++        startDate = LocalDate.of(2017, 6, 6),
++        telephoneContactAllowed = "Yes",
++        telephoneNumber = Some("123456789")
++      )
++      val json = Json.obj("data" -> JsString("123-456-789"))
++      when(
++        httpHandler
++          .postToApi(meq(sut().addEmploymentServiceUrl(nino)), meq(addEmployment))(any(), any(), any())
++      )
++        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
++
++      val result = Await.result(sut().addEmployment(nino, addEmployment), 5.seconds)
+ 
+-  val anEmploymentObject: Employment = Employment(
++      result mustBe Some("123-456-789")
++    }
++  }
++
++  "EmploymentsConnector incorrectEmployment" must {
++    "return an envelope id on a successful invocation" in {
++      val model =
++        IncorrectIncome(whatYouToldUs = "TEST", telephoneContactAllowed = "Yes", telephoneNumber = Some("123456789"))
++      val json = Json.obj("data" -> JsString("123-456-789"))
++      when(httpHandler.postToApi(meq(s"/tai/$nino/employments/1/reason"), meq(model))(any(), any(), any()))
++        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
++
++      val result = Await.result(sut().incorrectEmployment(nino, 1, model), 5.seconds)
++
++      result mustBe Some("123-456-789")
++    }
++  }
++
++  val anEmploymentObject = Employment(
+     "company name",
+     Live,
+     Some("123"),
+@@ -44,19 +312,12 @@
+     "321",
+     2,
+     None,
+-    hasPayrolledBenefit = false,
+-    receivingOccupationalPension = false
++    false,
++    false
+   )
+ 
+   private val oneEmploymentDetails = List(anEmploymentObject)
+ 
+-  private val twoEmploymentsDetails = oneEmploymentDetails.head :: oneEmploymentDetails.head.copy(
+-    taxDistrictNumber = "1234",
+-    payeNumber = "4321",
+-    sequenceNumber = 3,
+-    receivingOccupationalPension = true
+-  ) :: Nil
+-
+   private val oneCeasedEmploymentDetails = List(
+     Employment(
+       "company name",
+@@ -69,10 +330,17 @@
+       "321",
+       2,
+       None,
+-      hasPayrolledBenefit = false,
+-      receivingOccupationalPension = false
++      false,
++      false
+     )
+   )
++
++  private val twoEmploymentsDetails = oneEmploymentDetails.head :: oneEmploymentDetails.head.copy(
++    taxDistrictNumber = "1234",
++    payeNumber = "4321",
++    sequenceNumber = 3,
++    receivingOccupationalPension = true
++  ) :: Nil
+ 
+   private val twoCeasedEmploymentsDetails = oneCeasedEmploymentDetails.head :: oneCeasedEmploymentDetails.head.copy(
+     taxDistrictNumber = "1234",
+@@ -224,290 +492,8 @@
+ 
+   val httpHandler: HttpHandler = mock[HttpHandler]
+ 
+-  def sut(servUrl: String = ""): EmploymentsConnector = new EmploymentsConnector(httpHandler, servicesConfig) {
++  def sut(servUrl: String = "") = new EmploymentsConnector(httpHandler, servicesConfig) {
+     override val serviceUrl: String = servUrl
+   }
+ 
+-  override def beforeEach(): Unit =
+-    Mockito.reset(httpHandler)
+-
+-  "EmploymentsConnector employments" must {
+-    "return a blank the service url" when {
+-      "no service url is provided" in {
+-        sut().serviceUrl mustBe ""
+-      }
+-    }
+-
+-    "return a valid service url" when {
+-      "a service url is provided" in {
+-        val url = "test/serviceurl/"
+-        sut(url).serviceUrl mustBe url
+-      }
+-    }
+-
+-    "return the URL of the employments API" when {
+-      "a nino is provided" in {
+-        sut("test/service")
+-          .employmentServiceUrl(nino, year) mustBe s"test/service/tai/$nino/employments/years/${year.year}"
+-      }
+-    }
+-
+-    "return the URL of the employments API without service URL" when {
+-      "no serviceUrl is given" in {
+-        sut().employmentServiceUrl(nino, year) mustBe s"/tai/$nino/employments/years/${year.year}"
+-      }
+-    }
+-
+-    "call the employments API with a URL containing a service URL" when {
+-      "the service URL is supplied" in {
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(oneEmployment)))
+-
+-        val responseFuture = sut("test/service").employments(nino, year)
+-
+-        Await.result(responseFuture, 5 seconds)
+-        verify(httpHandler)
+-          .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
+-      }
+-    }
+-
+-    "call the employments API with a URL containing a service URL" when {
+-
+-      "the service URL is not supplied" in {
+-
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(oneEmployment)))
+-
+-        val responseFuture = sut().employments(nino, year)
+-
+-        Await.result(responseFuture, 5 seconds)
+-
+-        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"), any())(any(), any())
+-      }
+-    }
+-
+-    "return employments from the employments API" when {
+-
+-      "api provides one employments" in {
+-
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(oneEmployment)))
+-
+-        val responseFuture = sut().employments(nino, year)
+-
+-        val result = Await.result(responseFuture, 5 seconds)
+-
+-        result mustBe oneEmploymentDetails
+-
+-        verify(httpHandler).getFromApiV2(meq(s"/tai/$nino/employments/years/${year.year}"), any())(any(), any())
+-      }
+-
+-      "api provides multiple employments" in {
+-
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(twoEmployments)))
+-
+-        val responseFuture = sut("test/service").employments(nino, year)
+-
+-        val result = Await.result(responseFuture, 5 seconds)
+-
+-        result mustBe twoEmploymentsDetails
+-
+-        verify(httpHandler)
+-          .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
+-      }
+-    }
+-
+-    "return nil when api returns zero employments" in {
+-
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-        .thenReturn(Future.successful(Json.parse(zeroEmployments)))
+-
+-      val responseFuture = sut("test/service").employments(nino, year)
+-
+-      val result = Await.result(responseFuture, 5 seconds)
+-
+-      result mustBe Nil
+-
+-      verify(httpHandler)
+-        .getFromApiV2(meq(s"test/service/tai/$nino/employments/years/${year.year}"), any())(any(), any())
+-    }
+-
+-    "throw an exception" when {
+-      "invalid json has returned by api" in {
+-
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
+-
+-        val ex = the[RuntimeException] thrownBy Await.result(sut("test/service").employments(nino, year), 5 seconds)
+-        ex.getMessage mustBe "Invalid employment json"
+-      }
+-    }
+-
+-  }
+-
+-  "EmploymentsConnector ceasedEmployments" must {
+-
+-    "return employments from the employments API" when {
+-
+-      "api provides one employments" in {
+-
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(oneCeasedEmployment)))
+-
+-        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+-
+-        val result = Await.result(responseFuture, 5 seconds)
+-
+-        result mustBe oneCeasedEmploymentDetails
+-
+-        verify(httpHandler)
+-          .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(
+-            any(),
+-            any()
+-          )
+-      }
+-
+-      "api provides multiple employments" in {
+-
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(twoCeasedEmployments)))
+-
+-        val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+-
+-        val result = Await.result(responseFuture, 5 seconds)
+-
+-        result mustBe twoCeasedEmploymentsDetails
+-
+-        verify(httpHandler)
+-          .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(
+-            any(),
+-            any()
+-          )
+-      }
+-    }
+-
+-    "return nil when api returns zero employments" in {
+-
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-        .thenReturn(Future.successful(Json.parse(zeroCeasedEmployments)))
+-
+-      val responseFuture = sut("test/service").ceasedEmployments(nino, year)
+-
+-      val result = Await.result(responseFuture, 5 seconds)
+-
+-      result mustBe Nil
+-
+-      verify(httpHandler)
+-        .getFromApiV2(meq(s"test/service/tai/$nino/employments/year/${year.year}/status/ceased"), any())(any(), any())
+-    }
+-
+-    "throw an exception" when {
+-      "invalid json has returned by api" in {
+-
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse("""{"test":"test"}""")))
+-
+-        val ex = the[RuntimeException] thrownBy Await
+-          .result(sut("test/service").ceasedEmployments(nino, year), 5 seconds)
+-        ex.getMessage mustBe "Invalid employment json"
+-      }
+-    }
+-  }
+-
+-  "EmploymentsConnector employment" must {
+-
+-    "return service url" in {
+-      sut("test").employmentUrl(nino, "123") mustBe s"test/tai/$nino/employments/123"
+-    }
+-
+-    "return an employment from current year" when {
+-      "valid id has been passed" in {
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(anEmployment)))
+-
+-        val result = Await.result(sut().employment(nino, "123"), 5.seconds)
+-
+-        result mustBe Some(anEmploymentObject)
+-        verify(httpHandler, times(1)).getFromApiV2(any(), any())(any(), any())
+-      }
+-    }
+-
+-    "return none" when {
+-      "invalid json returned by an api" in {
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
+-          .thenReturn(Future.successful(Json.parse(zeroEmployments)))
+-
+-        Await.result(sut().employment(nino, "123"), 5.seconds) mustBe None
+-      }
+-    }
+-  }
+-
+-  "EmploymentsConnector endEmployment" must {
+-    "return an envelope" when {
+-      "we send a PUT request to backend" in {
+-        val json = Json.obj("data" -> JsString("123-456-789"))
+-        when(httpHandler.putToApi(any(), any(), any())(any(), any(), any(), any()))
+-          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+-
+-        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
+-
+-        val result = Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
+-
+-        result mustBe "123-456-789"
+-      }
+-    }
+-
+-    "return an exception" when {
+-      "json is invalid" in {
+-        val json = Json.obj("test" -> JsString("123-456-789"))
+-        when(httpHandler.putToApi(any(), any(), any())(any(), any(), any(), any()))
+-          .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+-        val endEmploymentData = EndEmployment(LocalDate.of(2017, 10, 15), "YES", Some("EXT-TEST"))
+-
+-        val ex = the[RuntimeException] thrownBy Await.result(sut().endEmployment(nino, 1, endEmploymentData), 5.seconds)
+-
+-        ex.getMessage mustBe "Invalid json"
+-      }
+-    }
+-  }
+-
+-  "EmploymentsConnector addEmployment" must {
+-    "return an envelope id on a successful invocation" in {
+-      val addEmployment = AddEmployment(
+-        employerName = "testEmployment",
+-        payrollNumber = "12345",
+-        startDate = LocalDate.of(2017, 6, 6),
+-        telephoneContactAllowed = "Yes",
+-        telephoneNumber = Some("123456789")
+-      )
+-      val json = Json.obj("data" -> JsString("123-456-789"))
+-      when(
+-        httpHandler
+-          .postToApi(meq(sut().addEmploymentServiceUrl(nino)), meq(addEmployment), any())(any(), any(), any(), any())
+-      )
+-        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+-
+-      val result = Await.result(sut().addEmployment(nino, addEmployment), 5.seconds)
+-
+-      result mustBe Some("123-456-789")
+-    }
+-  }
+-
+-  "EmploymentsConnector incorrectEmployment" must {
+-    "return an envelope id on a successful invocation" in {
+-      val model =
+-        IncorrectIncome(whatYouToldUs = "TEST", telephoneContactAllowed = "Yes", telephoneNumber = Some("123456789"))
+-      val json = Json.obj("data" -> JsString("123-456-789"))
+-      when(
+-        httpHandler.postToApi(meq(s"/tai/$nino/employments/1/reason"), meq(model), any())(any(), any(), any(), any())
+-      )
+-        .thenReturn(Future.successful(HttpResponse(200, json, Map[String, Seq[String]]())))
+-
+-      val result = Await.result(sut().incorrectEmployment(nino, 1, model), 5.seconds)
+-
+-      result mustBe Some("123-456-789")
+-    }
+-  }
+-
+ }
+Index: test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/JourneyCacheConnectorSpec.scala	(date 1696950747437)
+@@ -30,33 +30,25 @@
+ 
+ class JourneyCacheConnectorSpec extends BaseSpec {
+ 
+-  private val journeyName = "journey1"
+-
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+-  def sut: JourneyCacheConnector = new JourneyCacheConnector(httpHandler, servicesConfig) {
+-    override val serviceUrl: String = "mockUrl"
+-  }
+-
+   "currentCache" must {
+ 
+     "return the map of current cached values [String, String], as returned from the api call" in {
+       val cacheString = """{"key1":"value1","key2":"value2"}"""
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(Json.parse(cacheString)))
++      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(Json.parse(cacheString)))
+ 
+       val expectedResult = Map("key1" -> "value1", "key2" -> "value2")
+       val result = Await.result(sut.currentCache(journeyName), 5 seconds)
+       result mustBe expectedResult
+     }
+     "trap a NO CONTENT exception (a valid business scenario), and return an empty map in its place" in {
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++      when(httpHandler.getFromApiV2(any())(any(), any()))
+         .thenReturn(Future.failed(new HttpException("no cache was found", NO_CONTENT)))
+ 
+       val result = Await.result(sut.currentCache(journeyName), 5 seconds)
+       result mustBe Map.empty[String, String]
+     }
+     "expose any exception that is not a NOT FOUND type" in {
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++      when(httpHandler.getFromApiV2(any())(any(), any()))
+         .thenReturn(Future.failed(new InternalServerException("something terminal")))
+ 
+       val thrown = the[InternalServerException] thrownBy Await.result(sut.currentCache(journeyName), 5 seconds)
+@@ -67,9 +59,9 @@
+   "currentValueAs" must {
+ 
+     "return the cached value transformed by the supplied function" in {
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("1")))
++      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("1")))
+ 
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("2017-03-04")))
++      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("2017-03-04")))
+       Await.result(
+         sut.currentValueAs[LocalDate](journeyName, "dateValKey", string => LocalDate.parse(string)),
+         5 seconds
+@@ -77,7 +69,7 @@
+     }
+ 
+     "trap a NO CONTENT exception (a valid business scenario), and return None in its place" in {
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++      when(httpHandler.getFromApiV2(any())(any(), any()))
+         .thenReturn(Future.failed(new HttpException("key wasn't found in cache", NO_CONTENT)))
+ 
+       val result = Await.result(sut.currentValueAs[String](journeyName, "key1", string => string), 5 seconds)
+@@ -85,7 +77,7 @@
+     }
+ 
+     "expose an exception that is not a NOT FOUND type" in {
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++      when(httpHandler.getFromApiV2(any())(any(), any()))
+         .thenReturn(Future.failed(new InternalServerException("something terminal")))
+ 
+       val thrown = the[InternalServerException] thrownBy Await
+@@ -97,7 +89,7 @@
+   "mandatoryJourneyValueAs" must {
+ 
+     "return the requested values where present" in {
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any())).thenReturn(Future.successful(JsString("true")))
++      when(httpHandler.getFromApiV2(any())(any(), any())).thenReturn(Future.successful(JsString("true")))
+       Await.result(
+         sut.mandatoryJourneyValueAs[Boolean](journeyName, "booleanValKey", string => string.toBoolean),
+         5 seconds
+@@ -105,7 +97,7 @@
+     }
+ 
+     "return an error message when the requested value is not found" in {
+-      when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++      when(httpHandler.getFromApiV2(any())(any(), any()))
+         .thenReturn(Future.failed(new HttpException("key wasn't found in cache", NO_CONTENT)))
+ 
+       val expectedMsg = "The mandatory value under key 'key1' was not found in the journey cache for 'journey1'"
+@@ -122,7 +114,7 @@
+       val newValuesToCache = Map("key1" -> "value1", "key2" -> "value2")
+       val updatedCacheJson = """{"key1":"value1","key2":"value2","key7":"value7"}"""
+       val updatedCacheMap = Map("key1" -> "value1", "key2" -> "value2", "key7" -> "value7")
+-      when(httpHandler.postToApi(any(), any(), any())(any(), any(), any(), any()))
++      when(httpHandler.postToApi(any(), any())(any(), any(), any()))
+         .thenReturn(Future.successful(HttpResponse(OK, updatedCacheJson)))
+ 
+       val result = Await.result(sut.cache(journeyName, newValuesToCache), 5 seconds)
+@@ -134,7 +126,7 @@
+     "remove journey cache data for company car journey" in {
+       val url = s"${sut.cacheUrl(journeyName)}"
+ 
+-      when(httpHandler.deleteFromApi(meq(url), any())(any(), any()))
++      when(httpHandler.deleteFromApi(meq(url))(any(), any(), any()))
+         .thenReturn(Future.successful(HttpResponse.apply(NO_CONTENT, "")))
+ 
+       val result = Await.result(sut.flush(journeyName), 5 seconds)
+@@ -146,7 +138,7 @@
+     "remove journey cache data for company car journey" in {
+       val url = s"${sut.cacheUrl(s"$journeyName/1")}"
+ 
+-      when(httpHandler.deleteFromApi(meq(url), any())(any(), any()))
++      when(httpHandler.deleteFromApi(meq(url))(any(), any(), any()))
+         .thenReturn(Future.successful(HttpResponse.apply(NO_CONTENT, "")))
+ 
+       val result = Await.result(sut.flushWithEmpId(journeyName, 1), 5 seconds)
+@@ -154,4 +146,12 @@
+     }
+   }
+ 
++  private val journeyName = "journey1"
++
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
++  def sut: JourneyCacheConnector = new JourneyCacheConnector(httpHandler, servicesConfig) {
++    override val serviceUrl: String = "mockUrl"
++  }
++
+ }
+Index: test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/PreviousYearsIncomeConnectorSpec.scala	(date 1696950747440)
+@@ -27,8 +27,6 @@
+ 
+ class PreviousYearsIncomeConnectorSpec extends BaseSpec {
+ 
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+   "PreviousYearsIncomeConnector" must {
+ 
+     "return an envelope id on a successful invocation" in {
+@@ -37,7 +35,7 @@
+       val json = Json.obj("data" -> JsString("123-456-789"))
+       when(
+         httpHandler
+-          .postToApi(meq(s"/tai/$nino/employments/years/2016/update"), meq(model), any())(any(), any(), any(), any())
++          .postToApi(meq(s"/tai/$nino/employments/years/2016/update"), meq(model))(any(), any(), any())
+       )
+         .thenReturn(Future.successful(HttpResponse.apply(200, json.toString)))
+ 
+@@ -48,6 +46,8 @@
+ 
+   }
+ 
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
+   def sut(servUrl: String = ""): PreviousYearsIncomeConnector =
+     new PreviousYearsIncomeConnector(httpHandler, servicesConfig) {
+       override val serviceUrl: String = servUrl
+Index: test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala b/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala
+--- a/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala	
++++ b/test/uk/gov/hmrc/tai/connectors/TaxFreeAmountComparisonConnectorSpec.scala	(date 1696950747442)
+@@ -29,10 +29,6 @@
+ 
+ class TaxFreeAmountComparisonConnectorSpec extends BaseSpec {
+ 
+-  val httpHandler: HttpHandler = mock[HttpHandler]
+-
+-  def sut = new TaxFreeAmountComparisonConnector(httpHandler, servicesConfig)
+-
+   "tax free amount url" must {
+     "fetch the url to connect to TAI to retrieve tax free amount comparison" in {
+       sut.taxFreeAmountComparisonUrl(
+@@ -71,7 +67,7 @@
+ 
+         val taxFreeAmountUrl = s"${sut.serviceUrl}/tai/${nino.nino}/tax-account/tax-free-amount-comparison"
+ 
+-        when(httpHandler.getFromApiV2(meq(taxFreeAmountUrl), any())(any(), any())).thenReturn(Future.successful(json))
++        when(httpHandler.getFromApiV2(meq(taxFreeAmountUrl))(any(), any())).thenReturn(Future.successful(json))
+ 
+         val codingComponents = Seq(CodingComponent(CarBenefit, Some(1), 1, "Car Benefit", Some(1)))
+ 
+@@ -86,7 +82,7 @@
+     "return a BadRequestException" when {
+       "the api responds with invalid json" in {
+         val exceptionMessage = "exception message"
+-        when(httpHandler.getFromApiV2(any(), any())(any(), any()))
++        when(httpHandler.getFromApiV2(any())(any(), any()))
+           .thenReturn(Future.failed(new BadRequestException(exceptionMessage)))
+ 
+         val ex = the[BadRequestException] thrownBy Await.result(sut.taxFreeAmountComparison(nino), 5 seconds)
+@@ -95,4 +91,9 @@
+       }
+     }
+   }
++
++  val httpHandler: HttpHandler = mock[HttpHandler]
++
++  def sut = new TaxFreeAmountComparisonConnector(httpHandler, servicesConfig)
++
+ }
+diff --git a/app/views/timeoutDialog.scala.html b/app/views/timeoutDialog.scala.html
+deleted file mode 100644
+diff --git a/app/views/MainTemplate.scala.html b/app/views/MainTemplate.scala.html
+deleted file mode 100644
diff --git a/app/views/timeoutDialog.scala.html b/app/views/timeoutDialog.scala.html
deleted file mode 100644
diff --git a/app/views/MainTemplate.scala.html b/app/views/MainTemplate.scala.html
deleted file mode 100644
